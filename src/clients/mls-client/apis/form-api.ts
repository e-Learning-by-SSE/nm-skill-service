/* tslint:disable */
/* eslint-disable */
/**
 * MLS2 API
 * Central API
 *
 * OpenAPI spec version: 0.7.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { FormFormItemWrite } from '../models';
import { FormFormWrite } from '../models';
import { FormJsonldFormItemRead } from '../models';
import { FormJsonldFormItemWrite } from '../models';
import { FormJsonldFormRead } from '../models';
import { FormJsonldFormWrite } from '../models';
import { InlineResponse20033 } from '../models';
/**
 * FormApi - axios parameter creator
 * @export
 */
export const FormApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Form resource.
         * @summary Removes the Form resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFormItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteFormItem.');
            }
            const localVarPath = `/mls-api/forms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Form resources.
         * @summary Retrieves the collection of Form resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {string} [title] 
         * @param {string} [originalForm] 
         * @param {Array<string>} [originalForm] 
         * @param {string} [externalContents] 
         * @param {Array<string>} [externalContents] 
         * @param {string} [externalContentOrganizations] 
         * @param {Array<string>} [externalContentOrganizations] 
         * @param {string} [formSetOrganization] 
         * @param {Array<string>} [formSetOrganization] 
         * @param {string} [formSet] 
         * @param {Array<string>} [formSet] 
         * @param {string} [connectedTaskSteps] 
         * @param {Array<string>} [connectedTaskSteps] 
         * @param {string} [connectedTaskStepsTask] 
         * @param {Array<string>} [connectedTaskStepsTask] 
         * @param {string} [appTagsTitle] 
         * @param {Array<string>} [appTagsTitle] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [creatorLastname] 
         * @param {string} [formSetTitle] 
         * @param {string} [isNewestVersion] 
         * @param {boolean} [archived] 
         * @param {boolean} [isTemplate] 
         * @param {boolean} [isTaskInline] 
         * @param {string} [orderTitle] 
         * @param {string} [orderCreatedAt] 
         * @param {string} [orderUpdatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormCollection: async (page?: number, itemsPerPage?: number, pagination?: boolean, id?: number, id?: Array<number>, title?: string, originalForm?: string, originalForm?: Array<string>, externalContents?: string, externalContents?: Array<string>, externalContentOrganizations?: string, externalContentOrganizations?: Array<string>, formSetOrganization?: string, formSetOrganization?: Array<string>, formSet?: string, formSet?: Array<string>, connectedTaskSteps?: string, connectedTaskSteps?: Array<string>, connectedTaskStepsTask?: string, connectedTaskStepsTask?: Array<string>, appTagsTitle?: string, appTagsTitle?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, creatorLastname?: string, formSetTitle?: string, isNewestVersion?: string, archived?: boolean, isTemplate?: boolean, isTaskInline?: boolean, orderTitle?: string, orderCreatedAt?: string, orderUpdatedAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mls-api/forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (pagination !== undefined) {
                localVarQueryParameter['pagination'] = pagination;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (originalForm !== undefined) {
                localVarQueryParameter['originalForm'] = originalForm;
            }

            if (originalForm) {
                localVarQueryParameter['originalForm[]'] = originalForm;
            }

            if (externalContents !== undefined) {
                localVarQueryParameter['externalContents'] = externalContents;
            }

            if (externalContents) {
                localVarQueryParameter['externalContents[]'] = externalContents;
            }

            if (externalContentOrganizations !== undefined) {
                localVarQueryParameter['externalContentOrganizations'] = externalContentOrganizations;
            }

            if (externalContentOrganizations) {
                localVarQueryParameter['externalContentOrganizations[]'] = externalContentOrganizations;
            }

            if (formSetOrganization !== undefined) {
                localVarQueryParameter['formSet.organization'] = formSetOrganization;
            }

            if (formSetOrganization) {
                localVarQueryParameter['formSet.organization[]'] = formSetOrganization;
            }

            if (formSet !== undefined) {
                localVarQueryParameter['formSet'] = formSet;
            }

            if (formSet) {
                localVarQueryParameter['formSet[]'] = formSet;
            }

            if (connectedTaskSteps !== undefined) {
                localVarQueryParameter['connectedTaskSteps'] = connectedTaskSteps;
            }

            if (connectedTaskSteps) {
                localVarQueryParameter['connectedTaskSteps[]'] = connectedTaskSteps;
            }

            if (connectedTaskStepsTask !== undefined) {
                localVarQueryParameter['connectedTaskSteps.task'] = connectedTaskStepsTask;
            }

            if (connectedTaskStepsTask) {
                localVarQueryParameter['connectedTaskSteps.task[]'] = connectedTaskStepsTask;
            }

            if (appTagsTitle !== undefined) {
                localVarQueryParameter['appTags.title'] = appTagsTitle;
            }

            if (appTagsTitle) {
                localVarQueryParameter['appTags.title[]'] = appTagsTitle;
            }

            if (mls1Id !== undefined) {
                localVarQueryParameter['mls1Id'] = mls1Id;
            }

            if (mls1Id) {
                localVarQueryParameter['mls1Id[]'] = mls1Id;
            }

            if (creatorLastname !== undefined) {
                localVarQueryParameter['creator.lastname'] = creatorLastname;
            }

            if (formSetTitle !== undefined) {
                localVarQueryParameter['formSet.title'] = formSetTitle;
            }

            if (isNewestVersion !== undefined) {
                localVarQueryParameter['isNewestVersion'] = isNewestVersion;
            }

            if (archived !== undefined) {
                localVarQueryParameter['archived'] = archived;
            }

            if (isTemplate !== undefined) {
                localVarQueryParameter['isTemplate'] = isTemplate;
            }

            if (isTaskInline !== undefined) {
                localVarQueryParameter['isTaskInline'] = isTaskInline;
            }

            if (orderTitle !== undefined) {
                localVarQueryParameter['order[title]'] = orderTitle;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }

            if (orderUpdatedAt !== undefined) {
                localVarQueryParameter['order[updatedAt]'] = orderUpdatedAt;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Form resource.
         * @summary Retrieves a Form resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getFormItem.');
            }
            const localVarPath = `/mls-api/forms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Form resource.
         * @summary Creates a Form resource.
         * @param {FormJsonldFormWrite} body The new Form resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFormCollection: async (body: FormJsonldFormWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postFormCollection.');
            }
            const localVarPath = `/mls-api/forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Form resource.
         * @summary Creates a Form resource.
         * @param {FormJsonldFormWrite} body The new Form resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFormCollection: async (body: FormJsonldFormWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postFormCollection.');
            }
            const localVarPath = `/mls-api/forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCopyFormFormItem: async (body: FormJsonldFormItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putCopyFormFormItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putCopyFormFormItem.');
            }
            const localVarPath = `/mls-api/forms/copy-form/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCopyFormFormItem: async (body: FormJsonldFormItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putCopyFormFormItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putCopyFormFormItem.');
            }
            const localVarPath = `/mls-api/forms/copy-form/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCopyFromExternalContentFormItem: async (body: FormJsonldFormItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putCopyFromExternalContentFormItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putCopyFromExternalContentFormItem.');
            }
            const localVarPath = `/mls-api/forms/copy-from-external-content/{id}/{externalContentOrganization}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCopyFromExternalContentFormItem: async (body: FormJsonldFormItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putCopyFromExternalContentFormItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putCopyFromExternalContentFormItem.');
            }
            const localVarPath = `/mls-api/forms/copy-from-external-content/{id}/{externalContentOrganization}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFormItem: async (body: FormJsonldFormItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putFormItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putFormItem.');
            }
            const localVarPath = `/mls-api/forms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFormItem: async (body: FormJsonldFormItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putFormItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putFormItem.');
            }
            const localVarPath = `/mls-api/forms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGenerateNextVersionFormItem: async (body: FormJsonldFormItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putGenerateNextVersionFormItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putGenerateNextVersionFormItem.');
            }
            const localVarPath = `/mls-api/forms/generate-next-version/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGenerateNextVersionFormItem: async (body: FormJsonldFormItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putGenerateNextVersionFormItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putGenerateNextVersionFormItem.');
            }
            const localVarPath = `/mls-api/forms/generate-next-version/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormApi - functional programming interface
 * @export
 */
export const FormApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes the Form resource.
         * @summary Removes the Form resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFormItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await FormApiAxiosParamCreator(configuration).deleteFormItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the collection of Form resources.
         * @summary Retrieves the collection of Form resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {string} [title] 
         * @param {string} [originalForm] 
         * @param {Array<string>} [originalForm] 
         * @param {string} [externalContents] 
         * @param {Array<string>} [externalContents] 
         * @param {string} [externalContentOrganizations] 
         * @param {Array<string>} [externalContentOrganizations] 
         * @param {string} [formSetOrganization] 
         * @param {Array<string>} [formSetOrganization] 
         * @param {string} [formSet] 
         * @param {Array<string>} [formSet] 
         * @param {string} [connectedTaskSteps] 
         * @param {Array<string>} [connectedTaskSteps] 
         * @param {string} [connectedTaskStepsTask] 
         * @param {Array<string>} [connectedTaskStepsTask] 
         * @param {string} [appTagsTitle] 
         * @param {Array<string>} [appTagsTitle] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [creatorLastname] 
         * @param {string} [formSetTitle] 
         * @param {string} [isNewestVersion] 
         * @param {boolean} [archived] 
         * @param {boolean} [isTemplate] 
         * @param {boolean} [isTaskInline] 
         * @param {string} [orderTitle] 
         * @param {string} [orderCreatedAt] 
         * @param {string} [orderUpdatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormCollection(page?: number, itemsPerPage?: number, pagination?: boolean, id?: number, id?: Array<number>, title?: string, originalForm?: string, originalForm?: Array<string>, externalContents?: string, externalContents?: Array<string>, externalContentOrganizations?: string, externalContentOrganizations?: Array<string>, formSetOrganization?: string, formSetOrganization?: Array<string>, formSet?: string, formSet?: Array<string>, connectedTaskSteps?: string, connectedTaskSteps?: Array<string>, connectedTaskStepsTask?: string, connectedTaskStepsTask?: Array<string>, appTagsTitle?: string, appTagsTitle?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, creatorLastname?: string, formSetTitle?: string, isNewestVersion?: string, archived?: boolean, isTemplate?: boolean, isTaskInline?: boolean, orderTitle?: string, orderCreatedAt?: string, orderUpdatedAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20033>>> {
            const localVarAxiosArgs = await FormApiAxiosParamCreator(configuration).getFormCollection(page, itemsPerPage, pagination, id, id, title, originalForm, originalForm, externalContents, externalContents, externalContentOrganizations, externalContentOrganizations, formSetOrganization, formSetOrganization, formSet, formSet, connectedTaskSteps, connectedTaskSteps, connectedTaskStepsTask, connectedTaskStepsTask, appTagsTitle, appTagsTitle, mls1Id, mls1Id, creatorLastname, formSetTitle, isNewestVersion, archived, isTemplate, isTaskInline, orderTitle, orderCreatedAt, orderUpdatedAt, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a Form resource.
         * @summary Retrieves a Form resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FormJsonldFormItemRead>>> {
            const localVarAxiosArgs = await FormApiAxiosParamCreator(configuration).getFormItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Form resource.
         * @summary Creates a Form resource.
         * @param {FormJsonldFormWrite} body The new Form resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFormCollection(body: FormJsonldFormWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FormJsonldFormRead>>> {
            const localVarAxiosArgs = await FormApiAxiosParamCreator(configuration).postFormCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Form resource.
         * @summary Creates a Form resource.
         * @param {FormJsonldFormWrite} body The new Form resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFormCollection(body: FormJsonldFormWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FormJsonldFormRead>>> {
            const localVarAxiosArgs = await FormApiAxiosParamCreator(configuration).postFormCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCopyFormFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FormJsonldFormRead>>> {
            const localVarAxiosArgs = await FormApiAxiosParamCreator(configuration).putCopyFormFormItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCopyFormFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FormJsonldFormRead>>> {
            const localVarAxiosArgs = await FormApiAxiosParamCreator(configuration).putCopyFormFormItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCopyFromExternalContentFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FormJsonldFormRead>>> {
            const localVarAxiosArgs = await FormApiAxiosParamCreator(configuration).putCopyFromExternalContentFormItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCopyFromExternalContentFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FormJsonldFormRead>>> {
            const localVarAxiosArgs = await FormApiAxiosParamCreator(configuration).putCopyFromExternalContentFormItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FormJsonldFormRead>>> {
            const localVarAxiosArgs = await FormApiAxiosParamCreator(configuration).putFormItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FormJsonldFormRead>>> {
            const localVarAxiosArgs = await FormApiAxiosParamCreator(configuration).putFormItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGenerateNextVersionFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FormJsonldFormRead>>> {
            const localVarAxiosArgs = await FormApiAxiosParamCreator(configuration).putGenerateNextVersionFormItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGenerateNextVersionFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FormJsonldFormRead>>> {
            const localVarAxiosArgs = await FormApiAxiosParamCreator(configuration).putGenerateNextVersionFormItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FormApi - factory interface
 * @export
 */
export const FormApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes the Form resource.
         * @summary Removes the Form resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFormItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return FormApiFp(configuration).deleteFormItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Form resources.
         * @summary Retrieves the collection of Form resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {string} [title] 
         * @param {string} [originalForm] 
         * @param {Array<string>} [originalForm] 
         * @param {string} [externalContents] 
         * @param {Array<string>} [externalContents] 
         * @param {string} [externalContentOrganizations] 
         * @param {Array<string>} [externalContentOrganizations] 
         * @param {string} [formSetOrganization] 
         * @param {Array<string>} [formSetOrganization] 
         * @param {string} [formSet] 
         * @param {Array<string>} [formSet] 
         * @param {string} [connectedTaskSteps] 
         * @param {Array<string>} [connectedTaskSteps] 
         * @param {string} [connectedTaskStepsTask] 
         * @param {Array<string>} [connectedTaskStepsTask] 
         * @param {string} [appTagsTitle] 
         * @param {Array<string>} [appTagsTitle] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [creatorLastname] 
         * @param {string} [formSetTitle] 
         * @param {string} [isNewestVersion] 
         * @param {boolean} [archived] 
         * @param {boolean} [isTemplate] 
         * @param {boolean} [isTaskInline] 
         * @param {string} [orderTitle] 
         * @param {string} [orderCreatedAt] 
         * @param {string} [orderUpdatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormCollection(page?: number, itemsPerPage?: number, pagination?: boolean, id?: number, id?: Array<number>, title?: string, originalForm?: string, originalForm?: Array<string>, externalContents?: string, externalContents?: Array<string>, externalContentOrganizations?: string, externalContentOrganizations?: Array<string>, formSetOrganization?: string, formSetOrganization?: Array<string>, formSet?: string, formSet?: Array<string>, connectedTaskSteps?: string, connectedTaskSteps?: Array<string>, connectedTaskStepsTask?: string, connectedTaskStepsTask?: Array<string>, appTagsTitle?: string, appTagsTitle?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, creatorLastname?: string, formSetTitle?: string, isNewestVersion?: string, archived?: boolean, isTemplate?: boolean, isTaskInline?: boolean, orderTitle?: string, orderCreatedAt?: string, orderUpdatedAt?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20033>> {
            return FormApiFp(configuration).getFormCollection(page, itemsPerPage, pagination, id, id, title, originalForm, originalForm, externalContents, externalContents, externalContentOrganizations, externalContentOrganizations, formSetOrganization, formSetOrganization, formSet, formSet, connectedTaskSteps, connectedTaskSteps, connectedTaskStepsTask, connectedTaskStepsTask, appTagsTitle, appTagsTitle, mls1Id, mls1Id, creatorLastname, formSetTitle, isNewestVersion, archived, isTemplate, isTaskInline, orderTitle, orderCreatedAt, orderUpdatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Form resource.
         * @summary Retrieves a Form resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FormJsonldFormItemRead>> {
            return FormApiFp(configuration).getFormItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Form resource.
         * @summary Creates a Form resource.
         * @param {FormJsonldFormWrite} body The new Form resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFormCollection(body: FormJsonldFormWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<FormJsonldFormRead>> {
            return FormApiFp(configuration).postFormCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Form resource.
         * @summary Creates a Form resource.
         * @param {FormJsonldFormWrite} body The new Form resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFormCollection(body: FormJsonldFormWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<FormJsonldFormRead>> {
            return FormApiFp(configuration).postFormCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCopyFormFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FormJsonldFormRead>> {
            return FormApiFp(configuration).putCopyFormFormItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCopyFormFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FormJsonldFormRead>> {
            return FormApiFp(configuration).putCopyFormFormItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCopyFromExternalContentFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FormJsonldFormRead>> {
            return FormApiFp(configuration).putCopyFromExternalContentFormItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCopyFromExternalContentFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FormJsonldFormRead>> {
            return FormApiFp(configuration).putCopyFromExternalContentFormItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FormJsonldFormRead>> {
            return FormApiFp(configuration).putFormItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FormJsonldFormRead>> {
            return FormApiFp(configuration).putFormItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGenerateNextVersionFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FormJsonldFormRead>> {
            return FormApiFp(configuration).putGenerateNextVersionFormItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Form resource.
         * @summary Replaces the Form resource.
         * @param {FormJsonldFormItemWrite} body The updated Form resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGenerateNextVersionFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FormJsonldFormRead>> {
            return FormApiFp(configuration).putGenerateNextVersionFormItem(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FormApi - object-oriented interface
 * @export
 * @class FormApi
 * @extends {BaseAPI}
 */
export class FormApi extends BaseAPI {
    /**
     * Removes the Form resource.
     * @summary Removes the Form resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApi
     */
    public async deleteFormItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return FormApiFp(this.configuration).deleteFormItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the collection of Form resources.
     * @summary Retrieves the collection of Form resources.
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {boolean} [pagination] Enable or disable pagination
     * @param {number} [id] 
     * @param {Array<number>} [id] 
     * @param {string} [title] 
     * @param {string} [originalForm] 
     * @param {Array<string>} [originalForm] 
     * @param {string} [externalContents] 
     * @param {Array<string>} [externalContents] 
     * @param {string} [externalContentOrganizations] 
     * @param {Array<string>} [externalContentOrganizations] 
     * @param {string} [formSetOrganization] 
     * @param {Array<string>} [formSetOrganization] 
     * @param {string} [formSet] 
     * @param {Array<string>} [formSet] 
     * @param {string} [connectedTaskSteps] 
     * @param {Array<string>} [connectedTaskSteps] 
     * @param {string} [connectedTaskStepsTask] 
     * @param {Array<string>} [connectedTaskStepsTask] 
     * @param {string} [appTagsTitle] 
     * @param {Array<string>} [appTagsTitle] 
     * @param {number} [mls1Id] 
     * @param {Array<number>} [mls1Id] 
     * @param {string} [creatorLastname] 
     * @param {string} [formSetTitle] 
     * @param {string} [isNewestVersion] 
     * @param {boolean} [archived] 
     * @param {boolean} [isTemplate] 
     * @param {boolean} [isTaskInline] 
     * @param {string} [orderTitle] 
     * @param {string} [orderCreatedAt] 
     * @param {string} [orderUpdatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApi
     */
    public async getFormCollection(page?: number, itemsPerPage?: number, pagination?: boolean, id?: number, id?: Array<number>, title?: string, originalForm?: string, originalForm?: Array<string>, externalContents?: string, externalContents?: Array<string>, externalContentOrganizations?: string, externalContentOrganizations?: Array<string>, formSetOrganization?: string, formSetOrganization?: Array<string>, formSet?: string, formSet?: Array<string>, connectedTaskSteps?: string, connectedTaskSteps?: Array<string>, connectedTaskStepsTask?: string, connectedTaskStepsTask?: Array<string>, appTagsTitle?: string, appTagsTitle?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, creatorLastname?: string, formSetTitle?: string, isNewestVersion?: string, archived?: boolean, isTemplate?: boolean, isTaskInline?: boolean, orderTitle?: string, orderCreatedAt?: string, orderUpdatedAt?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20033>> {
        return FormApiFp(this.configuration).getFormCollection(page, itemsPerPage, pagination, id, id, title, originalForm, originalForm, externalContents, externalContents, externalContentOrganizations, externalContentOrganizations, formSetOrganization, formSetOrganization, formSet, formSet, connectedTaskSteps, connectedTaskSteps, connectedTaskStepsTask, connectedTaskStepsTask, appTagsTitle, appTagsTitle, mls1Id, mls1Id, creatorLastname, formSetTitle, isNewestVersion, archived, isTemplate, isTaskInline, orderTitle, orderCreatedAt, orderUpdatedAt, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a Form resource.
     * @summary Retrieves a Form resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApi
     */
    public async getFormItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FormJsonldFormItemRead>> {
        return FormApiFp(this.configuration).getFormItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a Form resource.
     * @summary Creates a Form resource.
     * @param {FormJsonldFormWrite} body The new Form resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApi
     */
    public async postFormCollection(body: FormJsonldFormWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<FormJsonldFormRead>> {
        return FormApiFp(this.configuration).postFormCollection(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Form resource.
     * @summary Creates a Form resource.
     * @param {FormJsonldFormWrite} body The new Form resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApi
     */
    public async postFormCollection(body: FormJsonldFormWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<FormJsonldFormRead>> {
        return FormApiFp(this.configuration).postFormCollection(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the Form resource.
     * @summary Replaces the Form resource.
     * @param {FormJsonldFormItemWrite} body The updated Form resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApi
     */
    public async putCopyFormFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FormJsonldFormRead>> {
        return FormApiFp(this.configuration).putCopyFormFormItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Form resource.
     * @summary Replaces the Form resource.
     * @param {FormJsonldFormItemWrite} body The updated Form resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApi
     */
    public async putCopyFormFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FormJsonldFormRead>> {
        return FormApiFp(this.configuration).putCopyFormFormItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the Form resource.
     * @summary Replaces the Form resource.
     * @param {FormJsonldFormItemWrite} body The updated Form resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApi
     */
    public async putCopyFromExternalContentFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FormJsonldFormRead>> {
        return FormApiFp(this.configuration).putCopyFromExternalContentFormItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Form resource.
     * @summary Replaces the Form resource.
     * @param {FormJsonldFormItemWrite} body The updated Form resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApi
     */
    public async putCopyFromExternalContentFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FormJsonldFormRead>> {
        return FormApiFp(this.configuration).putCopyFromExternalContentFormItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the Form resource.
     * @summary Replaces the Form resource.
     * @param {FormJsonldFormItemWrite} body The updated Form resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApi
     */
    public async putFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FormJsonldFormRead>> {
        return FormApiFp(this.configuration).putFormItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Form resource.
     * @summary Replaces the Form resource.
     * @param {FormJsonldFormItemWrite} body The updated Form resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApi
     */
    public async putFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FormJsonldFormRead>> {
        return FormApiFp(this.configuration).putFormItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the Form resource.
     * @summary Replaces the Form resource.
     * @param {FormJsonldFormItemWrite} body The updated Form resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApi
     */
    public async putGenerateNextVersionFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FormJsonldFormRead>> {
        return FormApiFp(this.configuration).putGenerateNextVersionFormItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Form resource.
     * @summary Replaces the Form resource.
     * @param {FormJsonldFormItemWrite} body The updated Form resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApi
     */
    public async putGenerateNextVersionFormItem(body: FormJsonldFormItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FormJsonldFormRead>> {
        return FormApiFp(this.configuration).putGenerateNextVersionFormItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
