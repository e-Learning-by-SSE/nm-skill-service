/* tslint:disable */
/* eslint-disable */
/**
 * MLS2 API
 * Central API
 *
 * OpenAPI spec version: 0.7.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20071 } from '../models';
import { TaskTodoJsonld } from '../models';
import { TaskTodoJsonldTaskTodoItemRead } from '../models';
import { TaskTodoJsonldTaskTodoItemWrite } from '../models';
import { TaskTodoJsonldTaskTodoWrite } from '../models';
import { TaskTodoTaskTodoItemWrite } from '../models';
import { TaskTodoTaskTodoWrite } from '../models';
/**
 * TaskTodoApi - axios parameter creator
 * @export
 */
export const TaskTodoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the TaskTodo resource.
         * @summary Removes the TaskTodo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskTodoItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteTaskTodoItem.');
            }
            const localVarPath = `/mls-api/task-todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of TaskTodo resources.
         * @summary Retrieves the collection of TaskTodo resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [task] 
         * @param {Array<string>} [task] 
         * @param {string} [user] 
         * @param {Array<string>} [user] 
         * @param {string} [userOrganizations] 
         * @param {Array<string>} [userOrganizations] 
         * @param {string} [userLastname] 
         * @param {string} [taskTodoInfoStatus] 
         * @param {Array<string>} [taskTodoInfoStatus] 
         * @param {string} [taskTaskSet] 
         * @param {Array<string>} [taskTaskSet] 
         * @param {string} [taskTitle] 
         * @param {string} [taskTaskSetOrganization] 
         * @param {Array<string>} [taskTaskSetOrganization] 
         * @param {string} [assigner] 
         * @param {Array<string>} [assigner] 
         * @param {string} [projectTodo] 
         * @param {Array<string>} [projectTodo] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {string} [equipmentMaintenance] 
         * @param {Array<string>} [equipmentMaintenance] 
         * @param {string} [taskTodoInfoUpdatedAtBefore] 
         * @param {string} [taskTodoInfoUpdatedAtStrictlyBefore] 
         * @param {string} [taskTodoInfoUpdatedAtAfter] 
         * @param {string} [taskTodoInfoUpdatedAtStrictlyAfter] 
         * @param {string} [todoOrFilter] 
         * @param {string} [userNameOrFilter] 
         * @param {string} [todoGroupFilter] 
         * @param {string} [todoTodoAssignedGroupFilter] 
         * @param {boolean} [archived] 
         * @param {boolean} [showToLearners] 
         * @param {boolean} [showInStatistic] 
         * @param {boolean} [userState] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskTodoCollection: async (page?: number, itemsPerPage?: number, pagination?: boolean, task?: string, task?: Array<string>, user?: string, user?: Array<string>, userOrganizations?: string, userOrganizations?: Array<string>, userLastname?: string, taskTodoInfoStatus?: string, taskTodoInfoStatus?: Array<string>, taskTaskSet?: string, taskTaskSet?: Array<string>, taskTitle?: string, taskTaskSetOrganization?: string, taskTaskSetOrganization?: Array<string>, assigner?: string, assigner?: Array<string>, projectTodo?: string, projectTodo?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, organization?: string, organization?: Array<string>, equipmentMaintenance?: string, equipmentMaintenance?: Array<string>, taskTodoInfoUpdatedAtBefore?: string, taskTodoInfoUpdatedAtStrictlyBefore?: string, taskTodoInfoUpdatedAtAfter?: string, taskTodoInfoUpdatedAtStrictlyAfter?: string, todoOrFilter?: string, userNameOrFilter?: string, todoGroupFilter?: string, todoTodoAssignedGroupFilter?: string, archived?: boolean, showToLearners?: boolean, showInStatistic?: boolean, userState?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mls-api/task-todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (pagination !== undefined) {
                localVarQueryParameter['pagination'] = pagination;
            }

            if (task !== undefined) {
                localVarQueryParameter['task'] = task;
            }

            if (task) {
                localVarQueryParameter['task[]'] = task;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (user) {
                localVarQueryParameter['user[]'] = user;
            }

            if (userOrganizations !== undefined) {
                localVarQueryParameter['user.organizations'] = userOrganizations;
            }

            if (userOrganizations) {
                localVarQueryParameter['user.organizations[]'] = userOrganizations;
            }

            if (userLastname !== undefined) {
                localVarQueryParameter['user.lastname'] = userLastname;
            }

            if (taskTodoInfoStatus !== undefined) {
                localVarQueryParameter['taskTodoInfo.status'] = taskTodoInfoStatus;
            }

            if (taskTodoInfoStatus) {
                localVarQueryParameter['taskTodoInfo.status[]'] = taskTodoInfoStatus;
            }

            if (taskTaskSet !== undefined) {
                localVarQueryParameter['task.taskSet'] = taskTaskSet;
            }

            if (taskTaskSet) {
                localVarQueryParameter['task.taskSet[]'] = taskTaskSet;
            }

            if (taskTitle !== undefined) {
                localVarQueryParameter['task.title'] = taskTitle;
            }

            if (taskTaskSetOrganization !== undefined) {
                localVarQueryParameter['task.taskSet.organization'] = taskTaskSetOrganization;
            }

            if (taskTaskSetOrganization) {
                localVarQueryParameter['task.taskSet.organization[]'] = taskTaskSetOrganization;
            }

            if (assigner !== undefined) {
                localVarQueryParameter['assigner'] = assigner;
            }

            if (assigner) {
                localVarQueryParameter['assigner[]'] = assigner;
            }

            if (projectTodo !== undefined) {
                localVarQueryParameter['projectTodo'] = projectTodo;
            }

            if (projectTodo) {
                localVarQueryParameter['projectTodo[]'] = projectTodo;
            }

            if (mls1Id !== undefined) {
                localVarQueryParameter['mls1Id'] = mls1Id;
            }

            if (mls1Id) {
                localVarQueryParameter['mls1Id[]'] = mls1Id;
            }

            if (organization !== undefined) {
                localVarQueryParameter['organization'] = organization;
            }

            if (organization) {
                localVarQueryParameter['organization[]'] = organization;
            }

            if (equipmentMaintenance !== undefined) {
                localVarQueryParameter['equipmentMaintenance'] = equipmentMaintenance;
            }

            if (equipmentMaintenance) {
                localVarQueryParameter['equipmentMaintenance[]'] = equipmentMaintenance;
            }

            if (taskTodoInfoUpdatedAtBefore !== undefined) {
                localVarQueryParameter['taskTodoInfo.updatedAt[before]'] = taskTodoInfoUpdatedAtBefore;
            }

            if (taskTodoInfoUpdatedAtStrictlyBefore !== undefined) {
                localVarQueryParameter['taskTodoInfo.updatedAt[strictly_before]'] = taskTodoInfoUpdatedAtStrictlyBefore;
            }

            if (taskTodoInfoUpdatedAtAfter !== undefined) {
                localVarQueryParameter['taskTodoInfo.updatedAt[after]'] = taskTodoInfoUpdatedAtAfter;
            }

            if (taskTodoInfoUpdatedAtStrictlyAfter !== undefined) {
                localVarQueryParameter['taskTodoInfo.updatedAt[strictly_after]'] = taskTodoInfoUpdatedAtStrictlyAfter;
            }

            if (todoOrFilter !== undefined) {
                localVarQueryParameter['todoOrFilter'] = todoOrFilter;
            }

            if (userNameOrFilter !== undefined) {
                localVarQueryParameter['userNameOrFilter'] = userNameOrFilter;
            }

            if (todoGroupFilter !== undefined) {
                localVarQueryParameter['todoGroupFilter'] = todoGroupFilter;
            }

            if (todoTodoAssignedGroupFilter !== undefined) {
                localVarQueryParameter['todoTodoAssignedGroupFilter'] = todoTodoAssignedGroupFilter;
            }

            if (archived !== undefined) {
                localVarQueryParameter['archived'] = archived;
            }

            if (showToLearners !== undefined) {
                localVarQueryParameter['showToLearners'] = showToLearners;
            }

            if (showInStatistic !== undefined) {
                localVarQueryParameter['showInStatistic'] = showInStatistic;
            }

            if (userState !== undefined) {
                localVarQueryParameter['user.state'] = userState;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a TaskTodo resource.
         * @summary Retrieves a TaskTodo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskTodoItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTaskTodoItem.');
            }
            const localVarPath = `/mls-api/task-todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a TaskTodo resource.
         * @summary Creates a TaskTodo resource.
         * @param {TaskTodoJsonldTaskTodoWrite} body The new TaskTodo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTaskTodoCollection: async (body: TaskTodoJsonldTaskTodoWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postTaskTodoCollection.');
            }
            const localVarPath = `/mls-api/task-todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a TaskTodo resource.
         * @summary Creates a TaskTodo resource.
         * @param {TaskTodoJsonldTaskTodoWrite} body The new TaskTodo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTaskTodoCollection: async (body: TaskTodoJsonldTaskTodoWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postTaskTodoCollection.');
            }
            const localVarPath = `/mls-api/task-todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the TaskTodo resource.
         * @summary Replaces the TaskTodo resource.
         * @param {TaskTodoJsonldTaskTodoItemWrite} body The updated TaskTodo resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTaskTodoItem: async (body: TaskTodoJsonldTaskTodoItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putTaskTodoItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putTaskTodoItem.');
            }
            const localVarPath = `/mls-api/task-todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the TaskTodo resource.
         * @summary Replaces the TaskTodo resource.
         * @param {TaskTodoJsonldTaskTodoItemWrite} body The updated TaskTodo resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTaskTodoItem: async (body: TaskTodoJsonldTaskTodoItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putTaskTodoItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putTaskTodoItem.');
            }
            const localVarPath = `/mls-api/task-todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskTodoApi - functional programming interface
 * @export
 */
export const TaskTodoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes the TaskTodo resource.
         * @summary Removes the TaskTodo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskTodoItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TaskTodoApiAxiosParamCreator(configuration).deleteTaskTodoItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the collection of TaskTodo resources.
         * @summary Retrieves the collection of TaskTodo resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [task] 
         * @param {Array<string>} [task] 
         * @param {string} [user] 
         * @param {Array<string>} [user] 
         * @param {string} [userOrganizations] 
         * @param {Array<string>} [userOrganizations] 
         * @param {string} [userLastname] 
         * @param {string} [taskTodoInfoStatus] 
         * @param {Array<string>} [taskTodoInfoStatus] 
         * @param {string} [taskTaskSet] 
         * @param {Array<string>} [taskTaskSet] 
         * @param {string} [taskTitle] 
         * @param {string} [taskTaskSetOrganization] 
         * @param {Array<string>} [taskTaskSetOrganization] 
         * @param {string} [assigner] 
         * @param {Array<string>} [assigner] 
         * @param {string} [projectTodo] 
         * @param {Array<string>} [projectTodo] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {string} [equipmentMaintenance] 
         * @param {Array<string>} [equipmentMaintenance] 
         * @param {string} [taskTodoInfoUpdatedAtBefore] 
         * @param {string} [taskTodoInfoUpdatedAtStrictlyBefore] 
         * @param {string} [taskTodoInfoUpdatedAtAfter] 
         * @param {string} [taskTodoInfoUpdatedAtStrictlyAfter] 
         * @param {string} [todoOrFilter] 
         * @param {string} [userNameOrFilter] 
         * @param {string} [todoGroupFilter] 
         * @param {string} [todoTodoAssignedGroupFilter] 
         * @param {boolean} [archived] 
         * @param {boolean} [showToLearners] 
         * @param {boolean} [showInStatistic] 
         * @param {boolean} [userState] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskTodoCollection(page?: number, itemsPerPage?: number, pagination?: boolean, task?: string, task?: Array<string>, user?: string, user?: Array<string>, userOrganizations?: string, userOrganizations?: Array<string>, userLastname?: string, taskTodoInfoStatus?: string, taskTodoInfoStatus?: Array<string>, taskTaskSet?: string, taskTaskSet?: Array<string>, taskTitle?: string, taskTaskSetOrganization?: string, taskTaskSetOrganization?: Array<string>, assigner?: string, assigner?: Array<string>, projectTodo?: string, projectTodo?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, organization?: string, organization?: Array<string>, equipmentMaintenance?: string, equipmentMaintenance?: Array<string>, taskTodoInfoUpdatedAtBefore?: string, taskTodoInfoUpdatedAtStrictlyBefore?: string, taskTodoInfoUpdatedAtAfter?: string, taskTodoInfoUpdatedAtStrictlyAfter?: string, todoOrFilter?: string, userNameOrFilter?: string, todoGroupFilter?: string, todoTodoAssignedGroupFilter?: string, archived?: boolean, showToLearners?: boolean, showInStatistic?: boolean, userState?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20071>>> {
            const localVarAxiosArgs = await TaskTodoApiAxiosParamCreator(configuration).getTaskTodoCollection(page, itemsPerPage, pagination, task, task, user, user, userOrganizations, userOrganizations, userLastname, taskTodoInfoStatus, taskTodoInfoStatus, taskTaskSet, taskTaskSet, taskTitle, taskTaskSetOrganization, taskTaskSetOrganization, assigner, assigner, projectTodo, projectTodo, mls1Id, mls1Id, organization, organization, equipmentMaintenance, equipmentMaintenance, taskTodoInfoUpdatedAtBefore, taskTodoInfoUpdatedAtStrictlyBefore, taskTodoInfoUpdatedAtAfter, taskTodoInfoUpdatedAtStrictlyAfter, todoOrFilter, userNameOrFilter, todoGroupFilter, todoTodoAssignedGroupFilter, archived, showToLearners, showInStatistic, userState, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a TaskTodo resource.
         * @summary Retrieves a TaskTodo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskTodoItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaskTodoJsonldTaskTodoItemRead>>> {
            const localVarAxiosArgs = await TaskTodoApiAxiosParamCreator(configuration).getTaskTodoItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a TaskTodo resource.
         * @summary Creates a TaskTodo resource.
         * @param {TaskTodoJsonldTaskTodoWrite} body The new TaskTodo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTaskTodoCollection(body: TaskTodoJsonldTaskTodoWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaskTodoJsonld>>> {
            const localVarAxiosArgs = await TaskTodoApiAxiosParamCreator(configuration).postTaskTodoCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a TaskTodo resource.
         * @summary Creates a TaskTodo resource.
         * @param {TaskTodoJsonldTaskTodoWrite} body The new TaskTodo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTaskTodoCollection(body: TaskTodoJsonldTaskTodoWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaskTodoJsonld>>> {
            const localVarAxiosArgs = await TaskTodoApiAxiosParamCreator(configuration).postTaskTodoCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the TaskTodo resource.
         * @summary Replaces the TaskTodo resource.
         * @param {TaskTodoJsonldTaskTodoItemWrite} body The updated TaskTodo resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTaskTodoItem(body: TaskTodoJsonldTaskTodoItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaskTodoJsonld>>> {
            const localVarAxiosArgs = await TaskTodoApiAxiosParamCreator(configuration).putTaskTodoItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the TaskTodo resource.
         * @summary Replaces the TaskTodo resource.
         * @param {TaskTodoJsonldTaskTodoItemWrite} body The updated TaskTodo resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTaskTodoItem(body: TaskTodoJsonldTaskTodoItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaskTodoJsonld>>> {
            const localVarAxiosArgs = await TaskTodoApiAxiosParamCreator(configuration).putTaskTodoItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TaskTodoApi - factory interface
 * @export
 */
export const TaskTodoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes the TaskTodo resource.
         * @summary Removes the TaskTodo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskTodoItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TaskTodoApiFp(configuration).deleteTaskTodoItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of TaskTodo resources.
         * @summary Retrieves the collection of TaskTodo resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [task] 
         * @param {Array<string>} [task] 
         * @param {string} [user] 
         * @param {Array<string>} [user] 
         * @param {string} [userOrganizations] 
         * @param {Array<string>} [userOrganizations] 
         * @param {string} [userLastname] 
         * @param {string} [taskTodoInfoStatus] 
         * @param {Array<string>} [taskTodoInfoStatus] 
         * @param {string} [taskTaskSet] 
         * @param {Array<string>} [taskTaskSet] 
         * @param {string} [taskTitle] 
         * @param {string} [taskTaskSetOrganization] 
         * @param {Array<string>} [taskTaskSetOrganization] 
         * @param {string} [assigner] 
         * @param {Array<string>} [assigner] 
         * @param {string} [projectTodo] 
         * @param {Array<string>} [projectTodo] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {string} [equipmentMaintenance] 
         * @param {Array<string>} [equipmentMaintenance] 
         * @param {string} [taskTodoInfoUpdatedAtBefore] 
         * @param {string} [taskTodoInfoUpdatedAtStrictlyBefore] 
         * @param {string} [taskTodoInfoUpdatedAtAfter] 
         * @param {string} [taskTodoInfoUpdatedAtStrictlyAfter] 
         * @param {string} [todoOrFilter] 
         * @param {string} [userNameOrFilter] 
         * @param {string} [todoGroupFilter] 
         * @param {string} [todoTodoAssignedGroupFilter] 
         * @param {boolean} [archived] 
         * @param {boolean} [showToLearners] 
         * @param {boolean} [showInStatistic] 
         * @param {boolean} [userState] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskTodoCollection(page?: number, itemsPerPage?: number, pagination?: boolean, task?: string, task?: Array<string>, user?: string, user?: Array<string>, userOrganizations?: string, userOrganizations?: Array<string>, userLastname?: string, taskTodoInfoStatus?: string, taskTodoInfoStatus?: Array<string>, taskTaskSet?: string, taskTaskSet?: Array<string>, taskTitle?: string, taskTaskSetOrganization?: string, taskTaskSetOrganization?: Array<string>, assigner?: string, assigner?: Array<string>, projectTodo?: string, projectTodo?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, organization?: string, organization?: Array<string>, equipmentMaintenance?: string, equipmentMaintenance?: Array<string>, taskTodoInfoUpdatedAtBefore?: string, taskTodoInfoUpdatedAtStrictlyBefore?: string, taskTodoInfoUpdatedAtAfter?: string, taskTodoInfoUpdatedAtStrictlyAfter?: string, todoOrFilter?: string, userNameOrFilter?: string, todoGroupFilter?: string, todoTodoAssignedGroupFilter?: string, archived?: boolean, showToLearners?: boolean, showInStatistic?: boolean, userState?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20071>> {
            return TaskTodoApiFp(configuration).getTaskTodoCollection(page, itemsPerPage, pagination, task, task, user, user, userOrganizations, userOrganizations, userLastname, taskTodoInfoStatus, taskTodoInfoStatus, taskTaskSet, taskTaskSet, taskTitle, taskTaskSetOrganization, taskTaskSetOrganization, assigner, assigner, projectTodo, projectTodo, mls1Id, mls1Id, organization, organization, equipmentMaintenance, equipmentMaintenance, taskTodoInfoUpdatedAtBefore, taskTodoInfoUpdatedAtStrictlyBefore, taskTodoInfoUpdatedAtAfter, taskTodoInfoUpdatedAtStrictlyAfter, todoOrFilter, userNameOrFilter, todoGroupFilter, todoTodoAssignedGroupFilter, archived, showToLearners, showInStatistic, userState, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a TaskTodo resource.
         * @summary Retrieves a TaskTodo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskTodoItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TaskTodoJsonldTaskTodoItemRead>> {
            return TaskTodoApiFp(configuration).getTaskTodoItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a TaskTodo resource.
         * @summary Creates a TaskTodo resource.
         * @param {TaskTodoJsonldTaskTodoWrite} body The new TaskTodo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTaskTodoCollection(body: TaskTodoJsonldTaskTodoWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<TaskTodoJsonld>> {
            return TaskTodoApiFp(configuration).postTaskTodoCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a TaskTodo resource.
         * @summary Creates a TaskTodo resource.
         * @param {TaskTodoJsonldTaskTodoWrite} body The new TaskTodo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTaskTodoCollection(body: TaskTodoJsonldTaskTodoWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<TaskTodoJsonld>> {
            return TaskTodoApiFp(configuration).postTaskTodoCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the TaskTodo resource.
         * @summary Replaces the TaskTodo resource.
         * @param {TaskTodoJsonldTaskTodoItemWrite} body The updated TaskTodo resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTaskTodoItem(body: TaskTodoJsonldTaskTodoItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TaskTodoJsonld>> {
            return TaskTodoApiFp(configuration).putTaskTodoItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the TaskTodo resource.
         * @summary Replaces the TaskTodo resource.
         * @param {TaskTodoJsonldTaskTodoItemWrite} body The updated TaskTodo resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTaskTodoItem(body: TaskTodoJsonldTaskTodoItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TaskTodoJsonld>> {
            return TaskTodoApiFp(configuration).putTaskTodoItem(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskTodoApi - object-oriented interface
 * @export
 * @class TaskTodoApi
 * @extends {BaseAPI}
 */
export class TaskTodoApi extends BaseAPI {
    /**
     * Removes the TaskTodo resource.
     * @summary Removes the TaskTodo resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskTodoApi
     */
    public async deleteTaskTodoItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TaskTodoApiFp(this.configuration).deleteTaskTodoItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the collection of TaskTodo resources.
     * @summary Retrieves the collection of TaskTodo resources.
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {boolean} [pagination] Enable or disable pagination
     * @param {string} [task] 
     * @param {Array<string>} [task] 
     * @param {string} [user] 
     * @param {Array<string>} [user] 
     * @param {string} [userOrganizations] 
     * @param {Array<string>} [userOrganizations] 
     * @param {string} [userLastname] 
     * @param {string} [taskTodoInfoStatus] 
     * @param {Array<string>} [taskTodoInfoStatus] 
     * @param {string} [taskTaskSet] 
     * @param {Array<string>} [taskTaskSet] 
     * @param {string} [taskTitle] 
     * @param {string} [taskTaskSetOrganization] 
     * @param {Array<string>} [taskTaskSetOrganization] 
     * @param {string} [assigner] 
     * @param {Array<string>} [assigner] 
     * @param {string} [projectTodo] 
     * @param {Array<string>} [projectTodo] 
     * @param {number} [mls1Id] 
     * @param {Array<number>} [mls1Id] 
     * @param {string} [organization] 
     * @param {Array<string>} [organization] 
     * @param {string} [equipmentMaintenance] 
     * @param {Array<string>} [equipmentMaintenance] 
     * @param {string} [taskTodoInfoUpdatedAtBefore] 
     * @param {string} [taskTodoInfoUpdatedAtStrictlyBefore] 
     * @param {string} [taskTodoInfoUpdatedAtAfter] 
     * @param {string} [taskTodoInfoUpdatedAtStrictlyAfter] 
     * @param {string} [todoOrFilter] 
     * @param {string} [userNameOrFilter] 
     * @param {string} [todoGroupFilter] 
     * @param {string} [todoTodoAssignedGroupFilter] 
     * @param {boolean} [archived] 
     * @param {boolean} [showToLearners] 
     * @param {boolean} [showInStatistic] 
     * @param {boolean} [userState] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskTodoApi
     */
    public async getTaskTodoCollection(page?: number, itemsPerPage?: number, pagination?: boolean, task?: string, task?: Array<string>, user?: string, user?: Array<string>, userOrganizations?: string, userOrganizations?: Array<string>, userLastname?: string, taskTodoInfoStatus?: string, taskTodoInfoStatus?: Array<string>, taskTaskSet?: string, taskTaskSet?: Array<string>, taskTitle?: string, taskTaskSetOrganization?: string, taskTaskSetOrganization?: Array<string>, assigner?: string, assigner?: Array<string>, projectTodo?: string, projectTodo?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, organization?: string, organization?: Array<string>, equipmentMaintenance?: string, equipmentMaintenance?: Array<string>, taskTodoInfoUpdatedAtBefore?: string, taskTodoInfoUpdatedAtStrictlyBefore?: string, taskTodoInfoUpdatedAtAfter?: string, taskTodoInfoUpdatedAtStrictlyAfter?: string, todoOrFilter?: string, userNameOrFilter?: string, todoGroupFilter?: string, todoTodoAssignedGroupFilter?: string, archived?: boolean, showToLearners?: boolean, showInStatistic?: boolean, userState?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20071>> {
        return TaskTodoApiFp(this.configuration).getTaskTodoCollection(page, itemsPerPage, pagination, task, task, user, user, userOrganizations, userOrganizations, userLastname, taskTodoInfoStatus, taskTodoInfoStatus, taskTaskSet, taskTaskSet, taskTitle, taskTaskSetOrganization, taskTaskSetOrganization, assigner, assigner, projectTodo, projectTodo, mls1Id, mls1Id, organization, organization, equipmentMaintenance, equipmentMaintenance, taskTodoInfoUpdatedAtBefore, taskTodoInfoUpdatedAtStrictlyBefore, taskTodoInfoUpdatedAtAfter, taskTodoInfoUpdatedAtStrictlyAfter, todoOrFilter, userNameOrFilter, todoGroupFilter, todoTodoAssignedGroupFilter, archived, showToLearners, showInStatistic, userState, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a TaskTodo resource.
     * @summary Retrieves a TaskTodo resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskTodoApi
     */
    public async getTaskTodoItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TaskTodoJsonldTaskTodoItemRead>> {
        return TaskTodoApiFp(this.configuration).getTaskTodoItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a TaskTodo resource.
     * @summary Creates a TaskTodo resource.
     * @param {TaskTodoJsonldTaskTodoWrite} body The new TaskTodo resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskTodoApi
     */
    public async postTaskTodoCollection(body: TaskTodoJsonldTaskTodoWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<TaskTodoJsonld>> {
        return TaskTodoApiFp(this.configuration).postTaskTodoCollection(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a TaskTodo resource.
     * @summary Creates a TaskTodo resource.
     * @param {TaskTodoJsonldTaskTodoWrite} body The new TaskTodo resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskTodoApi
     */
    public async postTaskTodoCollection(body: TaskTodoJsonldTaskTodoWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<TaskTodoJsonld>> {
        return TaskTodoApiFp(this.configuration).postTaskTodoCollection(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the TaskTodo resource.
     * @summary Replaces the TaskTodo resource.
     * @param {TaskTodoJsonldTaskTodoItemWrite} body The updated TaskTodo resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskTodoApi
     */
    public async putTaskTodoItem(body: TaskTodoJsonldTaskTodoItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TaskTodoJsonld>> {
        return TaskTodoApiFp(this.configuration).putTaskTodoItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the TaskTodo resource.
     * @summary Replaces the TaskTodo resource.
     * @param {TaskTodoJsonldTaskTodoItemWrite} body The updated TaskTodo resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskTodoApi
     */
    public async putTaskTodoItem(body: TaskTodoJsonldTaskTodoItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TaskTodoJsonld>> {
        return TaskTodoApiFp(this.configuration).putTaskTodoItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
