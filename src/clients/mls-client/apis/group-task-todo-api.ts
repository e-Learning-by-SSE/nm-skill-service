/* tslint:disable */
/* eslint-disable */
/**
 * MLS2 API
 * Central API
 *
 * OpenAPI spec version: 0.7.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GroupTaskTodoGroupTaskTodoItemWrite } from '../models';
import { GroupTaskTodoGroupTaskTodoWrite } from '../models';
import { GroupTaskTodoJsonld } from '../models';
import { GroupTaskTodoJsonldGroupTaskTodoItemRead } from '../models';
import { GroupTaskTodoJsonldGroupTaskTodoItemWrite } from '../models';
import { GroupTaskTodoJsonldGroupTaskTodoWrite } from '../models';
import { InlineResponse20035 } from '../models';
/**
 * GroupTaskTodoApi - axios parameter creator
 * @export
 */
export const GroupTaskTodoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the GroupTaskTodo resource.
         * @summary Removes the GroupTaskTodo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupTaskTodoItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteGroupTaskTodoItem.');
            }
            const localVarPath = `/mls-api/group-task-todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of GroupTaskTodo resources.
         * @summary Retrieves the collection of GroupTaskTodo resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [task] 
         * @param {Array<string>} [task] 
         * @param {string} [status] 
         * @param {Array<string>} [status] 
         * @param {string} [taskTaskSetOrganization] 
         * @param {Array<string>} [taskTaskSetOrganization] 
         * @param {string} [taskTitle] 
         * @param {string} [assigner] 
         * @param {Array<string>} [assigner] 
         * @param {string} [groupTaskTodoLinks] 
         * @param {Array<string>} [groupTaskTodoLinks] 
         * @param {string} [groupTaskTodoLinksUser] 
         * @param {Array<string>} [groupTaskTodoLinksUser] 
         * @param {string} [updatedAtBefore] 
         * @param {string} [updatedAtStrictlyBefore] 
         * @param {string} [updatedAtAfter] 
         * @param {string} [updatedAtStrictlyAfter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupTaskTodoCollection: async (page?: number, itemsPerPage?: number, pagination?: boolean, task?: string, task?: Array<string>, status?: string, status?: Array<string>, taskTaskSetOrganization?: string, taskTaskSetOrganization?: Array<string>, taskTitle?: string, assigner?: string, assigner?: Array<string>, groupTaskTodoLinks?: string, groupTaskTodoLinks?: Array<string>, groupTaskTodoLinksUser?: string, groupTaskTodoLinksUser?: Array<string>, updatedAtBefore?: string, updatedAtStrictlyBefore?: string, updatedAtAfter?: string, updatedAtStrictlyAfter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mls-api/group-task-todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (pagination !== undefined) {
                localVarQueryParameter['pagination'] = pagination;
            }

            if (task !== undefined) {
                localVarQueryParameter['task'] = task;
            }

            if (task) {
                localVarQueryParameter['task[]'] = task;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (status) {
                localVarQueryParameter['status[]'] = status;
            }

            if (taskTaskSetOrganization !== undefined) {
                localVarQueryParameter['task.taskSet.organization'] = taskTaskSetOrganization;
            }

            if (taskTaskSetOrganization) {
                localVarQueryParameter['task.taskSet.organization[]'] = taskTaskSetOrganization;
            }

            if (taskTitle !== undefined) {
                localVarQueryParameter['task.title'] = taskTitle;
            }

            if (assigner !== undefined) {
                localVarQueryParameter['assigner'] = assigner;
            }

            if (assigner) {
                localVarQueryParameter['assigner[]'] = assigner;
            }

            if (groupTaskTodoLinks !== undefined) {
                localVarQueryParameter['groupTaskTodoLinks'] = groupTaskTodoLinks;
            }

            if (groupTaskTodoLinks) {
                localVarQueryParameter['groupTaskTodoLinks[]'] = groupTaskTodoLinks;
            }

            if (groupTaskTodoLinksUser !== undefined) {
                localVarQueryParameter['groupTaskTodoLinks.user'] = groupTaskTodoLinksUser;
            }

            if (groupTaskTodoLinksUser) {
                localVarQueryParameter['groupTaskTodoLinks.user[]'] = groupTaskTodoLinksUser;
            }

            if (updatedAtBefore !== undefined) {
                localVarQueryParameter['updatedAt[before]'] = updatedAtBefore;
            }

            if (updatedAtStrictlyBefore !== undefined) {
                localVarQueryParameter['updatedAt[strictly_before]'] = updatedAtStrictlyBefore;
            }

            if (updatedAtAfter !== undefined) {
                localVarQueryParameter['updatedAt[after]'] = updatedAtAfter;
            }

            if (updatedAtStrictlyAfter !== undefined) {
                localVarQueryParameter['updatedAt[strictly_after]'] = updatedAtStrictlyAfter;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a GroupTaskTodo resource.
         * @summary Retrieves a GroupTaskTodo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupTaskTodoItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGroupTaskTodoItem.');
            }
            const localVarPath = `/mls-api/group-task-todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a GroupTaskTodo resource.
         * @summary Creates a GroupTaskTodo resource.
         * @param {GroupTaskTodoJsonldGroupTaskTodoWrite} body The new GroupTaskTodo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGroupTaskTodoCollection: async (body: GroupTaskTodoJsonldGroupTaskTodoWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postGroupTaskTodoCollection.');
            }
            const localVarPath = `/mls-api/group-task-todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a GroupTaskTodo resource.
         * @summary Creates a GroupTaskTodo resource.
         * @param {GroupTaskTodoJsonldGroupTaskTodoWrite} body The new GroupTaskTodo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGroupTaskTodoCollection: async (body: GroupTaskTodoJsonldGroupTaskTodoWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postGroupTaskTodoCollection.');
            }
            const localVarPath = `/mls-api/group-task-todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the GroupTaskTodo resource.
         * @summary Replaces the GroupTaskTodo resource.
         * @param {GroupTaskTodoJsonldGroupTaskTodoItemWrite} body The updated GroupTaskTodo resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGroupTaskTodoItem: async (body: GroupTaskTodoJsonldGroupTaskTodoItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putGroupTaskTodoItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putGroupTaskTodoItem.');
            }
            const localVarPath = `/mls-api/group-task-todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the GroupTaskTodo resource.
         * @summary Replaces the GroupTaskTodo resource.
         * @param {GroupTaskTodoJsonldGroupTaskTodoItemWrite} body The updated GroupTaskTodo resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGroupTaskTodoItem: async (body: GroupTaskTodoJsonldGroupTaskTodoItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putGroupTaskTodoItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putGroupTaskTodoItem.');
            }
            const localVarPath = `/mls-api/group-task-todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupTaskTodoApi - functional programming interface
 * @export
 */
export const GroupTaskTodoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes the GroupTaskTodo resource.
         * @summary Removes the GroupTaskTodo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupTaskTodoItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GroupTaskTodoApiAxiosParamCreator(configuration).deleteGroupTaskTodoItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the collection of GroupTaskTodo resources.
         * @summary Retrieves the collection of GroupTaskTodo resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [task] 
         * @param {Array<string>} [task] 
         * @param {string} [status] 
         * @param {Array<string>} [status] 
         * @param {string} [taskTaskSetOrganization] 
         * @param {Array<string>} [taskTaskSetOrganization] 
         * @param {string} [taskTitle] 
         * @param {string} [assigner] 
         * @param {Array<string>} [assigner] 
         * @param {string} [groupTaskTodoLinks] 
         * @param {Array<string>} [groupTaskTodoLinks] 
         * @param {string} [groupTaskTodoLinksUser] 
         * @param {Array<string>} [groupTaskTodoLinksUser] 
         * @param {string} [updatedAtBefore] 
         * @param {string} [updatedAtStrictlyBefore] 
         * @param {string} [updatedAtAfter] 
         * @param {string} [updatedAtStrictlyAfter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupTaskTodoCollection(page?: number, itemsPerPage?: number, pagination?: boolean, task?: string, task?: Array<string>, status?: string, status?: Array<string>, taskTaskSetOrganization?: string, taskTaskSetOrganization?: Array<string>, taskTitle?: string, assigner?: string, assigner?: Array<string>, groupTaskTodoLinks?: string, groupTaskTodoLinks?: Array<string>, groupTaskTodoLinksUser?: string, groupTaskTodoLinksUser?: Array<string>, updatedAtBefore?: string, updatedAtStrictlyBefore?: string, updatedAtAfter?: string, updatedAtStrictlyAfter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20035>>> {
            const localVarAxiosArgs = await GroupTaskTodoApiAxiosParamCreator(configuration).getGroupTaskTodoCollection(page, itemsPerPage, pagination, task, task, status, status, taskTaskSetOrganization, taskTaskSetOrganization, taskTitle, assigner, assigner, groupTaskTodoLinks, groupTaskTodoLinks, groupTaskTodoLinksUser, groupTaskTodoLinksUser, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a GroupTaskTodo resource.
         * @summary Retrieves a GroupTaskTodo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupTaskTodoItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupTaskTodoJsonldGroupTaskTodoItemRead>>> {
            const localVarAxiosArgs = await GroupTaskTodoApiAxiosParamCreator(configuration).getGroupTaskTodoItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a GroupTaskTodo resource.
         * @summary Creates a GroupTaskTodo resource.
         * @param {GroupTaskTodoJsonldGroupTaskTodoWrite} body The new GroupTaskTodo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGroupTaskTodoCollection(body: GroupTaskTodoJsonldGroupTaskTodoWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupTaskTodoJsonld>>> {
            const localVarAxiosArgs = await GroupTaskTodoApiAxiosParamCreator(configuration).postGroupTaskTodoCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a GroupTaskTodo resource.
         * @summary Creates a GroupTaskTodo resource.
         * @param {GroupTaskTodoJsonldGroupTaskTodoWrite} body The new GroupTaskTodo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGroupTaskTodoCollection(body: GroupTaskTodoJsonldGroupTaskTodoWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupTaskTodoJsonld>>> {
            const localVarAxiosArgs = await GroupTaskTodoApiAxiosParamCreator(configuration).postGroupTaskTodoCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the GroupTaskTodo resource.
         * @summary Replaces the GroupTaskTodo resource.
         * @param {GroupTaskTodoJsonldGroupTaskTodoItemWrite} body The updated GroupTaskTodo resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGroupTaskTodoItem(body: GroupTaskTodoJsonldGroupTaskTodoItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupTaskTodoJsonld>>> {
            const localVarAxiosArgs = await GroupTaskTodoApiAxiosParamCreator(configuration).putGroupTaskTodoItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the GroupTaskTodo resource.
         * @summary Replaces the GroupTaskTodo resource.
         * @param {GroupTaskTodoJsonldGroupTaskTodoItemWrite} body The updated GroupTaskTodo resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGroupTaskTodoItem(body: GroupTaskTodoJsonldGroupTaskTodoItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupTaskTodoJsonld>>> {
            const localVarAxiosArgs = await GroupTaskTodoApiAxiosParamCreator(configuration).putGroupTaskTodoItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GroupTaskTodoApi - factory interface
 * @export
 */
export const GroupTaskTodoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes the GroupTaskTodo resource.
         * @summary Removes the GroupTaskTodo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupTaskTodoItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GroupTaskTodoApiFp(configuration).deleteGroupTaskTodoItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of GroupTaskTodo resources.
         * @summary Retrieves the collection of GroupTaskTodo resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [task] 
         * @param {Array<string>} [task] 
         * @param {string} [status] 
         * @param {Array<string>} [status] 
         * @param {string} [taskTaskSetOrganization] 
         * @param {Array<string>} [taskTaskSetOrganization] 
         * @param {string} [taskTitle] 
         * @param {string} [assigner] 
         * @param {Array<string>} [assigner] 
         * @param {string} [groupTaskTodoLinks] 
         * @param {Array<string>} [groupTaskTodoLinks] 
         * @param {string} [groupTaskTodoLinksUser] 
         * @param {Array<string>} [groupTaskTodoLinksUser] 
         * @param {string} [updatedAtBefore] 
         * @param {string} [updatedAtStrictlyBefore] 
         * @param {string} [updatedAtAfter] 
         * @param {string} [updatedAtStrictlyAfter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupTaskTodoCollection(page?: number, itemsPerPage?: number, pagination?: boolean, task?: string, task?: Array<string>, status?: string, status?: Array<string>, taskTaskSetOrganization?: string, taskTaskSetOrganization?: Array<string>, taskTitle?: string, assigner?: string, assigner?: Array<string>, groupTaskTodoLinks?: string, groupTaskTodoLinks?: Array<string>, groupTaskTodoLinksUser?: string, groupTaskTodoLinksUser?: Array<string>, updatedAtBefore?: string, updatedAtStrictlyBefore?: string, updatedAtAfter?: string, updatedAtStrictlyAfter?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20035>> {
            return GroupTaskTodoApiFp(configuration).getGroupTaskTodoCollection(page, itemsPerPage, pagination, task, task, status, status, taskTaskSetOrganization, taskTaskSetOrganization, taskTitle, assigner, assigner, groupTaskTodoLinks, groupTaskTodoLinks, groupTaskTodoLinksUser, groupTaskTodoLinksUser, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a GroupTaskTodo resource.
         * @summary Retrieves a GroupTaskTodo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupTaskTodoItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupTaskTodoJsonldGroupTaskTodoItemRead>> {
            return GroupTaskTodoApiFp(configuration).getGroupTaskTodoItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a GroupTaskTodo resource.
         * @summary Creates a GroupTaskTodo resource.
         * @param {GroupTaskTodoJsonldGroupTaskTodoWrite} body The new GroupTaskTodo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGroupTaskTodoCollection(body: GroupTaskTodoJsonldGroupTaskTodoWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupTaskTodoJsonld>> {
            return GroupTaskTodoApiFp(configuration).postGroupTaskTodoCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a GroupTaskTodo resource.
         * @summary Creates a GroupTaskTodo resource.
         * @param {GroupTaskTodoJsonldGroupTaskTodoWrite} body The new GroupTaskTodo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGroupTaskTodoCollection(body: GroupTaskTodoJsonldGroupTaskTodoWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupTaskTodoJsonld>> {
            return GroupTaskTodoApiFp(configuration).postGroupTaskTodoCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the GroupTaskTodo resource.
         * @summary Replaces the GroupTaskTodo resource.
         * @param {GroupTaskTodoJsonldGroupTaskTodoItemWrite} body The updated GroupTaskTodo resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGroupTaskTodoItem(body: GroupTaskTodoJsonldGroupTaskTodoItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupTaskTodoJsonld>> {
            return GroupTaskTodoApiFp(configuration).putGroupTaskTodoItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the GroupTaskTodo resource.
         * @summary Replaces the GroupTaskTodo resource.
         * @param {GroupTaskTodoJsonldGroupTaskTodoItemWrite} body The updated GroupTaskTodo resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGroupTaskTodoItem(body: GroupTaskTodoJsonldGroupTaskTodoItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupTaskTodoJsonld>> {
            return GroupTaskTodoApiFp(configuration).putGroupTaskTodoItem(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupTaskTodoApi - object-oriented interface
 * @export
 * @class GroupTaskTodoApi
 * @extends {BaseAPI}
 */
export class GroupTaskTodoApi extends BaseAPI {
    /**
     * Removes the GroupTaskTodo resource.
     * @summary Removes the GroupTaskTodo resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupTaskTodoApi
     */
    public async deleteGroupTaskTodoItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GroupTaskTodoApiFp(this.configuration).deleteGroupTaskTodoItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the collection of GroupTaskTodo resources.
     * @summary Retrieves the collection of GroupTaskTodo resources.
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {boolean} [pagination] Enable or disable pagination
     * @param {string} [task] 
     * @param {Array<string>} [task] 
     * @param {string} [status] 
     * @param {Array<string>} [status] 
     * @param {string} [taskTaskSetOrganization] 
     * @param {Array<string>} [taskTaskSetOrganization] 
     * @param {string} [taskTitle] 
     * @param {string} [assigner] 
     * @param {Array<string>} [assigner] 
     * @param {string} [groupTaskTodoLinks] 
     * @param {Array<string>} [groupTaskTodoLinks] 
     * @param {string} [groupTaskTodoLinksUser] 
     * @param {Array<string>} [groupTaskTodoLinksUser] 
     * @param {string} [updatedAtBefore] 
     * @param {string} [updatedAtStrictlyBefore] 
     * @param {string} [updatedAtAfter] 
     * @param {string} [updatedAtStrictlyAfter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupTaskTodoApi
     */
    public async getGroupTaskTodoCollection(page?: number, itemsPerPage?: number, pagination?: boolean, task?: string, task?: Array<string>, status?: string, status?: Array<string>, taskTaskSetOrganization?: string, taskTaskSetOrganization?: Array<string>, taskTitle?: string, assigner?: string, assigner?: Array<string>, groupTaskTodoLinks?: string, groupTaskTodoLinks?: Array<string>, groupTaskTodoLinksUser?: string, groupTaskTodoLinksUser?: Array<string>, updatedAtBefore?: string, updatedAtStrictlyBefore?: string, updatedAtAfter?: string, updatedAtStrictlyAfter?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20035>> {
        return GroupTaskTodoApiFp(this.configuration).getGroupTaskTodoCollection(page, itemsPerPage, pagination, task, task, status, status, taskTaskSetOrganization, taskTaskSetOrganization, taskTitle, assigner, assigner, groupTaskTodoLinks, groupTaskTodoLinks, groupTaskTodoLinksUser, groupTaskTodoLinksUser, updatedAtBefore, updatedAtStrictlyBefore, updatedAtAfter, updatedAtStrictlyAfter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a GroupTaskTodo resource.
     * @summary Retrieves a GroupTaskTodo resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupTaskTodoApi
     */
    public async getGroupTaskTodoItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupTaskTodoJsonldGroupTaskTodoItemRead>> {
        return GroupTaskTodoApiFp(this.configuration).getGroupTaskTodoItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a GroupTaskTodo resource.
     * @summary Creates a GroupTaskTodo resource.
     * @param {GroupTaskTodoJsonldGroupTaskTodoWrite} body The new GroupTaskTodo resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupTaskTodoApi
     */
    public async postGroupTaskTodoCollection(body: GroupTaskTodoJsonldGroupTaskTodoWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupTaskTodoJsonld>> {
        return GroupTaskTodoApiFp(this.configuration).postGroupTaskTodoCollection(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a GroupTaskTodo resource.
     * @summary Creates a GroupTaskTodo resource.
     * @param {GroupTaskTodoJsonldGroupTaskTodoWrite} body The new GroupTaskTodo resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupTaskTodoApi
     */
    public async postGroupTaskTodoCollection(body: GroupTaskTodoJsonldGroupTaskTodoWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupTaskTodoJsonld>> {
        return GroupTaskTodoApiFp(this.configuration).postGroupTaskTodoCollection(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the GroupTaskTodo resource.
     * @summary Replaces the GroupTaskTodo resource.
     * @param {GroupTaskTodoJsonldGroupTaskTodoItemWrite} body The updated GroupTaskTodo resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupTaskTodoApi
     */
    public async putGroupTaskTodoItem(body: GroupTaskTodoJsonldGroupTaskTodoItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupTaskTodoJsonld>> {
        return GroupTaskTodoApiFp(this.configuration).putGroupTaskTodoItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the GroupTaskTodo resource.
     * @summary Replaces the GroupTaskTodo resource.
     * @param {GroupTaskTodoJsonldGroupTaskTodoItemWrite} body The updated GroupTaskTodo resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupTaskTodoApi
     */
    public async putGroupTaskTodoItem(body: GroupTaskTodoJsonldGroupTaskTodoItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupTaskTodoJsonld>> {
        return GroupTaskTodoApiFp(this.configuration).putGroupTaskTodoItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
