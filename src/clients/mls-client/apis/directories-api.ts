/* tslint:disable */
/* eslint-disable */
/**
 * MLS2 API
 * Central API
 *
 * OpenAPI spec version: 0.7.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Directories } from '../models';
import { DirectoriesDirectoryItemWrite } from '../models';
import { DirectoriesJsonld } from '../models';
import { DirectoriesJsonldDirectoryItemRead } from '../models';
import { DirectoriesJsonldDirectoryItemWrite } from '../models';
import { DirectoriesJsonldDirectoryWrite } from '../models';
import { InlineResponse2008 } from '../models';
/**
 * DirectoriesApi - axios parameter creator
 * @export
 */
export const DirectoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Directories resource.
         * @summary Removes the Directories resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDirectoriesItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteDirectoriesItem.');
            }
            const localVarPath = `/mls-api/directories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Directories resources.
         * @summary Retrieves the collection of Directories resources.
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {string} [parent] 
         * @param {Array<string>} [parent] 
         * @param {string} [owner] 
         * @param {Array<string>} [owner] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {string} [externalContents] 
         * @param {Array<string>} [externalContents] 
         * @param {string} [externalContentOrganizationsOfDirectoriesForAll] 
         * @param {Array<string>} [externalContentOrganizationsOfDirectoriesForAll] 
         * @param {string} [externalContentOrganizationsOfDirectoriesForApprentice] 
         * @param {Array<string>} [externalContentOrganizationsOfDirectoriesForApprentice] 
         * @param {string} [externalContentOrganizationsOfDirectoriesForInstructor] 
         * @param {Array<string>} [externalContentOrganizationsOfDirectoriesForInstructor] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [name] 
         * @param {string} [directoryGroupsOrUserFilter] 
         * @param {boolean} [isCommon] 
         * @param {boolean} [isGroup] 
         * @param {boolean} [isRestricted] 
         * @param {boolean} [existsParent] 
         * @param {boolean} [existsOrganization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectoriesCollection: async (pagination?: boolean, id?: number, id?: Array<number>, parent?: string, parent?: Array<string>, owner?: string, owner?: Array<string>, organization?: string, organization?: Array<string>, externalContents?: string, externalContents?: Array<string>, externalContentOrganizationsOfDirectoriesForAll?: string, externalContentOrganizationsOfDirectoriesForAll?: Array<string>, externalContentOrganizationsOfDirectoriesForApprentice?: string, externalContentOrganizationsOfDirectoriesForApprentice?: Array<string>, externalContentOrganizationsOfDirectoriesForInstructor?: string, externalContentOrganizationsOfDirectoriesForInstructor?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, name?: string, directoryGroupsOrUserFilter?: string, isCommon?: boolean, isGroup?: boolean, isRestricted?: boolean, existsParent?: boolean, existsOrganization?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mls-api/directories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagination !== undefined) {
                localVarQueryParameter['pagination'] = pagination;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (parent) {
                localVarQueryParameter['parent[]'] = parent;
            }

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (owner) {
                localVarQueryParameter['owner[]'] = owner;
            }

            if (organization !== undefined) {
                localVarQueryParameter['organization'] = organization;
            }

            if (organization) {
                localVarQueryParameter['organization[]'] = organization;
            }

            if (externalContents !== undefined) {
                localVarQueryParameter['externalContents'] = externalContents;
            }

            if (externalContents) {
                localVarQueryParameter['externalContents[]'] = externalContents;
            }

            if (externalContentOrganizationsOfDirectoriesForAll !== undefined) {
                localVarQueryParameter['externalContentOrganizationsOfDirectoriesForAll'] = externalContentOrganizationsOfDirectoriesForAll;
            }

            if (externalContentOrganizationsOfDirectoriesForAll) {
                localVarQueryParameter['externalContentOrganizationsOfDirectoriesForAll[]'] = externalContentOrganizationsOfDirectoriesForAll;
            }

            if (externalContentOrganizationsOfDirectoriesForApprentice !== undefined) {
                localVarQueryParameter['externalContentOrganizationsOfDirectoriesForApprentice'] = externalContentOrganizationsOfDirectoriesForApprentice;
            }

            if (externalContentOrganizationsOfDirectoriesForApprentice) {
                localVarQueryParameter['externalContentOrganizationsOfDirectoriesForApprentice[]'] = externalContentOrganizationsOfDirectoriesForApprentice;
            }

            if (externalContentOrganizationsOfDirectoriesForInstructor !== undefined) {
                localVarQueryParameter['externalContentOrganizationsOfDirectoriesForInstructor'] = externalContentOrganizationsOfDirectoriesForInstructor;
            }

            if (externalContentOrganizationsOfDirectoriesForInstructor) {
                localVarQueryParameter['externalContentOrganizationsOfDirectoriesForInstructor[]'] = externalContentOrganizationsOfDirectoriesForInstructor;
            }

            if (mls1Id !== undefined) {
                localVarQueryParameter['mls1Id'] = mls1Id;
            }

            if (mls1Id) {
                localVarQueryParameter['mls1Id[]'] = mls1Id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (directoryGroupsOrUserFilter !== undefined) {
                localVarQueryParameter['directoryGroupsOrUserFilter'] = directoryGroupsOrUserFilter;
            }

            if (isCommon !== undefined) {
                localVarQueryParameter['isCommon'] = isCommon;
            }

            if (isGroup !== undefined) {
                localVarQueryParameter['isGroup'] = isGroup;
            }

            if (isRestricted !== undefined) {
                localVarQueryParameter['isRestricted'] = isRestricted;
            }

            if (existsParent !== undefined) {
                localVarQueryParameter['exists[parent]'] = existsParent;
            }

            if (existsOrganization !== undefined) {
                localVarQueryParameter['exists[organization]'] = existsOrganization;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Directories resource.
         * @summary Retrieves a Directories resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectoriesItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDirectoriesItem.');
            }
            const localVarPath = `/mls-api/directories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Directories resource.
         * @summary Creates a Directories resource.
         * @param {DirectoriesJsonld} body The new Directories resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDirectoriesCollection: async (body: DirectoriesJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postDirectoriesCollection.');
            }
            const localVarPath = `/mls-api/directories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Directories resource.
         * @summary Creates a Directories resource.
         * @param {DirectoriesJsonld} body The new Directories resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDirectoriesCollection: async (body: DirectoriesJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postDirectoriesCollection.');
            }
            const localVarPath = `/mls-api/directories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Directories resource.
         * @summary Replaces the Directories resource.
         * @param {DirectoriesJsonldDirectoryItemWrite} body The updated Directories resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDirectoriesItem: async (body: DirectoriesJsonldDirectoryItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putDirectoriesItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putDirectoriesItem.');
            }
            const localVarPath = `/mls-api/directories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Directories resource.
         * @summary Replaces the Directories resource.
         * @param {DirectoriesJsonldDirectoryItemWrite} body The updated Directories resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDirectoriesItem: async (body: DirectoriesJsonldDirectoryItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putDirectoriesItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putDirectoriesItem.');
            }
            const localVarPath = `/mls-api/directories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DirectoriesApi - functional programming interface
 * @export
 */
export const DirectoriesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes the Directories resource.
         * @summary Removes the Directories resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDirectoriesItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DirectoriesApiAxiosParamCreator(configuration).deleteDirectoriesItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the collection of Directories resources.
         * @summary Retrieves the collection of Directories resources.
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {string} [parent] 
         * @param {Array<string>} [parent] 
         * @param {string} [owner] 
         * @param {Array<string>} [owner] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {string} [externalContents] 
         * @param {Array<string>} [externalContents] 
         * @param {string} [externalContentOrganizationsOfDirectoriesForAll] 
         * @param {Array<string>} [externalContentOrganizationsOfDirectoriesForAll] 
         * @param {string} [externalContentOrganizationsOfDirectoriesForApprentice] 
         * @param {Array<string>} [externalContentOrganizationsOfDirectoriesForApprentice] 
         * @param {string} [externalContentOrganizationsOfDirectoriesForInstructor] 
         * @param {Array<string>} [externalContentOrganizationsOfDirectoriesForInstructor] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [name] 
         * @param {string} [directoryGroupsOrUserFilter] 
         * @param {boolean} [isCommon] 
         * @param {boolean} [isGroup] 
         * @param {boolean} [isRestricted] 
         * @param {boolean} [existsParent] 
         * @param {boolean} [existsOrganization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDirectoriesCollection(pagination?: boolean, id?: number, id?: Array<number>, parent?: string, parent?: Array<string>, owner?: string, owner?: Array<string>, organization?: string, organization?: Array<string>, externalContents?: string, externalContents?: Array<string>, externalContentOrganizationsOfDirectoriesForAll?: string, externalContentOrganizationsOfDirectoriesForAll?: Array<string>, externalContentOrganizationsOfDirectoriesForApprentice?: string, externalContentOrganizationsOfDirectoriesForApprentice?: Array<string>, externalContentOrganizationsOfDirectoriesForInstructor?: string, externalContentOrganizationsOfDirectoriesForInstructor?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, name?: string, directoryGroupsOrUserFilter?: string, isCommon?: boolean, isGroup?: boolean, isRestricted?: boolean, existsParent?: boolean, existsOrganization?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2008>>> {
            const localVarAxiosArgs = await DirectoriesApiAxiosParamCreator(configuration).getDirectoriesCollection(pagination, id, id, parent, parent, owner, owner, organization, organization, externalContents, externalContents, externalContentOrganizationsOfDirectoriesForAll, externalContentOrganizationsOfDirectoriesForAll, externalContentOrganizationsOfDirectoriesForApprentice, externalContentOrganizationsOfDirectoriesForApprentice, externalContentOrganizationsOfDirectoriesForInstructor, externalContentOrganizationsOfDirectoriesForInstructor, mls1Id, mls1Id, name, directoryGroupsOrUserFilter, isCommon, isGroup, isRestricted, existsParent, existsOrganization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a Directories resource.
         * @summary Retrieves a Directories resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDirectoriesItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DirectoriesJsonldDirectoryItemRead>>> {
            const localVarAxiosArgs = await DirectoriesApiAxiosParamCreator(configuration).getDirectoriesItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Directories resource.
         * @summary Creates a Directories resource.
         * @param {DirectoriesJsonld} body The new Directories resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDirectoriesCollection(body: DirectoriesJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DirectoriesJsonldDirectoryWrite>>> {
            const localVarAxiosArgs = await DirectoriesApiAxiosParamCreator(configuration).postDirectoriesCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Directories resource.
         * @summary Creates a Directories resource.
         * @param {DirectoriesJsonld} body The new Directories resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDirectoriesCollection(body: DirectoriesJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DirectoriesJsonldDirectoryWrite>>> {
            const localVarAxiosArgs = await DirectoriesApiAxiosParamCreator(configuration).postDirectoriesCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Directories resource.
         * @summary Replaces the Directories resource.
         * @param {DirectoriesJsonldDirectoryItemWrite} body The updated Directories resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDirectoriesItem(body: DirectoriesJsonldDirectoryItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DirectoriesJsonld>>> {
            const localVarAxiosArgs = await DirectoriesApiAxiosParamCreator(configuration).putDirectoriesItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Directories resource.
         * @summary Replaces the Directories resource.
         * @param {DirectoriesJsonldDirectoryItemWrite} body The updated Directories resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDirectoriesItem(body: DirectoriesJsonldDirectoryItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DirectoriesJsonld>>> {
            const localVarAxiosArgs = await DirectoriesApiAxiosParamCreator(configuration).putDirectoriesItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DirectoriesApi - factory interface
 * @export
 */
export const DirectoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes the Directories resource.
         * @summary Removes the Directories resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDirectoriesItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DirectoriesApiFp(configuration).deleteDirectoriesItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Directories resources.
         * @summary Retrieves the collection of Directories resources.
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {string} [parent] 
         * @param {Array<string>} [parent] 
         * @param {string} [owner] 
         * @param {Array<string>} [owner] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {string} [externalContents] 
         * @param {Array<string>} [externalContents] 
         * @param {string} [externalContentOrganizationsOfDirectoriesForAll] 
         * @param {Array<string>} [externalContentOrganizationsOfDirectoriesForAll] 
         * @param {string} [externalContentOrganizationsOfDirectoriesForApprentice] 
         * @param {Array<string>} [externalContentOrganizationsOfDirectoriesForApprentice] 
         * @param {string} [externalContentOrganizationsOfDirectoriesForInstructor] 
         * @param {Array<string>} [externalContentOrganizationsOfDirectoriesForInstructor] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [name] 
         * @param {string} [directoryGroupsOrUserFilter] 
         * @param {boolean} [isCommon] 
         * @param {boolean} [isGroup] 
         * @param {boolean} [isRestricted] 
         * @param {boolean} [existsParent] 
         * @param {boolean} [existsOrganization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDirectoriesCollection(pagination?: boolean, id?: number, id?: Array<number>, parent?: string, parent?: Array<string>, owner?: string, owner?: Array<string>, organization?: string, organization?: Array<string>, externalContents?: string, externalContents?: Array<string>, externalContentOrganizationsOfDirectoriesForAll?: string, externalContentOrganizationsOfDirectoriesForAll?: Array<string>, externalContentOrganizationsOfDirectoriesForApprentice?: string, externalContentOrganizationsOfDirectoriesForApprentice?: Array<string>, externalContentOrganizationsOfDirectoriesForInstructor?: string, externalContentOrganizationsOfDirectoriesForInstructor?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, name?: string, directoryGroupsOrUserFilter?: string, isCommon?: boolean, isGroup?: boolean, isRestricted?: boolean, existsParent?: boolean, existsOrganization?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2008>> {
            return DirectoriesApiFp(configuration).getDirectoriesCollection(pagination, id, id, parent, parent, owner, owner, organization, organization, externalContents, externalContents, externalContentOrganizationsOfDirectoriesForAll, externalContentOrganizationsOfDirectoriesForAll, externalContentOrganizationsOfDirectoriesForApprentice, externalContentOrganizationsOfDirectoriesForApprentice, externalContentOrganizationsOfDirectoriesForInstructor, externalContentOrganizationsOfDirectoriesForInstructor, mls1Id, mls1Id, name, directoryGroupsOrUserFilter, isCommon, isGroup, isRestricted, existsParent, existsOrganization, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Directories resource.
         * @summary Retrieves a Directories resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDirectoriesItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DirectoriesJsonldDirectoryItemRead>> {
            return DirectoriesApiFp(configuration).getDirectoriesItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Directories resource.
         * @summary Creates a Directories resource.
         * @param {DirectoriesJsonld} body The new Directories resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDirectoriesCollection(body: DirectoriesJsonld, options?: AxiosRequestConfig): Promise<AxiosResponse<DirectoriesJsonldDirectoryWrite>> {
            return DirectoriesApiFp(configuration).postDirectoriesCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Directories resource.
         * @summary Creates a Directories resource.
         * @param {DirectoriesJsonld} body The new Directories resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDirectoriesCollection(body: DirectoriesJsonld, options?: AxiosRequestConfig): Promise<AxiosResponse<DirectoriesJsonldDirectoryWrite>> {
            return DirectoriesApiFp(configuration).postDirectoriesCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Directories resource.
         * @summary Replaces the Directories resource.
         * @param {DirectoriesJsonldDirectoryItemWrite} body The updated Directories resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDirectoriesItem(body: DirectoriesJsonldDirectoryItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DirectoriesJsonld>> {
            return DirectoriesApiFp(configuration).putDirectoriesItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Directories resource.
         * @summary Replaces the Directories resource.
         * @param {DirectoriesJsonldDirectoryItemWrite} body The updated Directories resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDirectoriesItem(body: DirectoriesJsonldDirectoryItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DirectoriesJsonld>> {
            return DirectoriesApiFp(configuration).putDirectoriesItem(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DirectoriesApi - object-oriented interface
 * @export
 * @class DirectoriesApi
 * @extends {BaseAPI}
 */
export class DirectoriesApi extends BaseAPI {
    /**
     * Removes the Directories resource.
     * @summary Removes the Directories resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoriesApi
     */
    public async deleteDirectoriesItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DirectoriesApiFp(this.configuration).deleteDirectoriesItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the collection of Directories resources.
     * @summary Retrieves the collection of Directories resources.
     * @param {boolean} [pagination] Enable or disable pagination
     * @param {number} [id] 
     * @param {Array<number>} [id] 
     * @param {string} [parent] 
     * @param {Array<string>} [parent] 
     * @param {string} [owner] 
     * @param {Array<string>} [owner] 
     * @param {string} [organization] 
     * @param {Array<string>} [organization] 
     * @param {string} [externalContents] 
     * @param {Array<string>} [externalContents] 
     * @param {string} [externalContentOrganizationsOfDirectoriesForAll] 
     * @param {Array<string>} [externalContentOrganizationsOfDirectoriesForAll] 
     * @param {string} [externalContentOrganizationsOfDirectoriesForApprentice] 
     * @param {Array<string>} [externalContentOrganizationsOfDirectoriesForApprentice] 
     * @param {string} [externalContentOrganizationsOfDirectoriesForInstructor] 
     * @param {Array<string>} [externalContentOrganizationsOfDirectoriesForInstructor] 
     * @param {number} [mls1Id] 
     * @param {Array<number>} [mls1Id] 
     * @param {string} [name] 
     * @param {string} [directoryGroupsOrUserFilter] 
     * @param {boolean} [isCommon] 
     * @param {boolean} [isGroup] 
     * @param {boolean} [isRestricted] 
     * @param {boolean} [existsParent] 
     * @param {boolean} [existsOrganization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoriesApi
     */
    public async getDirectoriesCollection(pagination?: boolean, id?: number, id?: Array<number>, parent?: string, parent?: Array<string>, owner?: string, owner?: Array<string>, organization?: string, organization?: Array<string>, externalContents?: string, externalContents?: Array<string>, externalContentOrganizationsOfDirectoriesForAll?: string, externalContentOrganizationsOfDirectoriesForAll?: Array<string>, externalContentOrganizationsOfDirectoriesForApprentice?: string, externalContentOrganizationsOfDirectoriesForApprentice?: Array<string>, externalContentOrganizationsOfDirectoriesForInstructor?: string, externalContentOrganizationsOfDirectoriesForInstructor?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, name?: string, directoryGroupsOrUserFilter?: string, isCommon?: boolean, isGroup?: boolean, isRestricted?: boolean, existsParent?: boolean, existsOrganization?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2008>> {
        return DirectoriesApiFp(this.configuration).getDirectoriesCollection(pagination, id, id, parent, parent, owner, owner, organization, organization, externalContents, externalContents, externalContentOrganizationsOfDirectoriesForAll, externalContentOrganizationsOfDirectoriesForAll, externalContentOrganizationsOfDirectoriesForApprentice, externalContentOrganizationsOfDirectoriesForApprentice, externalContentOrganizationsOfDirectoriesForInstructor, externalContentOrganizationsOfDirectoriesForInstructor, mls1Id, mls1Id, name, directoryGroupsOrUserFilter, isCommon, isGroup, isRestricted, existsParent, existsOrganization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a Directories resource.
     * @summary Retrieves a Directories resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoriesApi
     */
    public async getDirectoriesItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DirectoriesJsonldDirectoryItemRead>> {
        return DirectoriesApiFp(this.configuration).getDirectoriesItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a Directories resource.
     * @summary Creates a Directories resource.
     * @param {DirectoriesJsonld} body The new Directories resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoriesApi
     */
    public async postDirectoriesCollection(body: DirectoriesJsonld, options?: AxiosRequestConfig) : Promise<AxiosResponse<DirectoriesJsonldDirectoryWrite>> {
        return DirectoriesApiFp(this.configuration).postDirectoriesCollection(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Directories resource.
     * @summary Creates a Directories resource.
     * @param {DirectoriesJsonld} body The new Directories resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoriesApi
     */
    public async postDirectoriesCollection(body: DirectoriesJsonld, options?: AxiosRequestConfig) : Promise<AxiosResponse<DirectoriesJsonldDirectoryWrite>> {
        return DirectoriesApiFp(this.configuration).postDirectoriesCollection(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the Directories resource.
     * @summary Replaces the Directories resource.
     * @param {DirectoriesJsonldDirectoryItemWrite} body The updated Directories resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoriesApi
     */
    public async putDirectoriesItem(body: DirectoriesJsonldDirectoryItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DirectoriesJsonld>> {
        return DirectoriesApiFp(this.configuration).putDirectoriesItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Directories resource.
     * @summary Replaces the Directories resource.
     * @param {DirectoriesJsonldDirectoryItemWrite} body The updated Directories resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoriesApi
     */
    public async putDirectoriesItem(body: DirectoriesJsonldDirectoryItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DirectoriesJsonld>> {
        return DirectoriesApiFp(this.configuration).putDirectoriesItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
