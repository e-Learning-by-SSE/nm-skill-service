/* tslint:disable */
/* eslint-disable */
/**
 * MLS2 API
 * Central API
 *
 * OpenAPI spec version: 0.7.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { EquipmentEquipmentItemWrite } from '../models';
import { EquipmentEquipmentWrite } from '../models';
import { EquipmentJsonld } from '../models';
import { EquipmentJsonldEquipmentItemRead } from '../models';
import { EquipmentJsonldEquipmentItemWrite } from '../models';
import { EquipmentJsonldEquipmentWrite } from '../models';
import { InlineResponse20010 } from '../models';
/**
 * EquipmentApi - axios parameter creator
 * @export
 */
export const EquipmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Equipment resource.
         * @summary Removes the Equipment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquipmentItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteEquipmentItem.');
            }
            const localVarPath = `/mls-api/equipment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Equipment resources.
         * @summary Retrieves the collection of Equipment resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {string} [taskTodos] 
         * @param {Array<string>} [taskTodos] 
         * @param {string} [groupTaskTodos] 
         * @param {Array<string>} [groupTaskTodos] 
         * @param {string} [name] 
         * @param {string} [category] 
         * @param {Array<string>} [category] 
         * @param {string} [categoryName] 
         * @param {string} [manufacturerName] 
         * @param {string} [equipmentMaintenances] 
         * @param {Array<string>} [equipmentMaintenances] 
         * @param {string} [orderEquipmentMaintenancesLastRun] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentCollection: async (page?: number, itemsPerPage?: number, pagination?: boolean, id?: number, id?: Array<number>, organization?: string, organization?: Array<string>, taskTodos?: string, taskTodos?: Array<string>, groupTaskTodos?: string, groupTaskTodos?: Array<string>, name?: string, category?: string, category?: Array<string>, categoryName?: string, manufacturerName?: string, equipmentMaintenances?: string, equipmentMaintenances?: Array<string>, orderEquipmentMaintenancesLastRun?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mls-api/equipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (pagination !== undefined) {
                localVarQueryParameter['pagination'] = pagination;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (organization !== undefined) {
                localVarQueryParameter['organization'] = organization;
            }

            if (organization) {
                localVarQueryParameter['organization[]'] = organization;
            }

            if (taskTodos !== undefined) {
                localVarQueryParameter['taskTodos'] = taskTodos;
            }

            if (taskTodos) {
                localVarQueryParameter['taskTodos[]'] = taskTodos;
            }

            if (groupTaskTodos !== undefined) {
                localVarQueryParameter['groupTaskTodos'] = groupTaskTodos;
            }

            if (groupTaskTodos) {
                localVarQueryParameter['groupTaskTodos[]'] = groupTaskTodos;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (category) {
                localVarQueryParameter['category[]'] = category;
            }

            if (categoryName !== undefined) {
                localVarQueryParameter['category.name'] = categoryName;
            }

            if (manufacturerName !== undefined) {
                localVarQueryParameter['manufacturer.name'] = manufacturerName;
            }

            if (equipmentMaintenances !== undefined) {
                localVarQueryParameter['equipmentMaintenances'] = equipmentMaintenances;
            }

            if (equipmentMaintenances) {
                localVarQueryParameter['equipmentMaintenances[]'] = equipmentMaintenances;
            }

            if (orderEquipmentMaintenancesLastRun !== undefined) {
                localVarQueryParameter['order[equipmentMaintenances.lastRun]'] = orderEquipmentMaintenancesLastRun;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Equipment resource.
         * @summary Retrieves a Equipment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getEquipmentItem.');
            }
            const localVarPath = `/mls-api/equipment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Equipment resource.
         * @summary Creates a Equipment resource.
         * @param {EquipmentJsonldEquipmentWrite} body The new Equipment resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEquipmentCollection: async (body: EquipmentJsonldEquipmentWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postEquipmentCollection.');
            }
            const localVarPath = `/mls-api/equipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Equipment resource.
         * @summary Creates a Equipment resource.
         * @param {EquipmentJsonldEquipmentWrite} body The new Equipment resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEquipmentCollection: async (body: EquipmentJsonldEquipmentWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postEquipmentCollection.');
            }
            const localVarPath = `/mls-api/equipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Equipment resource.
         * @summary Replaces the Equipment resource.
         * @param {EquipmentJsonldEquipmentItemWrite} body The updated Equipment resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putEquipmentItem: async (body: EquipmentJsonldEquipmentItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putEquipmentItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putEquipmentItem.');
            }
            const localVarPath = `/mls-api/equipment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Equipment resource.
         * @summary Replaces the Equipment resource.
         * @param {EquipmentJsonldEquipmentItemWrite} body The updated Equipment resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putEquipmentItem: async (body: EquipmentJsonldEquipmentItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putEquipmentItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putEquipmentItem.');
            }
            const localVarPath = `/mls-api/equipment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EquipmentApi - functional programming interface
 * @export
 */
export const EquipmentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes the Equipment resource.
         * @summary Removes the Equipment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEquipmentItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await EquipmentApiAxiosParamCreator(configuration).deleteEquipmentItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the collection of Equipment resources.
         * @summary Retrieves the collection of Equipment resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {string} [taskTodos] 
         * @param {Array<string>} [taskTodos] 
         * @param {string} [groupTaskTodos] 
         * @param {Array<string>} [groupTaskTodos] 
         * @param {string} [name] 
         * @param {string} [category] 
         * @param {Array<string>} [category] 
         * @param {string} [categoryName] 
         * @param {string} [manufacturerName] 
         * @param {string} [equipmentMaintenances] 
         * @param {Array<string>} [equipmentMaintenances] 
         * @param {string} [orderEquipmentMaintenancesLastRun] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipmentCollection(page?: number, itemsPerPage?: number, pagination?: boolean, id?: number, id?: Array<number>, organization?: string, organization?: Array<string>, taskTodos?: string, taskTodos?: Array<string>, groupTaskTodos?: string, groupTaskTodos?: Array<string>, name?: string, category?: string, category?: Array<string>, categoryName?: string, manufacturerName?: string, equipmentMaintenances?: string, equipmentMaintenances?: Array<string>, orderEquipmentMaintenancesLastRun?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await EquipmentApiAxiosParamCreator(configuration).getEquipmentCollection(page, itemsPerPage, pagination, id, id, organization, organization, taskTodos, taskTodos, groupTaskTodos, groupTaskTodos, name, category, category, categoryName, manufacturerName, equipmentMaintenances, equipmentMaintenances, orderEquipmentMaintenancesLastRun, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a Equipment resource.
         * @summary Retrieves a Equipment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipmentItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EquipmentJsonldEquipmentItemRead>>> {
            const localVarAxiosArgs = await EquipmentApiAxiosParamCreator(configuration).getEquipmentItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Equipment resource.
         * @summary Creates a Equipment resource.
         * @param {EquipmentJsonldEquipmentWrite} body The new Equipment resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEquipmentCollection(body: EquipmentJsonldEquipmentWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EquipmentJsonld>>> {
            const localVarAxiosArgs = await EquipmentApiAxiosParamCreator(configuration).postEquipmentCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Equipment resource.
         * @summary Creates a Equipment resource.
         * @param {EquipmentJsonldEquipmentWrite} body The new Equipment resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEquipmentCollection(body: EquipmentJsonldEquipmentWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EquipmentJsonld>>> {
            const localVarAxiosArgs = await EquipmentApiAxiosParamCreator(configuration).postEquipmentCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Equipment resource.
         * @summary Replaces the Equipment resource.
         * @param {EquipmentJsonldEquipmentItemWrite} body The updated Equipment resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putEquipmentItem(body: EquipmentJsonldEquipmentItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EquipmentJsonld>>> {
            const localVarAxiosArgs = await EquipmentApiAxiosParamCreator(configuration).putEquipmentItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Equipment resource.
         * @summary Replaces the Equipment resource.
         * @param {EquipmentJsonldEquipmentItemWrite} body The updated Equipment resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putEquipmentItem(body: EquipmentJsonldEquipmentItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EquipmentJsonld>>> {
            const localVarAxiosArgs = await EquipmentApiAxiosParamCreator(configuration).putEquipmentItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EquipmentApi - factory interface
 * @export
 */
export const EquipmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes the Equipment resource.
         * @summary Removes the Equipment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEquipmentItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return EquipmentApiFp(configuration).deleteEquipmentItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Equipment resources.
         * @summary Retrieves the collection of Equipment resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {string} [taskTodos] 
         * @param {Array<string>} [taskTodos] 
         * @param {string} [groupTaskTodos] 
         * @param {Array<string>} [groupTaskTodos] 
         * @param {string} [name] 
         * @param {string} [category] 
         * @param {Array<string>} [category] 
         * @param {string} [categoryName] 
         * @param {string} [manufacturerName] 
         * @param {string} [equipmentMaintenances] 
         * @param {Array<string>} [equipmentMaintenances] 
         * @param {string} [orderEquipmentMaintenancesLastRun] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipmentCollection(page?: number, itemsPerPage?: number, pagination?: boolean, id?: number, id?: Array<number>, organization?: string, organization?: Array<string>, taskTodos?: string, taskTodos?: Array<string>, groupTaskTodos?: string, groupTaskTodos?: Array<string>, name?: string, category?: string, category?: Array<string>, categoryName?: string, manufacturerName?: string, equipmentMaintenances?: string, equipmentMaintenances?: Array<string>, orderEquipmentMaintenancesLastRun?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return EquipmentApiFp(configuration).getEquipmentCollection(page, itemsPerPage, pagination, id, id, organization, organization, taskTodos, taskTodos, groupTaskTodos, groupTaskTodos, name, category, category, categoryName, manufacturerName, equipmentMaintenances, equipmentMaintenances, orderEquipmentMaintenancesLastRun, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Equipment resource.
         * @summary Retrieves a Equipment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipmentItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<EquipmentJsonldEquipmentItemRead>> {
            return EquipmentApiFp(configuration).getEquipmentItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Equipment resource.
         * @summary Creates a Equipment resource.
         * @param {EquipmentJsonldEquipmentWrite} body The new Equipment resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEquipmentCollection(body: EquipmentJsonldEquipmentWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<EquipmentJsonld>> {
            return EquipmentApiFp(configuration).postEquipmentCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Equipment resource.
         * @summary Creates a Equipment resource.
         * @param {EquipmentJsonldEquipmentWrite} body The new Equipment resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEquipmentCollection(body: EquipmentJsonldEquipmentWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<EquipmentJsonld>> {
            return EquipmentApiFp(configuration).postEquipmentCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Equipment resource.
         * @summary Replaces the Equipment resource.
         * @param {EquipmentJsonldEquipmentItemWrite} body The updated Equipment resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putEquipmentItem(body: EquipmentJsonldEquipmentItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<EquipmentJsonld>> {
            return EquipmentApiFp(configuration).putEquipmentItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Equipment resource.
         * @summary Replaces the Equipment resource.
         * @param {EquipmentJsonldEquipmentItemWrite} body The updated Equipment resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putEquipmentItem(body: EquipmentJsonldEquipmentItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<EquipmentJsonld>> {
            return EquipmentApiFp(configuration).putEquipmentItem(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EquipmentApi - object-oriented interface
 * @export
 * @class EquipmentApi
 * @extends {BaseAPI}
 */
export class EquipmentApi extends BaseAPI {
    /**
     * Removes the Equipment resource.
     * @summary Removes the Equipment resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public async deleteEquipmentItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return EquipmentApiFp(this.configuration).deleteEquipmentItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the collection of Equipment resources.
     * @summary Retrieves the collection of Equipment resources.
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {boolean} [pagination] Enable or disable pagination
     * @param {number} [id] 
     * @param {Array<number>} [id] 
     * @param {string} [organization] 
     * @param {Array<string>} [organization] 
     * @param {string} [taskTodos] 
     * @param {Array<string>} [taskTodos] 
     * @param {string} [groupTaskTodos] 
     * @param {Array<string>} [groupTaskTodos] 
     * @param {string} [name] 
     * @param {string} [category] 
     * @param {Array<string>} [category] 
     * @param {string} [categoryName] 
     * @param {string} [manufacturerName] 
     * @param {string} [equipmentMaintenances] 
     * @param {Array<string>} [equipmentMaintenances] 
     * @param {string} [orderEquipmentMaintenancesLastRun] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public async getEquipmentCollection(page?: number, itemsPerPage?: number, pagination?: boolean, id?: number, id?: Array<number>, organization?: string, organization?: Array<string>, taskTodos?: string, taskTodos?: Array<string>, groupTaskTodos?: string, groupTaskTodos?: Array<string>, name?: string, category?: string, category?: Array<string>, categoryName?: string, manufacturerName?: string, equipmentMaintenances?: string, equipmentMaintenances?: Array<string>, orderEquipmentMaintenancesLastRun?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return EquipmentApiFp(this.configuration).getEquipmentCollection(page, itemsPerPage, pagination, id, id, organization, organization, taskTodos, taskTodos, groupTaskTodos, groupTaskTodos, name, category, category, categoryName, manufacturerName, equipmentMaintenances, equipmentMaintenances, orderEquipmentMaintenancesLastRun, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a Equipment resource.
     * @summary Retrieves a Equipment resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public async getEquipmentItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<EquipmentJsonldEquipmentItemRead>> {
        return EquipmentApiFp(this.configuration).getEquipmentItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a Equipment resource.
     * @summary Creates a Equipment resource.
     * @param {EquipmentJsonldEquipmentWrite} body The new Equipment resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public async postEquipmentCollection(body: EquipmentJsonldEquipmentWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<EquipmentJsonld>> {
        return EquipmentApiFp(this.configuration).postEquipmentCollection(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Equipment resource.
     * @summary Creates a Equipment resource.
     * @param {EquipmentJsonldEquipmentWrite} body The new Equipment resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public async postEquipmentCollection(body: EquipmentJsonldEquipmentWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<EquipmentJsonld>> {
        return EquipmentApiFp(this.configuration).postEquipmentCollection(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the Equipment resource.
     * @summary Replaces the Equipment resource.
     * @param {EquipmentJsonldEquipmentItemWrite} body The updated Equipment resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public async putEquipmentItem(body: EquipmentJsonldEquipmentItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<EquipmentJsonld>> {
        return EquipmentApiFp(this.configuration).putEquipmentItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Equipment resource.
     * @summary Replaces the Equipment resource.
     * @param {EquipmentJsonldEquipmentItemWrite} body The updated Equipment resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public async putEquipmentItem(body: EquipmentJsonldEquipmentItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<EquipmentJsonld>> {
        return EquipmentApiFp(this.configuration).putEquipmentItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
