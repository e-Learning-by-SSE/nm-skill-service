/* tslint:disable */
/* eslint-disable */
/**
 * MLS2 API
 * Central API
 *
 * OpenAPI spec version: 0.7.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ExternalContentUserExternalContentUserWrite } from '../models';
import { ExternalContentUserJsonld } from '../models';
import { ExternalContentUserJsonldExternalContentUserItemRead } from '../models';
import { ExternalContentUserJsonldExternalContentUserWrite } from '../models';
import { InlineResponse20022 } from '../models';
/**
 * ExternalContentUserApi - axios parameter creator
 * @export
 */
export const ExternalContentUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the ExternalContentUser resource.
         * @summary Removes the ExternalContentUser resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalContentUserItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteExternalContentUserItem.');
            }
            const localVarPath = `/mls-api/external-content-users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of ExternalContentUser resources.
         * @summary Retrieves the collection of ExternalContentUser resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [externalContentOrganization] 
         * @param {Array<string>} [externalContentOrganization] 
         * @param {string} [user] 
         * @param {Array<string>} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalContentUserCollection: async (page?: number, itemsPerPage?: number, pagination?: boolean, externalContentOrganization?: string, externalContentOrganization?: Array<string>, user?: string, user?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mls-api/external-content-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (pagination !== undefined) {
                localVarQueryParameter['pagination'] = pagination;
            }

            if (externalContentOrganization !== undefined) {
                localVarQueryParameter['externalContentOrganization'] = externalContentOrganization;
            }

            if (externalContentOrganization) {
                localVarQueryParameter['externalContentOrganization[]'] = externalContentOrganization;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (user) {
                localVarQueryParameter['user[]'] = user;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ExternalContentUser resource.
         * @summary Retrieves a ExternalContentUser resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalContentUserItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getExternalContentUserItem.');
            }
            const localVarPath = `/mls-api/external-content-users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ExternalContentUser resource.
         * @summary Creates a ExternalContentUser resource.
         * @param {ExternalContentUserJsonldExternalContentUserWrite} body The new ExternalContentUser resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExternalContentUserCollection: async (body: ExternalContentUserJsonldExternalContentUserWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postExternalContentUserCollection.');
            }
            const localVarPath = `/mls-api/external-content-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ExternalContentUser resource.
         * @summary Creates a ExternalContentUser resource.
         * @param {ExternalContentUserJsonldExternalContentUserWrite} body The new ExternalContentUser resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExternalContentUserCollection: async (body: ExternalContentUserJsonldExternalContentUserWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postExternalContentUserCollection.');
            }
            const localVarPath = `/mls-api/external-content-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalContentUserApi - functional programming interface
 * @export
 */
export const ExternalContentUserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes the ExternalContentUser resource.
         * @summary Removes the ExternalContentUser resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExternalContentUserItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExternalContentUserApiAxiosParamCreator(configuration).deleteExternalContentUserItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the collection of ExternalContentUser resources.
         * @summary Retrieves the collection of ExternalContentUser resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [externalContentOrganization] 
         * @param {Array<string>} [externalContentOrganization] 
         * @param {string} [user] 
         * @param {Array<string>} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalContentUserCollection(page?: number, itemsPerPage?: number, pagination?: boolean, externalContentOrganization?: string, externalContentOrganization?: Array<string>, user?: string, user?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20022>>> {
            const localVarAxiosArgs = await ExternalContentUserApiAxiosParamCreator(configuration).getExternalContentUserCollection(page, itemsPerPage, pagination, externalContentOrganization, externalContentOrganization, user, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a ExternalContentUser resource.
         * @summary Retrieves a ExternalContentUser resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalContentUserItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExternalContentUserJsonldExternalContentUserItemRead>>> {
            const localVarAxiosArgs = await ExternalContentUserApiAxiosParamCreator(configuration).getExternalContentUserItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a ExternalContentUser resource.
         * @summary Creates a ExternalContentUser resource.
         * @param {ExternalContentUserJsonldExternalContentUserWrite} body The new ExternalContentUser resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExternalContentUserCollection(body: ExternalContentUserJsonldExternalContentUserWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExternalContentUserJsonld>>> {
            const localVarAxiosArgs = await ExternalContentUserApiAxiosParamCreator(configuration).postExternalContentUserCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a ExternalContentUser resource.
         * @summary Creates a ExternalContentUser resource.
         * @param {ExternalContentUserJsonldExternalContentUserWrite} body The new ExternalContentUser resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExternalContentUserCollection(body: ExternalContentUserJsonldExternalContentUserWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExternalContentUserJsonld>>> {
            const localVarAxiosArgs = await ExternalContentUserApiAxiosParamCreator(configuration).postExternalContentUserCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ExternalContentUserApi - factory interface
 * @export
 */
export const ExternalContentUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes the ExternalContentUser resource.
         * @summary Removes the ExternalContentUser resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExternalContentUserItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExternalContentUserApiFp(configuration).deleteExternalContentUserItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of ExternalContentUser resources.
         * @summary Retrieves the collection of ExternalContentUser resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [externalContentOrganization] 
         * @param {Array<string>} [externalContentOrganization] 
         * @param {string} [user] 
         * @param {Array<string>} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalContentUserCollection(page?: number, itemsPerPage?: number, pagination?: boolean, externalContentOrganization?: string, externalContentOrganization?: Array<string>, user?: string, user?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20022>> {
            return ExternalContentUserApiFp(configuration).getExternalContentUserCollection(page, itemsPerPage, pagination, externalContentOrganization, externalContentOrganization, user, user, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ExternalContentUser resource.
         * @summary Retrieves a ExternalContentUser resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalContentUserItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ExternalContentUserJsonldExternalContentUserItemRead>> {
            return ExternalContentUserApiFp(configuration).getExternalContentUserItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ExternalContentUser resource.
         * @summary Creates a ExternalContentUser resource.
         * @param {ExternalContentUserJsonldExternalContentUserWrite} body The new ExternalContentUser resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExternalContentUserCollection(body: ExternalContentUserJsonldExternalContentUserWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<ExternalContentUserJsonld>> {
            return ExternalContentUserApiFp(configuration).postExternalContentUserCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ExternalContentUser resource.
         * @summary Creates a ExternalContentUser resource.
         * @param {ExternalContentUserJsonldExternalContentUserWrite} body The new ExternalContentUser resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExternalContentUserCollection(body: ExternalContentUserJsonldExternalContentUserWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<ExternalContentUserJsonld>> {
            return ExternalContentUserApiFp(configuration).postExternalContentUserCollection(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExternalContentUserApi - object-oriented interface
 * @export
 * @class ExternalContentUserApi
 * @extends {BaseAPI}
 */
export class ExternalContentUserApi extends BaseAPI {
    /**
     * Removes the ExternalContentUser resource.
     * @summary Removes the ExternalContentUser resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalContentUserApi
     */
    public async deleteExternalContentUserItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExternalContentUserApiFp(this.configuration).deleteExternalContentUserItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the collection of ExternalContentUser resources.
     * @summary Retrieves the collection of ExternalContentUser resources.
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {boolean} [pagination] Enable or disable pagination
     * @param {string} [externalContentOrganization] 
     * @param {Array<string>} [externalContentOrganization] 
     * @param {string} [user] 
     * @param {Array<string>} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalContentUserApi
     */
    public async getExternalContentUserCollection(page?: number, itemsPerPage?: number, pagination?: boolean, externalContentOrganization?: string, externalContentOrganization?: Array<string>, user?: string, user?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20022>> {
        return ExternalContentUserApiFp(this.configuration).getExternalContentUserCollection(page, itemsPerPage, pagination, externalContentOrganization, externalContentOrganization, user, user, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a ExternalContentUser resource.
     * @summary Retrieves a ExternalContentUser resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalContentUserApi
     */
    public async getExternalContentUserItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExternalContentUserJsonldExternalContentUserItemRead>> {
        return ExternalContentUserApiFp(this.configuration).getExternalContentUserItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a ExternalContentUser resource.
     * @summary Creates a ExternalContentUser resource.
     * @param {ExternalContentUserJsonldExternalContentUserWrite} body The new ExternalContentUser resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalContentUserApi
     */
    public async postExternalContentUserCollection(body: ExternalContentUserJsonldExternalContentUserWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExternalContentUserJsonld>> {
        return ExternalContentUserApiFp(this.configuration).postExternalContentUserCollection(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ExternalContentUser resource.
     * @summary Creates a ExternalContentUser resource.
     * @param {ExternalContentUserJsonldExternalContentUserWrite} body The new ExternalContentUser resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalContentUserApi
     */
    public async postExternalContentUserCollection(body: ExternalContentUserJsonldExternalContentUserWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExternalContentUserJsonld>> {
        return ExternalContentUserApiFp(this.configuration).postExternalContentUserCollection(body, options).then((request) => request(this.axios, this.basePath));
    }
}
