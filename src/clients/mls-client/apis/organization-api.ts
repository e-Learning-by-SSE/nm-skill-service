/* tslint:disable */
/* eslint-disable */
/**
 * MLS2 API
 * Central API
 *
 * OpenAPI spec version: 0.7.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20048 } from '../models';
import { OrganizationJsonld } from '../models';
import { OrganizationJsonldOrganizationItemRead } from '../models';
import { OrganizationJsonldOrganizationItemWrite } from '../models';
import { OrganizationJsonldOrganizationWrite } from '../models';
import { OrganizationOrganizationItemWrite } from '../models';
import { OrganizationOrganizationWrite } from '../models';
/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Organization resource.
         * @summary Removes the Organization resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteOrganizationItem.');
            }
            const localVarPath = `/mls-api/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Organization resources.
         * @summary Retrieves the collection of Organization resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [name] 
         * @param {string} [city] 
         * @param {string} [country] 
         * @param {string} [users] 
         * @param {Array<string>} [users] 
         * @param {string} [settings] 
         * @param {Array<string>} [settings] 
         * @param {string} [settingsOrganizationRelation] 
         * @param {Array<string>} [settingsOrganizationRelation] 
         * @param {string} [organizationInGroup] 
         * @param {Array<string>} [organizationInGroup] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [parentOrganizationSettingsOrganization] 
         * @param {Array<string>} [parentOrganizationSettingsOrganization] 
         * @param {string} [orderId] 
         * @param {string} [orderName] 
         * @param {string} [orderCity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationCollection: async (page?: number, itemsPerPage?: number, pagination?: boolean, name?: string, city?: string, country?: string, users?: string, users?: Array<string>, settings?: string, settings?: Array<string>, settingsOrganizationRelation?: string, settingsOrganizationRelation?: Array<string>, organizationInGroup?: string, organizationInGroup?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, parentOrganizationSettingsOrganization?: string, parentOrganizationSettingsOrganization?: Array<string>, orderId?: string, orderName?: string, orderCity?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mls-api/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (pagination !== undefined) {
                localVarQueryParameter['pagination'] = pagination;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (users !== undefined) {
                localVarQueryParameter['users'] = users;
            }

            if (users) {
                localVarQueryParameter['users[]'] = users;
            }

            if (settings !== undefined) {
                localVarQueryParameter['settings'] = settings;
            }

            if (settings) {
                localVarQueryParameter['settings[]'] = settings;
            }

            if (settingsOrganizationRelation !== undefined) {
                localVarQueryParameter['settings.organizationRelation'] = settingsOrganizationRelation;
            }

            if (settingsOrganizationRelation) {
                localVarQueryParameter['settings.organizationRelation[]'] = settingsOrganizationRelation;
            }

            if (organizationInGroup !== undefined) {
                localVarQueryParameter['organizationInGroup'] = organizationInGroup;
            }

            if (organizationInGroup) {
                localVarQueryParameter['organizationInGroup[]'] = organizationInGroup;
            }

            if (mls1Id !== undefined) {
                localVarQueryParameter['mls1Id'] = mls1Id;
            }

            if (mls1Id) {
                localVarQueryParameter['mls1Id[]'] = mls1Id;
            }

            if (parentOrganizationSettingsOrganization !== undefined) {
                localVarQueryParameter['parentOrganizationSettings.organization'] = parentOrganizationSettingsOrganization;
            }

            if (parentOrganizationSettingsOrganization) {
                localVarQueryParameter['parentOrganizationSettings.organization[]'] = parentOrganizationSettingsOrganization;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['order[id]'] = orderId;
            }

            if (orderName !== undefined) {
                localVarQueryParameter['order[name]'] = orderName;
            }

            if (orderCity !== undefined) {
                localVarQueryParameter['order[city]'] = orderCity;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Organization resource.
         * @summary Retrieves a Organization resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOrganizationItem.');
            }
            const localVarPath = `/mls-api/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Organization resource.
         * @summary Creates a Organization resource.
         * @param {OrganizationJsonldOrganizationWrite} body The new Organization resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrganizationCollection: async (body: OrganizationJsonldOrganizationWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postOrganizationCollection.');
            }
            const localVarPath = `/mls-api/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Organization resource.
         * @summary Creates a Organization resource.
         * @param {OrganizationJsonldOrganizationWrite} body The new Organization resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrganizationCollection: async (body: OrganizationJsonldOrganizationWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postOrganizationCollection.');
            }
            const localVarPath = `/mls-api/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Organization resource.
         * @summary Replaces the Organization resource.
         * @param {OrganizationJsonldOrganizationItemWrite} body The updated Organization resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrganizationItem: async (body: OrganizationJsonldOrganizationItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putOrganizationItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putOrganizationItem.');
            }
            const localVarPath = `/mls-api/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Organization resource.
         * @summary Replaces the Organization resource.
         * @param {OrganizationJsonldOrganizationItemWrite} body The updated Organization resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrganizationItem: async (body: OrganizationJsonldOrganizationItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putOrganizationItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putOrganizationItem.');
            }
            const localVarPath = `/mls-api/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes the Organization resource.
         * @summary Removes the Organization resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganizationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OrganizationApiAxiosParamCreator(configuration).deleteOrganizationItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the collection of Organization resources.
         * @summary Retrieves the collection of Organization resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [name] 
         * @param {string} [city] 
         * @param {string} [country] 
         * @param {string} [users] 
         * @param {Array<string>} [users] 
         * @param {string} [settings] 
         * @param {Array<string>} [settings] 
         * @param {string} [settingsOrganizationRelation] 
         * @param {Array<string>} [settingsOrganizationRelation] 
         * @param {string} [organizationInGroup] 
         * @param {Array<string>} [organizationInGroup] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [parentOrganizationSettingsOrganization] 
         * @param {Array<string>} [parentOrganizationSettingsOrganization] 
         * @param {string} [orderId] 
         * @param {string} [orderName] 
         * @param {string} [orderCity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationCollection(page?: number, itemsPerPage?: number, pagination?: boolean, name?: string, city?: string, country?: string, users?: string, users?: Array<string>, settings?: string, settings?: Array<string>, settingsOrganizationRelation?: string, settingsOrganizationRelation?: Array<string>, organizationInGroup?: string, organizationInGroup?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, parentOrganizationSettingsOrganization?: string, parentOrganizationSettingsOrganization?: Array<string>, orderId?: string, orderName?: string, orderCity?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20048>>> {
            const localVarAxiosArgs = await OrganizationApiAxiosParamCreator(configuration).getOrganizationCollection(page, itemsPerPage, pagination, name, city, country, users, users, settings, settings, settingsOrganizationRelation, settingsOrganizationRelation, organizationInGroup, organizationInGroup, mls1Id, mls1Id, parentOrganizationSettingsOrganization, parentOrganizationSettingsOrganization, orderId, orderName, orderCity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a Organization resource.
         * @summary Retrieves a Organization resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrganizationJsonldOrganizationItemRead>>> {
            const localVarAxiosArgs = await OrganizationApiAxiosParamCreator(configuration).getOrganizationItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Organization resource.
         * @summary Creates a Organization resource.
         * @param {OrganizationJsonldOrganizationWrite} body The new Organization resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrganizationCollection(body: OrganizationJsonldOrganizationWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrganizationJsonld>>> {
            const localVarAxiosArgs = await OrganizationApiAxiosParamCreator(configuration).postOrganizationCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Organization resource.
         * @summary Creates a Organization resource.
         * @param {OrganizationJsonldOrganizationWrite} body The new Organization resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrganizationCollection(body: OrganizationJsonldOrganizationWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrganizationJsonld>>> {
            const localVarAxiosArgs = await OrganizationApiAxiosParamCreator(configuration).postOrganizationCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Organization resource.
         * @summary Replaces the Organization resource.
         * @param {OrganizationJsonldOrganizationItemWrite} body The updated Organization resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putOrganizationItem(body: OrganizationJsonldOrganizationItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrganizationJsonld>>> {
            const localVarAxiosArgs = await OrganizationApiAxiosParamCreator(configuration).putOrganizationItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Organization resource.
         * @summary Replaces the Organization resource.
         * @param {OrganizationJsonldOrganizationItemWrite} body The updated Organization resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putOrganizationItem(body: OrganizationJsonldOrganizationItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrganizationJsonld>>> {
            const localVarAxiosArgs = await OrganizationApiAxiosParamCreator(configuration).putOrganizationItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes the Organization resource.
         * @summary Removes the Organization resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganizationItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OrganizationApiFp(configuration).deleteOrganizationItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Organization resources.
         * @summary Retrieves the collection of Organization resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [name] 
         * @param {string} [city] 
         * @param {string} [country] 
         * @param {string} [users] 
         * @param {Array<string>} [users] 
         * @param {string} [settings] 
         * @param {Array<string>} [settings] 
         * @param {string} [settingsOrganizationRelation] 
         * @param {Array<string>} [settingsOrganizationRelation] 
         * @param {string} [organizationInGroup] 
         * @param {Array<string>} [organizationInGroup] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [parentOrganizationSettingsOrganization] 
         * @param {Array<string>} [parentOrganizationSettingsOrganization] 
         * @param {string} [orderId] 
         * @param {string} [orderName] 
         * @param {string} [orderCity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationCollection(page?: number, itemsPerPage?: number, pagination?: boolean, name?: string, city?: string, country?: string, users?: string, users?: Array<string>, settings?: string, settings?: Array<string>, settingsOrganizationRelation?: string, settingsOrganizationRelation?: Array<string>, organizationInGroup?: string, organizationInGroup?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, parentOrganizationSettingsOrganization?: string, parentOrganizationSettingsOrganization?: Array<string>, orderId?: string, orderName?: string, orderCity?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20048>> {
            return OrganizationApiFp(configuration).getOrganizationCollection(page, itemsPerPage, pagination, name, city, country, users, users, settings, settings, settingsOrganizationRelation, settingsOrganizationRelation, organizationInGroup, organizationInGroup, mls1Id, mls1Id, parentOrganizationSettingsOrganization, parentOrganizationSettingsOrganization, orderId, orderName, orderCity, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Organization resource.
         * @summary Retrieves a Organization resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationJsonldOrganizationItemRead>> {
            return OrganizationApiFp(configuration).getOrganizationItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Organization resource.
         * @summary Creates a Organization resource.
         * @param {OrganizationJsonldOrganizationWrite} body The new Organization resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrganizationCollection(body: OrganizationJsonldOrganizationWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationJsonld>> {
            return OrganizationApiFp(configuration).postOrganizationCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Organization resource.
         * @summary Creates a Organization resource.
         * @param {OrganizationJsonldOrganizationWrite} body The new Organization resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrganizationCollection(body: OrganizationJsonldOrganizationWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationJsonld>> {
            return OrganizationApiFp(configuration).postOrganizationCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Organization resource.
         * @summary Replaces the Organization resource.
         * @param {OrganizationJsonldOrganizationItemWrite} body The updated Organization resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putOrganizationItem(body: OrganizationJsonldOrganizationItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationJsonld>> {
            return OrganizationApiFp(configuration).putOrganizationItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Organization resource.
         * @summary Replaces the Organization resource.
         * @param {OrganizationJsonldOrganizationItemWrite} body The updated Organization resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putOrganizationItem(body: OrganizationJsonldOrganizationItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationJsonld>> {
            return OrganizationApiFp(configuration).putOrganizationItem(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export class OrganizationApi extends BaseAPI {
    /**
     * Removes the Organization resource.
     * @summary Removes the Organization resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public async deleteOrganizationItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OrganizationApiFp(this.configuration).deleteOrganizationItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the collection of Organization resources.
     * @summary Retrieves the collection of Organization resources.
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {boolean} [pagination] Enable or disable pagination
     * @param {string} [name] 
     * @param {string} [city] 
     * @param {string} [country] 
     * @param {string} [users] 
     * @param {Array<string>} [users] 
     * @param {string} [settings] 
     * @param {Array<string>} [settings] 
     * @param {string} [settingsOrganizationRelation] 
     * @param {Array<string>} [settingsOrganizationRelation] 
     * @param {string} [organizationInGroup] 
     * @param {Array<string>} [organizationInGroup] 
     * @param {number} [mls1Id] 
     * @param {Array<number>} [mls1Id] 
     * @param {string} [parentOrganizationSettingsOrganization] 
     * @param {Array<string>} [parentOrganizationSettingsOrganization] 
     * @param {string} [orderId] 
     * @param {string} [orderName] 
     * @param {string} [orderCity] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public async getOrganizationCollection(page?: number, itemsPerPage?: number, pagination?: boolean, name?: string, city?: string, country?: string, users?: string, users?: Array<string>, settings?: string, settings?: Array<string>, settingsOrganizationRelation?: string, settingsOrganizationRelation?: Array<string>, organizationInGroup?: string, organizationInGroup?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, parentOrganizationSettingsOrganization?: string, parentOrganizationSettingsOrganization?: Array<string>, orderId?: string, orderName?: string, orderCity?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20048>> {
        return OrganizationApiFp(this.configuration).getOrganizationCollection(page, itemsPerPage, pagination, name, city, country, users, users, settings, settings, settingsOrganizationRelation, settingsOrganizationRelation, organizationInGroup, organizationInGroup, mls1Id, mls1Id, parentOrganizationSettingsOrganization, parentOrganizationSettingsOrganization, orderId, orderName, orderCity, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a Organization resource.
     * @summary Retrieves a Organization resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public async getOrganizationItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrganizationJsonldOrganizationItemRead>> {
        return OrganizationApiFp(this.configuration).getOrganizationItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a Organization resource.
     * @summary Creates a Organization resource.
     * @param {OrganizationJsonldOrganizationWrite} body The new Organization resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public async postOrganizationCollection(body: OrganizationJsonldOrganizationWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrganizationJsonld>> {
        return OrganizationApiFp(this.configuration).postOrganizationCollection(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Organization resource.
     * @summary Creates a Organization resource.
     * @param {OrganizationJsonldOrganizationWrite} body The new Organization resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public async postOrganizationCollection(body: OrganizationJsonldOrganizationWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrganizationJsonld>> {
        return OrganizationApiFp(this.configuration).postOrganizationCollection(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the Organization resource.
     * @summary Replaces the Organization resource.
     * @param {OrganizationJsonldOrganizationItemWrite} body The updated Organization resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public async putOrganizationItem(body: OrganizationJsonldOrganizationItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrganizationJsonld>> {
        return OrganizationApiFp(this.configuration).putOrganizationItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Organization resource.
     * @summary Replaces the Organization resource.
     * @param {OrganizationJsonldOrganizationItemWrite} body The updated Organization resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public async putOrganizationItem(body: OrganizationJsonldOrganizationItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrganizationJsonld>> {
        return OrganizationApiFp(this.configuration).putOrganizationItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
