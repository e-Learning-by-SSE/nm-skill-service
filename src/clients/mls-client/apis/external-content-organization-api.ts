/* tslint:disable */
/* eslint-disable */
/**
 * MLS2 API
 * Central API
 *
 * OpenAPI spec version: 0.7.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ExternalContentOrganizationExternalContentOrganizationItemWrite } from '../models';
import { ExternalContentOrganizationExternalContentOrganizationWrite } from '../models';
import { ExternalContentOrganizationJsonld } from '../models';
import { ExternalContentOrganizationJsonldExternalContentOrganizationItemRead } from '../models';
import { ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite } from '../models';
import { ExternalContentOrganizationJsonldExternalContentOrganizationWrite } from '../models';
import { InlineResponse20021 } from '../models';
/**
 * ExternalContentOrganizationApi - axios parameter creator
 * @export
 */
export const ExternalContentOrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the ExternalContentOrganization resource.
         * @summary Removes the ExternalContentOrganization resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalContentOrganizationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteExternalContentOrganizationItem.');
            }
            const localVarPath = `/mls-api/external-content-organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of ExternalContentOrganization resources.
         * @summary Retrieves the collection of ExternalContentOrganization resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [externalContent] 
         * @param {Array<string>} [externalContent] 
         * @param {string} [externalContentLicenseModel] 
         * @param {Array<string>} [externalContentLicenseModel] 
         * @param {string} [externalContentSupplier] 
         * @param {Array<string>} [externalContentSupplier] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {boolean} [existsProjects] 
         * @param {boolean} [existsTasks] 
         * @param {boolean} [existsForms] 
         * @param {boolean} [existsElearnings] 
         * @param {boolean} [existsNoMlsContents] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalContentOrganizationCollection: async (page?: number, itemsPerPage?: number, pagination?: boolean, externalContent?: string, externalContent?: Array<string>, externalContentLicenseModel?: string, externalContentLicenseModel?: Array<string>, externalContentSupplier?: string, externalContentSupplier?: Array<string>, organization?: string, organization?: Array<string>, existsProjects?: boolean, existsTasks?: boolean, existsForms?: boolean, existsElearnings?: boolean, existsNoMlsContents?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mls-api/external-content-organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (pagination !== undefined) {
                localVarQueryParameter['pagination'] = pagination;
            }

            if (externalContent !== undefined) {
                localVarQueryParameter['externalContent'] = externalContent;
            }

            if (externalContent) {
                localVarQueryParameter['externalContent[]'] = externalContent;
            }

            if (externalContentLicenseModel !== undefined) {
                localVarQueryParameter['externalContent.licenseModel'] = externalContentLicenseModel;
            }

            if (externalContentLicenseModel) {
                localVarQueryParameter['externalContent.licenseModel[]'] = externalContentLicenseModel;
            }

            if (externalContentSupplier !== undefined) {
                localVarQueryParameter['externalContent.supplier'] = externalContentSupplier;
            }

            if (externalContentSupplier) {
                localVarQueryParameter['externalContent.supplier[]'] = externalContentSupplier;
            }

            if (organization !== undefined) {
                localVarQueryParameter['organization'] = organization;
            }

            if (organization) {
                localVarQueryParameter['organization[]'] = organization;
            }

            if (existsProjects !== undefined) {
                localVarQueryParameter['exists[projects]'] = existsProjects;
            }

            if (existsTasks !== undefined) {
                localVarQueryParameter['exists[tasks]'] = existsTasks;
            }

            if (existsForms !== undefined) {
                localVarQueryParameter['exists[forms]'] = existsForms;
            }

            if (existsElearnings !== undefined) {
                localVarQueryParameter['exists[elearnings]'] = existsElearnings;
            }

            if (existsNoMlsContents !== undefined) {
                localVarQueryParameter['exists[noMlsContents]'] = existsNoMlsContents;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ExternalContentOrganization resource.
         * @summary Retrieves a ExternalContentOrganization resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalContentOrganizationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getExternalContentOrganizationItem.');
            }
            const localVarPath = `/mls-api/external-content-organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ExternalContentOrganization resource.
         * @summary Creates a ExternalContentOrganization resource.
         * @param {ExternalContentOrganizationJsonldExternalContentOrganizationWrite} body The new ExternalContentOrganization resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExternalContentOrganizationCollection: async (body: ExternalContentOrganizationJsonldExternalContentOrganizationWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postExternalContentOrganizationCollection.');
            }
            const localVarPath = `/mls-api/external-content-organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ExternalContentOrganization resource.
         * @summary Creates a ExternalContentOrganization resource.
         * @param {ExternalContentOrganizationJsonldExternalContentOrganizationWrite} body The new ExternalContentOrganization resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExternalContentOrganizationCollection: async (body: ExternalContentOrganizationJsonldExternalContentOrganizationWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postExternalContentOrganizationCollection.');
            }
            const localVarPath = `/mls-api/external-content-organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the ExternalContentOrganization resource.
         * @summary Replaces the ExternalContentOrganization resource.
         * @param {ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite} body The updated ExternalContentOrganization resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putExternalContentOrganizationItem: async (body: ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putExternalContentOrganizationItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putExternalContentOrganizationItem.');
            }
            const localVarPath = `/mls-api/external-content-organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the ExternalContentOrganization resource.
         * @summary Replaces the ExternalContentOrganization resource.
         * @param {ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite} body The updated ExternalContentOrganization resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putExternalContentOrganizationItem: async (body: ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putExternalContentOrganizationItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putExternalContentOrganizationItem.');
            }
            const localVarPath = `/mls-api/external-content-organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalContentOrganizationApi - functional programming interface
 * @export
 */
export const ExternalContentOrganizationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes the ExternalContentOrganization resource.
         * @summary Removes the ExternalContentOrganization resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExternalContentOrganizationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ExternalContentOrganizationApiAxiosParamCreator(configuration).deleteExternalContentOrganizationItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the collection of ExternalContentOrganization resources.
         * @summary Retrieves the collection of ExternalContentOrganization resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [externalContent] 
         * @param {Array<string>} [externalContent] 
         * @param {string} [externalContentLicenseModel] 
         * @param {Array<string>} [externalContentLicenseModel] 
         * @param {string} [externalContentSupplier] 
         * @param {Array<string>} [externalContentSupplier] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {boolean} [existsProjects] 
         * @param {boolean} [existsTasks] 
         * @param {boolean} [existsForms] 
         * @param {boolean} [existsElearnings] 
         * @param {boolean} [existsNoMlsContents] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalContentOrganizationCollection(page?: number, itemsPerPage?: number, pagination?: boolean, externalContent?: string, externalContent?: Array<string>, externalContentLicenseModel?: string, externalContentLicenseModel?: Array<string>, externalContentSupplier?: string, externalContentSupplier?: Array<string>, organization?: string, organization?: Array<string>, existsProjects?: boolean, existsTasks?: boolean, existsForms?: boolean, existsElearnings?: boolean, existsNoMlsContents?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20021>>> {
            const localVarAxiosArgs = await ExternalContentOrganizationApiAxiosParamCreator(configuration).getExternalContentOrganizationCollection(page, itemsPerPage, pagination, externalContent, externalContent, externalContentLicenseModel, externalContentLicenseModel, externalContentSupplier, externalContentSupplier, organization, organization, existsProjects, existsTasks, existsForms, existsElearnings, existsNoMlsContents, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a ExternalContentOrganization resource.
         * @summary Retrieves a ExternalContentOrganization resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalContentOrganizationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExternalContentOrganizationJsonldExternalContentOrganizationItemRead>>> {
            const localVarAxiosArgs = await ExternalContentOrganizationApiAxiosParamCreator(configuration).getExternalContentOrganizationItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a ExternalContentOrganization resource.
         * @summary Creates a ExternalContentOrganization resource.
         * @param {ExternalContentOrganizationJsonldExternalContentOrganizationWrite} body The new ExternalContentOrganization resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExternalContentOrganizationCollection(body: ExternalContentOrganizationJsonldExternalContentOrganizationWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExternalContentOrganizationJsonld>>> {
            const localVarAxiosArgs = await ExternalContentOrganizationApiAxiosParamCreator(configuration).postExternalContentOrganizationCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a ExternalContentOrganization resource.
         * @summary Creates a ExternalContentOrganization resource.
         * @param {ExternalContentOrganizationJsonldExternalContentOrganizationWrite} body The new ExternalContentOrganization resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExternalContentOrganizationCollection(body: ExternalContentOrganizationJsonldExternalContentOrganizationWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExternalContentOrganizationJsonld>>> {
            const localVarAxiosArgs = await ExternalContentOrganizationApiAxiosParamCreator(configuration).postExternalContentOrganizationCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the ExternalContentOrganization resource.
         * @summary Replaces the ExternalContentOrganization resource.
         * @param {ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite} body The updated ExternalContentOrganization resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putExternalContentOrganizationItem(body: ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExternalContentOrganizationJsonld>>> {
            const localVarAxiosArgs = await ExternalContentOrganizationApiAxiosParamCreator(configuration).putExternalContentOrganizationItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the ExternalContentOrganization resource.
         * @summary Replaces the ExternalContentOrganization resource.
         * @param {ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite} body The updated ExternalContentOrganization resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putExternalContentOrganizationItem(body: ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ExternalContentOrganizationJsonld>>> {
            const localVarAxiosArgs = await ExternalContentOrganizationApiAxiosParamCreator(configuration).putExternalContentOrganizationItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ExternalContentOrganizationApi - factory interface
 * @export
 */
export const ExternalContentOrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes the ExternalContentOrganization resource.
         * @summary Removes the ExternalContentOrganization resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExternalContentOrganizationItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ExternalContentOrganizationApiFp(configuration).deleteExternalContentOrganizationItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of ExternalContentOrganization resources.
         * @summary Retrieves the collection of ExternalContentOrganization resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [externalContent] 
         * @param {Array<string>} [externalContent] 
         * @param {string} [externalContentLicenseModel] 
         * @param {Array<string>} [externalContentLicenseModel] 
         * @param {string} [externalContentSupplier] 
         * @param {Array<string>} [externalContentSupplier] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {boolean} [existsProjects] 
         * @param {boolean} [existsTasks] 
         * @param {boolean} [existsForms] 
         * @param {boolean} [existsElearnings] 
         * @param {boolean} [existsNoMlsContents] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalContentOrganizationCollection(page?: number, itemsPerPage?: number, pagination?: boolean, externalContent?: string, externalContent?: Array<string>, externalContentLicenseModel?: string, externalContentLicenseModel?: Array<string>, externalContentSupplier?: string, externalContentSupplier?: Array<string>, organization?: string, organization?: Array<string>, existsProjects?: boolean, existsTasks?: boolean, existsForms?: boolean, existsElearnings?: boolean, existsNoMlsContents?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20021>> {
            return ExternalContentOrganizationApiFp(configuration).getExternalContentOrganizationCollection(page, itemsPerPage, pagination, externalContent, externalContent, externalContentLicenseModel, externalContentLicenseModel, externalContentSupplier, externalContentSupplier, organization, organization, existsProjects, existsTasks, existsForms, existsElearnings, existsNoMlsContents, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ExternalContentOrganization resource.
         * @summary Retrieves a ExternalContentOrganization resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalContentOrganizationItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ExternalContentOrganizationJsonldExternalContentOrganizationItemRead>> {
            return ExternalContentOrganizationApiFp(configuration).getExternalContentOrganizationItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ExternalContentOrganization resource.
         * @summary Creates a ExternalContentOrganization resource.
         * @param {ExternalContentOrganizationJsonldExternalContentOrganizationWrite} body The new ExternalContentOrganization resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExternalContentOrganizationCollection(body: ExternalContentOrganizationJsonldExternalContentOrganizationWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<ExternalContentOrganizationJsonld>> {
            return ExternalContentOrganizationApiFp(configuration).postExternalContentOrganizationCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ExternalContentOrganization resource.
         * @summary Creates a ExternalContentOrganization resource.
         * @param {ExternalContentOrganizationJsonldExternalContentOrganizationWrite} body The new ExternalContentOrganization resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExternalContentOrganizationCollection(body: ExternalContentOrganizationJsonldExternalContentOrganizationWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<ExternalContentOrganizationJsonld>> {
            return ExternalContentOrganizationApiFp(configuration).postExternalContentOrganizationCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the ExternalContentOrganization resource.
         * @summary Replaces the ExternalContentOrganization resource.
         * @param {ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite} body The updated ExternalContentOrganization resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putExternalContentOrganizationItem(body: ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ExternalContentOrganizationJsonld>> {
            return ExternalContentOrganizationApiFp(configuration).putExternalContentOrganizationItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the ExternalContentOrganization resource.
         * @summary Replaces the ExternalContentOrganization resource.
         * @param {ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite} body The updated ExternalContentOrganization resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putExternalContentOrganizationItem(body: ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ExternalContentOrganizationJsonld>> {
            return ExternalContentOrganizationApiFp(configuration).putExternalContentOrganizationItem(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExternalContentOrganizationApi - object-oriented interface
 * @export
 * @class ExternalContentOrganizationApi
 * @extends {BaseAPI}
 */
export class ExternalContentOrganizationApi extends BaseAPI {
    /**
     * Removes the ExternalContentOrganization resource.
     * @summary Removes the ExternalContentOrganization resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalContentOrganizationApi
     */
    public async deleteExternalContentOrganizationItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ExternalContentOrganizationApiFp(this.configuration).deleteExternalContentOrganizationItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the collection of ExternalContentOrganization resources.
     * @summary Retrieves the collection of ExternalContentOrganization resources.
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {boolean} [pagination] Enable or disable pagination
     * @param {string} [externalContent] 
     * @param {Array<string>} [externalContent] 
     * @param {string} [externalContentLicenseModel] 
     * @param {Array<string>} [externalContentLicenseModel] 
     * @param {string} [externalContentSupplier] 
     * @param {Array<string>} [externalContentSupplier] 
     * @param {string} [organization] 
     * @param {Array<string>} [organization] 
     * @param {boolean} [existsProjects] 
     * @param {boolean} [existsTasks] 
     * @param {boolean} [existsForms] 
     * @param {boolean} [existsElearnings] 
     * @param {boolean} [existsNoMlsContents] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalContentOrganizationApi
     */
    public async getExternalContentOrganizationCollection(page?: number, itemsPerPage?: number, pagination?: boolean, externalContent?: string, externalContent?: Array<string>, externalContentLicenseModel?: string, externalContentLicenseModel?: Array<string>, externalContentSupplier?: string, externalContentSupplier?: Array<string>, organization?: string, organization?: Array<string>, existsProjects?: boolean, existsTasks?: boolean, existsForms?: boolean, existsElearnings?: boolean, existsNoMlsContents?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20021>> {
        return ExternalContentOrganizationApiFp(this.configuration).getExternalContentOrganizationCollection(page, itemsPerPage, pagination, externalContent, externalContent, externalContentLicenseModel, externalContentLicenseModel, externalContentSupplier, externalContentSupplier, organization, organization, existsProjects, existsTasks, existsForms, existsElearnings, existsNoMlsContents, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a ExternalContentOrganization resource.
     * @summary Retrieves a ExternalContentOrganization resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalContentOrganizationApi
     */
    public async getExternalContentOrganizationItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExternalContentOrganizationJsonldExternalContentOrganizationItemRead>> {
        return ExternalContentOrganizationApiFp(this.configuration).getExternalContentOrganizationItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a ExternalContentOrganization resource.
     * @summary Creates a ExternalContentOrganization resource.
     * @param {ExternalContentOrganizationJsonldExternalContentOrganizationWrite} body The new ExternalContentOrganization resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalContentOrganizationApi
     */
    public async postExternalContentOrganizationCollection(body: ExternalContentOrganizationJsonldExternalContentOrganizationWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExternalContentOrganizationJsonld>> {
        return ExternalContentOrganizationApiFp(this.configuration).postExternalContentOrganizationCollection(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ExternalContentOrganization resource.
     * @summary Creates a ExternalContentOrganization resource.
     * @param {ExternalContentOrganizationJsonldExternalContentOrganizationWrite} body The new ExternalContentOrganization resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalContentOrganizationApi
     */
    public async postExternalContentOrganizationCollection(body: ExternalContentOrganizationJsonldExternalContentOrganizationWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExternalContentOrganizationJsonld>> {
        return ExternalContentOrganizationApiFp(this.configuration).postExternalContentOrganizationCollection(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the ExternalContentOrganization resource.
     * @summary Replaces the ExternalContentOrganization resource.
     * @param {ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite} body The updated ExternalContentOrganization resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalContentOrganizationApi
     */
    public async putExternalContentOrganizationItem(body: ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExternalContentOrganizationJsonld>> {
        return ExternalContentOrganizationApiFp(this.configuration).putExternalContentOrganizationItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the ExternalContentOrganization resource.
     * @summary Replaces the ExternalContentOrganization resource.
     * @param {ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite} body The updated ExternalContentOrganization resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalContentOrganizationApi
     */
    public async putExternalContentOrganizationItem(body: ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ExternalContentOrganizationJsonld>> {
        return ExternalContentOrganizationApiFp(this.configuration).putExternalContentOrganizationItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
