/* tslint:disable */
/* eslint-disable */
/**
 * MLS2 API
 * Central API
 *
 * OpenAPI spec version: 0.7.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DocumentsDocumentItemColumnWrite } from '../models';
import { DocumentsDocumentItemWrite } from '../models';
import { DocumentsJsonld } from '../models';
import { DocumentsJsonldDocumentItemColumnWrite } from '../models';
import { DocumentsJsonldDocumentItemReadFileReadFileResourceRead } from '../models';
import { DocumentsJsonldDocumentItemWrite } from '../models';
import { DocumentsJsonldDocumentWrite } from '../models';
import { InlineResponse2009 } from '../models';
/**
 * DocumentsApi - axios parameter creator
 * @export
 */
export const DocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Documents resource.
         * @summary Removes the Documents resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocumentsItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteDocumentsItem.');
            }
            const localVarPath = `/mls-api/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Documents resources.
         * @summary Retrieves the collection of Documents resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [parent] 
         * @param {Array<string>} [parent] 
         * @param {string} [owner] 
         * @param {Array<string>} [owner] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {string} [customFilename] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [sharedForGroups] 
         * @param {Array<string>} [sharedForGroups] 
         * @param {string} [sharedUsers] 
         * @param {Array<string>} [sharedUsers] 
         * @param {string} [documentGroupsOrUserFilter] 
         * @param {boolean} [existsParent] 
         * @param {boolean} [existsOrganization] 
         * @param {boolean} [isCommon] 
         * @param {boolean} [isGroup] 
         * @param {boolean} [isRestricted] 
         * @param {string} [fileResource] 
         * @param {Array<string>} [fileResource] 
         * @param {string} [fileResourceOriginalFilename] 
         * @param {string} [fileResourceMimeType] 
         * @param {Array<string>} [fileResourceMimeType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentsCollection: async (page?: number, itemsPerPage?: number, pagination?: boolean, parent?: string, parent?: Array<string>, owner?: string, owner?: Array<string>, organization?: string, organization?: Array<string>, customFilename?: string, mls1Id?: number, mls1Id?: Array<number>, sharedForGroups?: string, sharedForGroups?: Array<string>, sharedUsers?: string, sharedUsers?: Array<string>, documentGroupsOrUserFilter?: string, existsParent?: boolean, existsOrganization?: boolean, isCommon?: boolean, isGroup?: boolean, isRestricted?: boolean, fileResource?: string, fileResource?: Array<string>, fileResourceOriginalFilename?: string, fileResourceMimeType?: string, fileResourceMimeType?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mls-api/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (pagination !== undefined) {
                localVarQueryParameter['pagination'] = pagination;
            }

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (parent) {
                localVarQueryParameter['parent[]'] = parent;
            }

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (owner) {
                localVarQueryParameter['owner[]'] = owner;
            }

            if (organization !== undefined) {
                localVarQueryParameter['organization'] = organization;
            }

            if (organization) {
                localVarQueryParameter['organization[]'] = organization;
            }

            if (customFilename !== undefined) {
                localVarQueryParameter['customFilename'] = customFilename;
            }

            if (mls1Id !== undefined) {
                localVarQueryParameter['mls1Id'] = mls1Id;
            }

            if (mls1Id) {
                localVarQueryParameter['mls1Id[]'] = mls1Id;
            }

            if (sharedForGroups !== undefined) {
                localVarQueryParameter['sharedForGroups'] = sharedForGroups;
            }

            if (sharedForGroups) {
                localVarQueryParameter['sharedForGroups[]'] = sharedForGroups;
            }

            if (sharedUsers !== undefined) {
                localVarQueryParameter['sharedUsers'] = sharedUsers;
            }

            if (sharedUsers) {
                localVarQueryParameter['sharedUsers[]'] = sharedUsers;
            }

            if (documentGroupsOrUserFilter !== undefined) {
                localVarQueryParameter['documentGroupsOrUserFilter'] = documentGroupsOrUserFilter;
            }

            if (existsParent !== undefined) {
                localVarQueryParameter['exists[parent]'] = existsParent;
            }

            if (existsOrganization !== undefined) {
                localVarQueryParameter['exists[organization]'] = existsOrganization;
            }

            if (isCommon !== undefined) {
                localVarQueryParameter['isCommon'] = isCommon;
            }

            if (isGroup !== undefined) {
                localVarQueryParameter['isGroup'] = isGroup;
            }

            if (isRestricted !== undefined) {
                localVarQueryParameter['isRestricted'] = isRestricted;
            }

            if (fileResource !== undefined) {
                localVarQueryParameter['fileResource'] = fileResource;
            }

            if (fileResource) {
                localVarQueryParameter['fileResource[]'] = fileResource;
            }

            if (fileResourceOriginalFilename !== undefined) {
                localVarQueryParameter['fileResource.originalFilename'] = fileResourceOriginalFilename;
            }

            if (fileResourceMimeType !== undefined) {
                localVarQueryParameter['fileResource.mimeType'] = fileResourceMimeType;
            }

            if (fileResourceMimeType) {
                localVarQueryParameter['fileResource.mimeType[]'] = fileResourceMimeType;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Documents resource.
         * @summary Retrieves a Documents resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentsItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDocumentsItem.');
            }
            const localVarPath = `/mls-api/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Documents resource.
         * @summary Creates a Documents resource.
         * @param {number} [parent] 
         * @param {Blob} [files] 
         * @param {number} [feedback] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateFileDocumentsCollectionForm: async (parent?: number, files?: Blob, feedback?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mls-api/filemanager/create_file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


            if (parent !== undefined) { 
                localVarFormParams.append('parent', parent as any);
            }

            if (files !== undefined) { 
                localVarFormParams.append('files', files as any);
            }

            if (feedback !== undefined) { 
                localVarFormParams.append('feedback', feedback as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Documents resource.
         * @summary Replaces the Documents resource.
         * @param {DocumentsJsonldDocumentItemColumnWrite} body The updated Documents resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDocumentsItem: async (body: DocumentsJsonldDocumentItemColumnWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putDocumentsItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putDocumentsItem.');
            }
            const localVarPath = `/mls-api/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Documents resource.
         * @summary Replaces the Documents resource.
         * @param {DocumentsJsonldDocumentItemColumnWrite} body The updated Documents resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDocumentsItem: async (body: DocumentsJsonldDocumentItemColumnWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putDocumentsItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putDocumentsItem.');
            }
            const localVarPath = `/mls-api/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Documents resource.
         * @summary Creates a Documents resource.
         * @param {string} id Resource identifier
         * @param {Blob} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putReplaceResourceDocumentsItemForm: async (id: string, files?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putReplaceResourceDocumentsItemForm.');
            }
            const localVarPath = `/mls-api/filemanager/replace_resource/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


            if (files !== undefined) { 
                localVarFormParams.append('files', files as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Documents resource.
         * @summary Replaces the Documents resource.
         * @param {DocumentsJsonldDocumentItemWrite} body The updated Documents resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateFileDocumentsItem: async (body: DocumentsJsonldDocumentItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putUpdateFileDocumentsItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putUpdateFileDocumentsItem.');
            }
            const localVarPath = `/mls-api/filemanager/update_file/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Documents resource.
         * @summary Replaces the Documents resource.
         * @param {DocumentsJsonldDocumentItemWrite} body The updated Documents resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateFileDocumentsItem: async (body: DocumentsJsonldDocumentItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putUpdateFileDocumentsItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putUpdateFileDocumentsItem.');
            }
            const localVarPath = `/mls-api/filemanager/update_file/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentsApi - functional programming interface
 * @export
 */
export const DocumentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes the Documents resource.
         * @summary Removes the Documents resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDocumentsItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).deleteDocumentsItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the collection of Documents resources.
         * @summary Retrieves the collection of Documents resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [parent] 
         * @param {Array<string>} [parent] 
         * @param {string} [owner] 
         * @param {Array<string>} [owner] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {string} [customFilename] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [sharedForGroups] 
         * @param {Array<string>} [sharedForGroups] 
         * @param {string} [sharedUsers] 
         * @param {Array<string>} [sharedUsers] 
         * @param {string} [documentGroupsOrUserFilter] 
         * @param {boolean} [existsParent] 
         * @param {boolean} [existsOrganization] 
         * @param {boolean} [isCommon] 
         * @param {boolean} [isGroup] 
         * @param {boolean} [isRestricted] 
         * @param {string} [fileResource] 
         * @param {Array<string>} [fileResource] 
         * @param {string} [fileResourceOriginalFilename] 
         * @param {string} [fileResourceMimeType] 
         * @param {Array<string>} [fileResourceMimeType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentsCollection(page?: number, itemsPerPage?: number, pagination?: boolean, parent?: string, parent?: Array<string>, owner?: string, owner?: Array<string>, organization?: string, organization?: Array<string>, customFilename?: string, mls1Id?: number, mls1Id?: Array<number>, sharedForGroups?: string, sharedForGroups?: Array<string>, sharedUsers?: string, sharedUsers?: Array<string>, documentGroupsOrUserFilter?: string, existsParent?: boolean, existsOrganization?: boolean, isCommon?: boolean, isGroup?: boolean, isRestricted?: boolean, fileResource?: string, fileResource?: Array<string>, fileResourceOriginalFilename?: string, fileResourceMimeType?: string, fileResourceMimeType?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2009>>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).getDocumentsCollection(page, itemsPerPage, pagination, parent, parent, owner, owner, organization, organization, customFilename, mls1Id, mls1Id, sharedForGroups, sharedForGroups, sharedUsers, sharedUsers, documentGroupsOrUserFilter, existsParent, existsOrganization, isCommon, isGroup, isRestricted, fileResource, fileResource, fileResourceOriginalFilename, fileResourceMimeType, fileResourceMimeType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a Documents resource.
         * @summary Retrieves a Documents resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentsItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DocumentsJsonldDocumentItemReadFileReadFileResourceRead>>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).getDocumentsItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Documents resource.
         * @summary Creates a Documents resource.
         * @param {number} [parent] 
         * @param {Blob} [files] 
         * @param {number} [feedback] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateFileDocumentsCollectionForm(parent?: number, files?: Blob, feedback?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DocumentsJsonldDocumentWrite>>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).postCreateFileDocumentsCollectionForm(parent, files, feedback, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Documents resource.
         * @summary Replaces the Documents resource.
         * @param {DocumentsJsonldDocumentItemColumnWrite} body The updated Documents resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDocumentsItem(body: DocumentsJsonldDocumentItemColumnWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DocumentsJsonld>>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).putDocumentsItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Documents resource.
         * @summary Replaces the Documents resource.
         * @param {DocumentsJsonldDocumentItemColumnWrite} body The updated Documents resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDocumentsItem(body: DocumentsJsonldDocumentItemColumnWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DocumentsJsonld>>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).putDocumentsItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Documents resource.
         * @summary Creates a Documents resource.
         * @param {string} id Resource identifier
         * @param {Blob} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putReplaceResourceDocumentsItemForm(id: string, files?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DocumentsJsonld>>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).putReplaceResourceDocumentsItemForm(id, files, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Documents resource.
         * @summary Replaces the Documents resource.
         * @param {DocumentsJsonldDocumentItemWrite} body The updated Documents resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUpdateFileDocumentsItem(body: DocumentsJsonldDocumentItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DocumentsJsonld>>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).putUpdateFileDocumentsItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the Documents resource.
         * @summary Replaces the Documents resource.
         * @param {DocumentsJsonldDocumentItemWrite} body The updated Documents resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUpdateFileDocumentsItem(body: DocumentsJsonldDocumentItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DocumentsJsonld>>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).putUpdateFileDocumentsItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DocumentsApi - factory interface
 * @export
 */
export const DocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes the Documents resource.
         * @summary Removes the Documents resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDocumentsItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DocumentsApiFp(configuration).deleteDocumentsItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Documents resources.
         * @summary Retrieves the collection of Documents resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {string} [parent] 
         * @param {Array<string>} [parent] 
         * @param {string} [owner] 
         * @param {Array<string>} [owner] 
         * @param {string} [organization] 
         * @param {Array<string>} [organization] 
         * @param {string} [customFilename] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [sharedForGroups] 
         * @param {Array<string>} [sharedForGroups] 
         * @param {string} [sharedUsers] 
         * @param {Array<string>} [sharedUsers] 
         * @param {string} [documentGroupsOrUserFilter] 
         * @param {boolean} [existsParent] 
         * @param {boolean} [existsOrganization] 
         * @param {boolean} [isCommon] 
         * @param {boolean} [isGroup] 
         * @param {boolean} [isRestricted] 
         * @param {string} [fileResource] 
         * @param {Array<string>} [fileResource] 
         * @param {string} [fileResourceOriginalFilename] 
         * @param {string} [fileResourceMimeType] 
         * @param {Array<string>} [fileResourceMimeType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentsCollection(page?: number, itemsPerPage?: number, pagination?: boolean, parent?: string, parent?: Array<string>, owner?: string, owner?: Array<string>, organization?: string, organization?: Array<string>, customFilename?: string, mls1Id?: number, mls1Id?: Array<number>, sharedForGroups?: string, sharedForGroups?: Array<string>, sharedUsers?: string, sharedUsers?: Array<string>, documentGroupsOrUserFilter?: string, existsParent?: boolean, existsOrganization?: boolean, isCommon?: boolean, isGroup?: boolean, isRestricted?: boolean, fileResource?: string, fileResource?: Array<string>, fileResourceOriginalFilename?: string, fileResourceMimeType?: string, fileResourceMimeType?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2009>> {
            return DocumentsApiFp(configuration).getDocumentsCollection(page, itemsPerPage, pagination, parent, parent, owner, owner, organization, organization, customFilename, mls1Id, mls1Id, sharedForGroups, sharedForGroups, sharedUsers, sharedUsers, documentGroupsOrUserFilter, existsParent, existsOrganization, isCommon, isGroup, isRestricted, fileResource, fileResource, fileResourceOriginalFilename, fileResourceMimeType, fileResourceMimeType, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Documents resource.
         * @summary Retrieves a Documents resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentsItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DocumentsJsonldDocumentItemReadFileReadFileResourceRead>> {
            return DocumentsApiFp(configuration).getDocumentsItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Documents resource.
         * @summary Creates a Documents resource.
         * @param {number} [parent] 
         * @param {Blob} [files] 
         * @param {number} [feedback] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateFileDocumentsCollectionForm(parent?: number, files?: Blob, feedback?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<DocumentsJsonldDocumentWrite>> {
            return DocumentsApiFp(configuration).postCreateFileDocumentsCollectionForm(parent, files, feedback, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Documents resource.
         * @summary Replaces the Documents resource.
         * @param {DocumentsJsonldDocumentItemColumnWrite} body The updated Documents resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDocumentsItem(body: DocumentsJsonldDocumentItemColumnWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DocumentsJsonld>> {
            return DocumentsApiFp(configuration).putDocumentsItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Documents resource.
         * @summary Replaces the Documents resource.
         * @param {DocumentsJsonldDocumentItemColumnWrite} body The updated Documents resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDocumentsItem(body: DocumentsJsonldDocumentItemColumnWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DocumentsJsonld>> {
            return DocumentsApiFp(configuration).putDocumentsItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Documents resource.
         * @summary Creates a Documents resource.
         * @param {string} id Resource identifier
         * @param {Blob} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putReplaceResourceDocumentsItemForm(id: string, files?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<DocumentsJsonld>> {
            return DocumentsApiFp(configuration).putReplaceResourceDocumentsItemForm(id, files, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Documents resource.
         * @summary Replaces the Documents resource.
         * @param {DocumentsJsonldDocumentItemWrite} body The updated Documents resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUpdateFileDocumentsItem(body: DocumentsJsonldDocumentItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DocumentsJsonld>> {
            return DocumentsApiFp(configuration).putUpdateFileDocumentsItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Documents resource.
         * @summary Replaces the Documents resource.
         * @param {DocumentsJsonldDocumentItemWrite} body The updated Documents resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUpdateFileDocumentsItem(body: DocumentsJsonldDocumentItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DocumentsJsonld>> {
            return DocumentsApiFp(configuration).putUpdateFileDocumentsItem(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentsApi - object-oriented interface
 * @export
 * @class DocumentsApi
 * @extends {BaseAPI}
 */
export class DocumentsApi extends BaseAPI {
    /**
     * Removes the Documents resource.
     * @summary Removes the Documents resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public async deleteDocumentsItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DocumentsApiFp(this.configuration).deleteDocumentsItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the collection of Documents resources.
     * @summary Retrieves the collection of Documents resources.
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {boolean} [pagination] Enable or disable pagination
     * @param {string} [parent] 
     * @param {Array<string>} [parent] 
     * @param {string} [owner] 
     * @param {Array<string>} [owner] 
     * @param {string} [organization] 
     * @param {Array<string>} [organization] 
     * @param {string} [customFilename] 
     * @param {number} [mls1Id] 
     * @param {Array<number>} [mls1Id] 
     * @param {string} [sharedForGroups] 
     * @param {Array<string>} [sharedForGroups] 
     * @param {string} [sharedUsers] 
     * @param {Array<string>} [sharedUsers] 
     * @param {string} [documentGroupsOrUserFilter] 
     * @param {boolean} [existsParent] 
     * @param {boolean} [existsOrganization] 
     * @param {boolean} [isCommon] 
     * @param {boolean} [isGroup] 
     * @param {boolean} [isRestricted] 
     * @param {string} [fileResource] 
     * @param {Array<string>} [fileResource] 
     * @param {string} [fileResourceOriginalFilename] 
     * @param {string} [fileResourceMimeType] 
     * @param {Array<string>} [fileResourceMimeType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public async getDocumentsCollection(page?: number, itemsPerPage?: number, pagination?: boolean, parent?: string, parent?: Array<string>, owner?: string, owner?: Array<string>, organization?: string, organization?: Array<string>, customFilename?: string, mls1Id?: number, mls1Id?: Array<number>, sharedForGroups?: string, sharedForGroups?: Array<string>, sharedUsers?: string, sharedUsers?: Array<string>, documentGroupsOrUserFilter?: string, existsParent?: boolean, existsOrganization?: boolean, isCommon?: boolean, isGroup?: boolean, isRestricted?: boolean, fileResource?: string, fileResource?: Array<string>, fileResourceOriginalFilename?: string, fileResourceMimeType?: string, fileResourceMimeType?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2009>> {
        return DocumentsApiFp(this.configuration).getDocumentsCollection(page, itemsPerPage, pagination, parent, parent, owner, owner, organization, organization, customFilename, mls1Id, mls1Id, sharedForGroups, sharedForGroups, sharedUsers, sharedUsers, documentGroupsOrUserFilter, existsParent, existsOrganization, isCommon, isGroup, isRestricted, fileResource, fileResource, fileResourceOriginalFilename, fileResourceMimeType, fileResourceMimeType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a Documents resource.
     * @summary Retrieves a Documents resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public async getDocumentsItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DocumentsJsonldDocumentItemReadFileReadFileResourceRead>> {
        return DocumentsApiFp(this.configuration).getDocumentsItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a Documents resource.
     * @summary Creates a Documents resource.
     * @param {number} [parent] 
     * @param {Blob} [files] 
     * @param {number} [feedback] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public async postCreateFileDocumentsCollectionForm(parent?: number, files?: Blob, feedback?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<DocumentsJsonldDocumentWrite>> {
        return DocumentsApiFp(this.configuration).postCreateFileDocumentsCollectionForm(parent, files, feedback, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the Documents resource.
     * @summary Replaces the Documents resource.
     * @param {DocumentsJsonldDocumentItemColumnWrite} body The updated Documents resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public async putDocumentsItem(body: DocumentsJsonldDocumentItemColumnWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DocumentsJsonld>> {
        return DocumentsApiFp(this.configuration).putDocumentsItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Documents resource.
     * @summary Replaces the Documents resource.
     * @param {DocumentsJsonldDocumentItemColumnWrite} body The updated Documents resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public async putDocumentsItem(body: DocumentsJsonldDocumentItemColumnWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DocumentsJsonld>> {
        return DocumentsApiFp(this.configuration).putDocumentsItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a Documents resource.
     * @summary Creates a Documents resource.
     * @param {string} id Resource identifier
     * @param {Blob} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public async putReplaceResourceDocumentsItemForm(id: string, files?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<DocumentsJsonld>> {
        return DocumentsApiFp(this.configuration).putReplaceResourceDocumentsItemForm(id, files, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the Documents resource.
     * @summary Replaces the Documents resource.
     * @param {DocumentsJsonldDocumentItemWrite} body The updated Documents resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public async putUpdateFileDocumentsItem(body: DocumentsJsonldDocumentItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DocumentsJsonld>> {
        return DocumentsApiFp(this.configuration).putUpdateFileDocumentsItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Documents resource.
     * @summary Replaces the Documents resource.
     * @param {DocumentsJsonldDocumentItemWrite} body The updated Documents resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public async putUpdateFileDocumentsItem(body: DocumentsJsonldDocumentItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DocumentsJsonld>> {
        return DocumentsApiFp(this.configuration).putUpdateFileDocumentsItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
