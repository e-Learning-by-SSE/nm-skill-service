/* tslint:disable */
/* eslint-disable */
/**
 * MLS2 API
 * Central API
 *
 * OpenAPI spec version: 0.7.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20083 } from '../models';
import { UserJsonld } from '../models';
import { UserJsonldUserItemRead } from '../models';
import { UserJsonldUserItemWrite } from '../models';
import { UserJsonldUserWrite } from '../models';
import { UserUserItemWrite } from '../models';
import { UserUserWrite } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the User resource.
         * @summary Removes the User resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUserItem.');
            }
            const localVarPath = `/mls-api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of User resources.
         * @summary Retrieves the collection of User resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {string} [organizations] 
         * @param {Array<string>} [organizations] 
         * @param {string} [organizationsName] 
         * @param {string} [email] 
         * @param {string} [roles] 
         * @param {string} [username] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {string} [tasksTodo] 
         * @param {Array<string>} [tasksTodo] 
         * @param {string} [tasksTodoTaskTitle] 
         * @param {string} [tasksTodoTask] 
         * @param {Array<string>} [tasksTodoTask] 
         * @param {string} [tasksTodoTaskTodoInfoStatus] 
         * @param {Array<string>} [tasksTodoTaskTodoInfoStatus] 
         * @param {string} [purchasedExternalContentExternalContentOrganization] 
         * @param {Array<string>} [purchasedExternalContentExternalContentOrganization] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [groups] 
         * @param {Array<string>} [groups] 
         * @param {string} [chats] 
         * @param {Array<string>} [chats] 
         * @param {string} [externalEuropathekBooks] 
         * @param {Array<string>} [externalEuropathekBooks] 
         * @param {string} [sharedDirectories] 
         * @param {Array<string>} [sharedDirectories] 
         * @param {string} [sharedDocuments] 
         * @param {Array<string>} [sharedDocuments] 
         * @param {string} [userNameOrFilter] 
         * @param {string} [todoOrFilter] 
         * @param {string} [userTodoAssignedGroupFilter] 
         * @param {boolean} [state] 
         * @param {boolean} [tasksTodoArchived] 
         * @param {string} [orderLastname] 
         * @param {string} [orderTasksTodoTaskTitle] 
         * @param {boolean} [existsTasksTodo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCollection: async (page?: number, itemsPerPage?: number, pagination?: boolean, id?: number, id?: Array<number>, organizations?: string, organizations?: Array<string>, organizationsName?: string, email?: string, roles?: string, username?: string, firstname?: string, lastname?: string, tasksTodo?: string, tasksTodo?: Array<string>, tasksTodoTaskTitle?: string, tasksTodoTask?: string, tasksTodoTask?: Array<string>, tasksTodoTaskTodoInfoStatus?: string, tasksTodoTaskTodoInfoStatus?: Array<string>, purchasedExternalContentExternalContentOrganization?: string, purchasedExternalContentExternalContentOrganization?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, groups?: string, groups?: Array<string>, chats?: string, chats?: Array<string>, externalEuropathekBooks?: string, externalEuropathekBooks?: Array<string>, sharedDirectories?: string, sharedDirectories?: Array<string>, sharedDocuments?: string, sharedDocuments?: Array<string>, userNameOrFilter?: string, todoOrFilter?: string, userTodoAssignedGroupFilter?: string, state?: boolean, tasksTodoArchived?: boolean, orderLastname?: string, orderTasksTodoTaskTitle?: string, existsTasksTodo?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mls-api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (pagination !== undefined) {
                localVarQueryParameter['pagination'] = pagination;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (organizations !== undefined) {
                localVarQueryParameter['organizations'] = organizations;
            }

            if (organizations) {
                localVarQueryParameter['organizations[]'] = organizations;
            }

            if (organizationsName !== undefined) {
                localVarQueryParameter['organizations.name'] = organizationsName;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (roles !== undefined) {
                localVarQueryParameter['roles'] = roles;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (firstname !== undefined) {
                localVarQueryParameter['firstname'] = firstname;
            }

            if (lastname !== undefined) {
                localVarQueryParameter['lastname'] = lastname;
            }

            if (tasksTodo !== undefined) {
                localVarQueryParameter['tasksTodo'] = tasksTodo;
            }

            if (tasksTodo) {
                localVarQueryParameter['tasksTodo[]'] = tasksTodo;
            }

            if (tasksTodoTaskTitle !== undefined) {
                localVarQueryParameter['tasksTodo.task.title'] = tasksTodoTaskTitle;
            }

            if (tasksTodoTask !== undefined) {
                localVarQueryParameter['tasksTodo.task'] = tasksTodoTask;
            }

            if (tasksTodoTask) {
                localVarQueryParameter['tasksTodo.task[]'] = tasksTodoTask;
            }

            if (tasksTodoTaskTodoInfoStatus !== undefined) {
                localVarQueryParameter['tasksTodo.taskTodoInfo.status'] = tasksTodoTaskTodoInfoStatus;
            }

            if (tasksTodoTaskTodoInfoStatus) {
                localVarQueryParameter['tasksTodo.taskTodoInfo.status[]'] = tasksTodoTaskTodoInfoStatus;
            }

            if (purchasedExternalContentExternalContentOrganization !== undefined) {
                localVarQueryParameter['purchasedExternalContent.externalContentOrganization'] = purchasedExternalContentExternalContentOrganization;
            }

            if (purchasedExternalContentExternalContentOrganization) {
                localVarQueryParameter['purchasedExternalContent.externalContentOrganization[]'] = purchasedExternalContentExternalContentOrganization;
            }

            if (mls1Id !== undefined) {
                localVarQueryParameter['mls1Id'] = mls1Id;
            }

            if (mls1Id) {
                localVarQueryParameter['mls1Id[]'] = mls1Id;
            }

            if (groups !== undefined) {
                localVarQueryParameter['groups'] = groups;
            }

            if (groups) {
                localVarQueryParameter['groups[]'] = groups;
            }

            if (chats !== undefined) {
                localVarQueryParameter['chats'] = chats;
            }

            if (chats) {
                localVarQueryParameter['chats[]'] = chats;
            }

            if (externalEuropathekBooks !== undefined) {
                localVarQueryParameter['externalEuropathekBooks'] = externalEuropathekBooks;
            }

            if (externalEuropathekBooks) {
                localVarQueryParameter['externalEuropathekBooks[]'] = externalEuropathekBooks;
            }

            if (sharedDirectories !== undefined) {
                localVarQueryParameter['sharedDirectories'] = sharedDirectories;
            }

            if (sharedDirectories) {
                localVarQueryParameter['sharedDirectories[]'] = sharedDirectories;
            }

            if (sharedDocuments !== undefined) {
                localVarQueryParameter['sharedDocuments'] = sharedDocuments;
            }

            if (sharedDocuments) {
                localVarQueryParameter['sharedDocuments[]'] = sharedDocuments;
            }

            if (userNameOrFilter !== undefined) {
                localVarQueryParameter['userNameOrFilter'] = userNameOrFilter;
            }

            if (todoOrFilter !== undefined) {
                localVarQueryParameter['todoOrFilter'] = todoOrFilter;
            }

            if (userTodoAssignedGroupFilter !== undefined) {
                localVarQueryParameter['userTodoAssignedGroupFilter'] = userTodoAssignedGroupFilter;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (tasksTodoArchived !== undefined) {
                localVarQueryParameter['tasksTodo.archived'] = tasksTodoArchived;
            }

            if (orderLastname !== undefined) {
                localVarQueryParameter['order[lastname]'] = orderLastname;
            }

            if (orderTasksTodoTaskTitle !== undefined) {
                localVarQueryParameter['order[tasksTodo.task.title]'] = orderTasksTodoTaskTitle;
            }

            if (existsTasksTodo !== undefined) {
                localVarQueryParameter['exists[tasksTodo]'] = existsTasksTodo;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a User resource.
         * @summary Retrieves a User resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserItem.');
            }
            const localVarPath = `/mls-api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary Creates a User resource.
         * @param {UserJsonldUserWrite} body The new User resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserCollection: async (body: UserJsonldUserWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postUserCollection.');
            }
            const localVarPath = `/mls-api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary Creates a User resource.
         * @param {UserJsonldUserWrite} body The new User resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserCollection: async (body: UserJsonldUserWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postUserCollection.');
            }
            const localVarPath = `/mls-api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the User resource.
         * @summary Replaces the User resource.
         * @param {UserJsonldUserItemWrite} body The updated User resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserItem: async (body: UserJsonldUserItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putUserItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putUserItem.');
            }
            const localVarPath = `/mls-api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the User resource.
         * @summary Replaces the User resource.
         * @param {UserJsonldUserItemWrite} body The updated User resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserItem: async (body: UserJsonldUserItemWrite, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putUserItem.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putUserItem.');
            }
            const localVarPath = `/mls-api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes the User resource.
         * @summary Removes the User resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).deleteUserItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the collection of User resources.
         * @summary Retrieves the collection of User resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {string} [organizations] 
         * @param {Array<string>} [organizations] 
         * @param {string} [organizationsName] 
         * @param {string} [email] 
         * @param {string} [roles] 
         * @param {string} [username] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {string} [tasksTodo] 
         * @param {Array<string>} [tasksTodo] 
         * @param {string} [tasksTodoTaskTitle] 
         * @param {string} [tasksTodoTask] 
         * @param {Array<string>} [tasksTodoTask] 
         * @param {string} [tasksTodoTaskTodoInfoStatus] 
         * @param {Array<string>} [tasksTodoTaskTodoInfoStatus] 
         * @param {string} [purchasedExternalContentExternalContentOrganization] 
         * @param {Array<string>} [purchasedExternalContentExternalContentOrganization] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [groups] 
         * @param {Array<string>} [groups] 
         * @param {string} [chats] 
         * @param {Array<string>} [chats] 
         * @param {string} [externalEuropathekBooks] 
         * @param {Array<string>} [externalEuropathekBooks] 
         * @param {string} [sharedDirectories] 
         * @param {Array<string>} [sharedDirectories] 
         * @param {string} [sharedDocuments] 
         * @param {Array<string>} [sharedDocuments] 
         * @param {string} [userNameOrFilter] 
         * @param {string} [todoOrFilter] 
         * @param {string} [userTodoAssignedGroupFilter] 
         * @param {boolean} [state] 
         * @param {boolean} [tasksTodoArchived] 
         * @param {string} [orderLastname] 
         * @param {string} [orderTasksTodoTaskTitle] 
         * @param {boolean} [existsTasksTodo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCollection(page?: number, itemsPerPage?: number, pagination?: boolean, id?: number, id?: Array<number>, organizations?: string, organizations?: Array<string>, organizationsName?: string, email?: string, roles?: string, username?: string, firstname?: string, lastname?: string, tasksTodo?: string, tasksTodo?: Array<string>, tasksTodoTaskTitle?: string, tasksTodoTask?: string, tasksTodoTask?: Array<string>, tasksTodoTaskTodoInfoStatus?: string, tasksTodoTaskTodoInfoStatus?: Array<string>, purchasedExternalContentExternalContentOrganization?: string, purchasedExternalContentExternalContentOrganization?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, groups?: string, groups?: Array<string>, chats?: string, chats?: Array<string>, externalEuropathekBooks?: string, externalEuropathekBooks?: Array<string>, sharedDirectories?: string, sharedDirectories?: Array<string>, sharedDocuments?: string, sharedDocuments?: Array<string>, userNameOrFilter?: string, todoOrFilter?: string, userTodoAssignedGroupFilter?: string, state?: boolean, tasksTodoArchived?: boolean, orderLastname?: string, orderTasksTodoTaskTitle?: string, existsTasksTodo?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20083>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getUserCollection(page, itemsPerPage, pagination, id, id, organizations, organizations, organizationsName, email, roles, username, firstname, lastname, tasksTodo, tasksTodo, tasksTodoTaskTitle, tasksTodoTask, tasksTodoTask, tasksTodoTaskTodoInfoStatus, tasksTodoTaskTodoInfoStatus, purchasedExternalContentExternalContentOrganization, purchasedExternalContentExternalContentOrganization, mls1Id, mls1Id, groups, groups, chats, chats, externalEuropathekBooks, externalEuropathekBooks, sharedDirectories, sharedDirectories, sharedDocuments, sharedDocuments, userNameOrFilter, todoOrFilter, userTodoAssignedGroupFilter, state, tasksTodoArchived, orderLastname, orderTasksTodoTaskTitle, existsTasksTodo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a User resource.
         * @summary Retrieves a User resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserJsonldUserItemRead>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getUserItem(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a User resource.
         * @summary Creates a User resource.
         * @param {UserJsonldUserWrite} body The new User resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserCollection(body: UserJsonldUserWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserJsonld>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).postUserCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a User resource.
         * @summary Creates a User resource.
         * @param {UserJsonldUserWrite} body The new User resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserCollection(body: UserJsonldUserWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserJsonld>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).postUserCollection(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the User resource.
         * @summary Replaces the User resource.
         * @param {UserJsonldUserItemWrite} body The updated User resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserItem(body: UserJsonldUserItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserJsonld>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).putUserItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the User resource.
         * @summary Replaces the User resource.
         * @param {UserJsonldUserItemWrite} body The updated User resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserItem(body: UserJsonldUserItemWrite, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserJsonld>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).putUserItem(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes the User resource.
         * @summary Removes the User resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return UserApiFp(configuration).deleteUserItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of User resources.
         * @summary Retrieves the collection of User resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [pagination] Enable or disable pagination
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {string} [organizations] 
         * @param {Array<string>} [organizations] 
         * @param {string} [organizationsName] 
         * @param {string} [email] 
         * @param {string} [roles] 
         * @param {string} [username] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {string} [tasksTodo] 
         * @param {Array<string>} [tasksTodo] 
         * @param {string} [tasksTodoTaskTitle] 
         * @param {string} [tasksTodoTask] 
         * @param {Array<string>} [tasksTodoTask] 
         * @param {string} [tasksTodoTaskTodoInfoStatus] 
         * @param {Array<string>} [tasksTodoTaskTodoInfoStatus] 
         * @param {string} [purchasedExternalContentExternalContentOrganization] 
         * @param {Array<string>} [purchasedExternalContentExternalContentOrganization] 
         * @param {number} [mls1Id] 
         * @param {Array<number>} [mls1Id] 
         * @param {string} [groups] 
         * @param {Array<string>} [groups] 
         * @param {string} [chats] 
         * @param {Array<string>} [chats] 
         * @param {string} [externalEuropathekBooks] 
         * @param {Array<string>} [externalEuropathekBooks] 
         * @param {string} [sharedDirectories] 
         * @param {Array<string>} [sharedDirectories] 
         * @param {string} [sharedDocuments] 
         * @param {Array<string>} [sharedDocuments] 
         * @param {string} [userNameOrFilter] 
         * @param {string} [todoOrFilter] 
         * @param {string} [userTodoAssignedGroupFilter] 
         * @param {boolean} [state] 
         * @param {boolean} [tasksTodoArchived] 
         * @param {string} [orderLastname] 
         * @param {string} [orderTasksTodoTaskTitle] 
         * @param {boolean} [existsTasksTodo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCollection(page?: number, itemsPerPage?: number, pagination?: boolean, id?: number, id?: Array<number>, organizations?: string, organizations?: Array<string>, organizationsName?: string, email?: string, roles?: string, username?: string, firstname?: string, lastname?: string, tasksTodo?: string, tasksTodo?: Array<string>, tasksTodoTaskTitle?: string, tasksTodoTask?: string, tasksTodoTask?: Array<string>, tasksTodoTaskTodoInfoStatus?: string, tasksTodoTaskTodoInfoStatus?: Array<string>, purchasedExternalContentExternalContentOrganization?: string, purchasedExternalContentExternalContentOrganization?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, groups?: string, groups?: Array<string>, chats?: string, chats?: Array<string>, externalEuropathekBooks?: string, externalEuropathekBooks?: Array<string>, sharedDirectories?: string, sharedDirectories?: Array<string>, sharedDocuments?: string, sharedDocuments?: Array<string>, userNameOrFilter?: string, todoOrFilter?: string, userTodoAssignedGroupFilter?: string, state?: boolean, tasksTodoArchived?: boolean, orderLastname?: string, orderTasksTodoTaskTitle?: string, existsTasksTodo?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20083>> {
            return UserApiFp(configuration).getUserCollection(page, itemsPerPage, pagination, id, id, organizations, organizations, organizationsName, email, roles, username, firstname, lastname, tasksTodo, tasksTodo, tasksTodoTaskTitle, tasksTodoTask, tasksTodoTask, tasksTodoTaskTodoInfoStatus, tasksTodoTaskTodoInfoStatus, purchasedExternalContentExternalContentOrganization, purchasedExternalContentExternalContentOrganization, mls1Id, mls1Id, groups, groups, chats, chats, externalEuropathekBooks, externalEuropathekBooks, sharedDirectories, sharedDirectories, sharedDocuments, sharedDocuments, userNameOrFilter, todoOrFilter, userTodoAssignedGroupFilter, state, tasksTodoArchived, orderLastname, orderTasksTodoTaskTitle, existsTasksTodo, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a User resource.
         * @summary Retrieves a User resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserItem(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserJsonldUserItemRead>> {
            return UserApiFp(configuration).getUserItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary Creates a User resource.
         * @param {UserJsonldUserWrite} body The new User resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserCollection(body: UserJsonldUserWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<UserJsonld>> {
            return UserApiFp(configuration).postUserCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary Creates a User resource.
         * @param {UserJsonldUserWrite} body The new User resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserCollection(body: UserJsonldUserWrite, options?: AxiosRequestConfig): Promise<AxiosResponse<UserJsonld>> {
            return UserApiFp(configuration).postUserCollection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the User resource.
         * @summary Replaces the User resource.
         * @param {UserJsonldUserItemWrite} body The updated User resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserItem(body: UserJsonldUserItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserJsonld>> {
            return UserApiFp(configuration).putUserItem(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the User resource.
         * @summary Replaces the User resource.
         * @param {UserJsonldUserItemWrite} body The updated User resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserItem(body: UserJsonldUserItemWrite, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserJsonld>> {
            return UserApiFp(configuration).putUserItem(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Removes the User resource.
     * @summary Removes the User resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async deleteUserItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return UserApiFp(this.configuration).deleteUserItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the collection of User resources.
     * @summary Retrieves the collection of User resources.
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {boolean} [pagination] Enable or disable pagination
     * @param {number} [id] 
     * @param {Array<number>} [id] 
     * @param {string} [organizations] 
     * @param {Array<string>} [organizations] 
     * @param {string} [organizationsName] 
     * @param {string} [email] 
     * @param {string} [roles] 
     * @param {string} [username] 
     * @param {string} [firstname] 
     * @param {string} [lastname] 
     * @param {string} [tasksTodo] 
     * @param {Array<string>} [tasksTodo] 
     * @param {string} [tasksTodoTaskTitle] 
     * @param {string} [tasksTodoTask] 
     * @param {Array<string>} [tasksTodoTask] 
     * @param {string} [tasksTodoTaskTodoInfoStatus] 
     * @param {Array<string>} [tasksTodoTaskTodoInfoStatus] 
     * @param {string} [purchasedExternalContentExternalContentOrganization] 
     * @param {Array<string>} [purchasedExternalContentExternalContentOrganization] 
     * @param {number} [mls1Id] 
     * @param {Array<number>} [mls1Id] 
     * @param {string} [groups] 
     * @param {Array<string>} [groups] 
     * @param {string} [chats] 
     * @param {Array<string>} [chats] 
     * @param {string} [externalEuropathekBooks] 
     * @param {Array<string>} [externalEuropathekBooks] 
     * @param {string} [sharedDirectories] 
     * @param {Array<string>} [sharedDirectories] 
     * @param {string} [sharedDocuments] 
     * @param {Array<string>} [sharedDocuments] 
     * @param {string} [userNameOrFilter] 
     * @param {string} [todoOrFilter] 
     * @param {string} [userTodoAssignedGroupFilter] 
     * @param {boolean} [state] 
     * @param {boolean} [tasksTodoArchived] 
     * @param {string} [orderLastname] 
     * @param {string} [orderTasksTodoTaskTitle] 
     * @param {boolean} [existsTasksTodo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async getUserCollection(page?: number, itemsPerPage?: number, pagination?: boolean, id?: number, id?: Array<number>, organizations?: string, organizations?: Array<string>, organizationsName?: string, email?: string, roles?: string, username?: string, firstname?: string, lastname?: string, tasksTodo?: string, tasksTodo?: Array<string>, tasksTodoTaskTitle?: string, tasksTodoTask?: string, tasksTodoTask?: Array<string>, tasksTodoTaskTodoInfoStatus?: string, tasksTodoTaskTodoInfoStatus?: Array<string>, purchasedExternalContentExternalContentOrganization?: string, purchasedExternalContentExternalContentOrganization?: Array<string>, mls1Id?: number, mls1Id?: Array<number>, groups?: string, groups?: Array<string>, chats?: string, chats?: Array<string>, externalEuropathekBooks?: string, externalEuropathekBooks?: Array<string>, sharedDirectories?: string, sharedDirectories?: Array<string>, sharedDocuments?: string, sharedDocuments?: Array<string>, userNameOrFilter?: string, todoOrFilter?: string, userTodoAssignedGroupFilter?: string, state?: boolean, tasksTodoArchived?: boolean, orderLastname?: string, orderTasksTodoTaskTitle?: string, existsTasksTodo?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20083>> {
        return UserApiFp(this.configuration).getUserCollection(page, itemsPerPage, pagination, id, id, organizations, organizations, organizationsName, email, roles, username, firstname, lastname, tasksTodo, tasksTodo, tasksTodoTaskTitle, tasksTodoTask, tasksTodoTask, tasksTodoTaskTodoInfoStatus, tasksTodoTaskTodoInfoStatus, purchasedExternalContentExternalContentOrganization, purchasedExternalContentExternalContentOrganization, mls1Id, mls1Id, groups, groups, chats, chats, externalEuropathekBooks, externalEuropathekBooks, sharedDirectories, sharedDirectories, sharedDocuments, sharedDocuments, userNameOrFilter, todoOrFilter, userTodoAssignedGroupFilter, state, tasksTodoArchived, orderLastname, orderTasksTodoTaskTitle, existsTasksTodo, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a User resource.
     * @summary Retrieves a User resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async getUserItem(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserJsonldUserItemRead>> {
        return UserApiFp(this.configuration).getUserItem(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a User resource.
     * @summary Creates a User resource.
     * @param {UserJsonldUserWrite} body The new User resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async postUserCollection(body: UserJsonldUserWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserJsonld>> {
        return UserApiFp(this.configuration).postUserCollection(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User resource.
     * @summary Creates a User resource.
     * @param {UserJsonldUserWrite} body The new User resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async postUserCollection(body: UserJsonldUserWrite, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserJsonld>> {
        return UserApiFp(this.configuration).postUserCollection(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the User resource.
     * @summary Replaces the User resource.
     * @param {UserJsonldUserItemWrite} body The updated User resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async putUserItem(body: UserJsonldUserItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserJsonld>> {
        return UserApiFp(this.configuration).putUserItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the User resource.
     * @summary Replaces the User resource.
     * @param {UserJsonldUserItemWrite} body The updated User resource
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async putUserItem(body: UserJsonldUserItemWrite, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserJsonld>> {
        return UserApiFp(this.configuration).putUserItem(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
