// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model SkillMap {
  id            String        @id @default(cuid())
  name          String
  description   String?
  taxonomy      String        @default("Bloom")
  version       String        @default("")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  skills        Skill[]
  access_rights ACCESS_RIGHTS @default(PRIVATE)
  ownerId       String

  @@unique([ownerId, name, version])
  @@map("skill-maps")
}

enum ACCESS_RIGHTS {
  PRIVATE
  PUBLIC
  COMPANY
}

enum LIFECYCLE {
  DRAFT
  POOL
  ARCHIVED
}

model Skill {
  id          String  @id @default(cuid())
  name        String
  level       Int
  description String?

  repositoryId      String
  repository        SkillMap       @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  parentSkills      Skill[]        @relation("parentSkills")
  nestedSkills      Skill[]        @relation("parentSkills")
  pathTeachingGoals LearningPath[] @relation("pathGoals")
  requirements      LearningPath[] @relation("pathRequirements")

  selfReported CareerProfile[] @relation("selfReportedSkill")
  verified     CareerProfile[] @relation("verifiedSkill")

  // Use in Learning Objects
  goalsOf        LearningUnit[]      @relation("teachingGoals")
  requirementsOf LearningUnit[]      @relation("requirements")
  suggestedBy    PreferredOrdering[] @relation("suggestedSkills")

  learnedBy LearningProgress[] @relation("learnedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([repositoryId, name])
  @@map("skills")
}

model LearningPath {
  id                      String         @id @default(cuid())
  owner                   String
  title                   String?
  targetAudience          String?
  description             String?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  pathTeachingGoals       Skill[]        @relation("pathGoals")
  requirements            Skill[]        @relation("pathRequirements")
  recommendedUnitSequence LearningUnit[] @relation("recommendedUnitsOfLEarningPath")
  lifecycle               LIFECYCLE      @default(DRAFT)

  @@map("paths")
}

enum NuggetCategory {
  ANALYZE
  INTRODUCTION
  CONTENT
  EXAMPLE
  EXERCISE
  TEST
}

model Nugget {
  id             String         @id @default(cuid())
  resource       String // Should point to the actual ressource
  language       String
  name           String?
  isTypeOf       NuggetCategory @default(CONTENT)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  processingTime String         @default("")
  presenter      String         @default("")
  mediatype      String         @default("")
  learningUnitId String?
}

model LearningUnit {
  id          String   @id @default(cuid())
  resource    String   @default("") // Should point to the actual ressource
  language    String
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  completedBy LearningHistory[] @relation("completedBy")
  startedBy   LearningHistory[] @relation("startedBy")

  requirements  Skill[]             @relation("requirements")
  teachingGoals Skill[]             @relation("teachingGoals")
  // Softconstraints (Ordering)
  orderings     PreferredOrdering[]

  // Search-specific meta data
  processingTime     String   @default("")
  rating             String   @default("")
  contentCreator     String   @default("")
  contentProvider    String   @default("")
  targetAudience     String   @default("")
  semanticDensity    String   @default("")
  semanticGravity    String   @default("")
  contentTags        String[]
  contextTags        String[]
  linkToHelpMaterial String?

  consumed          ConsumedUnitData[] @relation("consumedLU")
  LearningHistory   LearningHistory?   @relation(fields: [learningHistoryId], references: [id])
  learningHistoryId String?
  orga_id           String             @default("")

  usedInRecommendations LearningPath[] @relation("recommendedUnitsOfLEarningPath")

  lifecycle LIFECYCLE @default(DRAFT)

  @@unique([id])
}

// Softconstraints per LearningUnit & Path to support orderings defined by content creators 
model PreferredOrdering {
  id String @id @default(cuid())

  // TODO SE: Currently without weight, check if we need some (supported by algorithm)
  suggestedSkills Skill[]       @relation("suggestedSkills")
  learningUnit    LearningUnit? @relation(fields: [learningUnitId], references: [id])
  learningUnitId  String?
  orderId         String

  @@unique([learningUnitId, orderId])
  @@map("orderings")
}

model Company {
  id         String          @id @default(cuid())
  name       String          @default("")
  workedAt   CareerProfile[] @relation("workedAt")
  workingNow CareerProfile[] @relation("workingNow")

  // User UserProfile[]        // clarify this
  // Job  Job[]                // clarify this
  users UserProfile[]
  jobs  Job[]
}

// ######## Einf�gen der MLS-Id  ########

model UserProfile {
  id               String                @id @default(cuid())
  // mlsUserId	   String                 // ersetzen wir hier "unsere" Id oder erg�nzen um die mlsUserId ?
  name             String                @default("")
  learningProfile  LearningProfile?
  careerProfile    CareerProfile?
  company          Company?              @relation(fields: [companyId], references: [id])
  companyId        String?
  learningBehavior LearningBehaviorData?
  learningProgress LearningProgress[]
  LearningHistory  LearningHistory?

  status String // (active, inactive)  setzen des Values bei User-Events (create / delete)

  Qualification Qualification[]
  Job           Job?

  @@unique([companyId, name]) // unique Schluessel noch bearebeiten
  @@map("user")
}

model LearningProgress {
  id                String           @id @default(cuid())
  Skill             Skill            @relation("learnedBy", fields: [skillId], references: [id])
  skillId           String
  user              UserProfile      @relation(fields: [userId], references: [id])
  userId            String
  createdAt         DateTime         @default(now())
  LearningHistory   LearningHistory? @relation(fields: [learningHistoryId], references: [id])
  learningHistoryId String?
}

model LearningProfile {
  id                    String           @id @default(cuid())
  semanticDensity       Int
  semanticGravity       Int
  mediaType             String           @default("")
  language              String           @default("")
  processingTimePerUnit String           @default("")
  learningHistory       LearningHistory? @relation(fields: [learningHistoryId], references: [id])
  user                  UserProfile      @relation(fields: [userId], references: [id])
  userId                String           @unique // relation scalar field 
  learningHistoryId     String?
}

model LearningHistory {
  id                     String             @id @default(cuid())
  startedLearningUnits   LearningUnit[]     @relation("startedBy")
  completedLearningUnits LearningUnit[]     @relation("completedBy")
  learnedSkills          LearningProgress[]
  user                   UserProfile        @relation(fields: [userId], references: [id])
  userId                 String             @unique // relation scalar field 
  LearningProfile        LearningProfile[]
  LearningUnit           LearningUnit[]
}

model CareerProfile {
  id                    String          @id @default(cuid())
  jobHistory            Job[]           @relation("pastJobs")
  professionalInterests String          @default("")
  qualifications        Qualification[] @relation("currentQualifications")

  selfReportedSkills Skill[] @relation("selfReportedSkill")
  verifiedSkills     Skill[] @relation("verifiedSkill")

  pastCompanies    Company[] @relation("workedAt")
  currentCompany   Company   @relation("workingNow", fields: [currentCompanyId], references: [id])
  currentCompanyId String

  user   UserProfile @relation(fields: [userId], references: [id])
  userId String      @unique // relation scalar field 
}

model ConsumedUnitData {
  id                  String               @id @default(cuid())
  actualPocessingTime String
  testPerformance     Decimal              @db.Decimal(5, 2)
  consumedLUId        LearningUnit[]       @relation("consumedLU")
  lbData              LearningBehaviorData @relation(fields: [lbDataId], references: [id])
  lbDataId            String
}

model LearningBehaviorData {
  id           String             @id @default(cuid())
  clickdata    String[]
  consumedUnit ConsumedUnitData[]
  user         UserProfile        @relation(fields: [userId], references: [id])
  userId       String             @unique
}

model Qualification {
  id     String      @id @default(cuid())
  name   String
  year   Int
  user   UserProfile @relation(fields: [userId], references: [id])
  userId String

  userQualifications CareerProfile[] @relation("currentQualifications")

  // userCareerProfile   CareerProfile   @relation(fields: [userCareerProfileId], references: [id])
  // userCareerProfileId String          @unique // relation scalar field 
}

model Job {
  id        String          @id @default(cuid())
  jobtitle  String
  starttime DateTime
  endtime   DateTime // Year the job was ended, if the job is still on-going set this to NULL
  company   Company         @relation(fields: [companyId], references: [id]) //company at which the job was/is
  companyId String
  userJobs  CareerProfile[] @relation("pastJobs")
  user      UserProfile     @relation(fields: [userId], references: [id])
  userId    String          @unique // relation scalar field
  // userCareerProfile   CareerProfile   @relation(fields: [userCareerProfileId], references: [id])
  // userCareerProfileId String          @unique // relation scalar field   
}

model Feedback {
  id                String @id @default(cuid())
  userId            String @default("TestUserId1") //To discuss: Save this or make it anonymous?
  learningUnitId    String @default("TestLUId1")
  //user                  UserProfile  @relation(fields: [userId], references: [id])
  //userId                String  @unique 
  //learningUnit    LearningUnit  @relation(fields: [learningUnitId], references: [id])
  //learningUnitId  String  @unique 
  learningValue     Int    @default(1) //How much did the user learn?
  presentation      Int    @default(1) //How well was the content presented?
  comprehensiveness Int    @default(1) //How easily understandable was the content?
  structure         Int    @default(1) //How well was the content structured (including length)?
  overallRating     Int    @default(1) //How is the overall rating for the learning unit/task?
  optionalTextComment String   @default("") //Optional textual comment, e.g., what could be better, what was great?
  createdAt           DateTime @default(now())
}
