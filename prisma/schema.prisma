// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

// Stores a set/graph of skills created by one entity (e.g., an organization).
// Allows to store more than one topic-related skill map per entity.
// Skills may be treated as some kind of structured (hiarchical) tags.
// 
// Current / planned concepts:
// - Optionally provide a taxonomy (e.g., Bloom) to support the same skill on different levels
// - Versioning of skill maps
// - Sharing of skill maps (e.g., between organizations)
// - Access rights (e.g., private, public, company)
//
// Requested by:
// - Part of the core concept of the project proposal to provide comptency-based & individualizeable learning paths
// - Requested in class diagram (Seafile\ConceptsAndDesigns\Diagram_08_2023)
model SkillMap {
  id            String        @id @default(cuid())
  name          String
  description   String?
  taxonomy      String        @default("Bloom")
  version       String        @default("")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  skills        Skill[]
  access_rights ACCESS_RIGHTS @default(PRIVATE)
  ownerId       String

  @@unique([ownerId, name, version])
  @@map("skill-maps")
}

enum ACCESS_RIGHTS {
  PRIVATE
  PUBLIC
  COMPANY
}

// For the teacher's view
enum LIFECYCLE {
  DRAFT
  POOL
  ARCHIVED
  IN_PROGRESS
  FINISHED
  DELETED
  CREATED
}

// For the student's view
enum STATUS {
  OPEN
  IN_PROGRESS
  FINISHED
  FAILED // Finished but not enough points for success
  RESTARTED // Only for learning units / tasks
}

enum USERSTATUS {
  ACTIVE
  INACTIVE
}

// Represents a skill which is taught by the learn management software (LMS).
// Skills may be treated as some kind of structured (hiarchical) tags.
// Skills model what needs to be learned to understand a learning unit (i.e. requirement)
// and what is taught by a learning unit (i.e. teaching goal).
// The planing algorithm analyzes required/taught skills and computes a learning path to learn
// the desired skills by considering the background of a learner.
//
// Requested by:
// - Part of the core concept of the project proposal to provide comptency-based & individualizeable learning paths
// - Requested in class diagram (Seafile\ConceptsAndDesigns\Diagram_08_2023)
model Skill {
  id          String  @id @default(cuid())
  name        String
  level       Int
  description String?

  repositoryId              String
  repository                SkillMap                   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  parentSkills              Skill[]                    @relation("parentSkills")
  nestedSkills              Skill[]                    @relation("parentSkills")
  pathTeachingGoals         LearningPath[]             @relation("pathGoals")
  requirements              LearningPath[]             @relation("pathRequirements")
  proposedpathTeachingGoals PersonalizedLearningPath[] @relation("proposedpathGoals")

  // Use in Learning Objects
  goalsOf        LearningUnit[]      @relation("teachingGoals")
  requirementsOf LearningUnit[]      @relation("requirements")
  suggestedBy    PreferredOrdering[] @relation("suggestedSkills")

  learnedBy LearnedSkill[] @relation("learnedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([repositoryId, name])
  @@map("skills")
}

// Softconstraints per LearningUnit & Path to support orderings defined by content creators 
// Used in skills and learning units
model PreferredOrdering {
  id String @id @default(cuid())

  // TODO SE: Currently without weight, check if we need some (supported by algorithm)
  suggestedSkills Skill[]       @relation("suggestedSkills") //Optional skills to be learned before this learning unit
  learningUnit    LearningUnit? @relation(fields: [learningUnitId], references: [id])
  learningUnitId  String?
  orderId         String //Path id

  @@unique([learningUnitId, orderId])
  @@map("orderings")
}

// Stores SEARCH-specific meta data for a learning unit (i.e., a TASK in MLS).
// This data is used by the planning algorithm to find the best fitting learning units / learning path.
// A learning unit may teach skills, have requirements, and may be part of a learning path.
//
// Requested by:
// - Part of the core concept of the project proposal to provide comptency-based & individualizeable learning paths
// - Requested in class diagram (Seafile\ConceptsAndDesigns\Diagram_08_2023)
model LearningUnit {
  id        String    @id @default(cuid())
  resource  String    @default("") // Should point to the actual ressource
  language  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orga_id   String    @default("")
  lifecycle LIFECYCLE @default(DRAFT) //Teacher view

  concreteInstances LearningUnitInstance[] @relation("instanciatedLU") //Instances beeing part of learning pathes (from users), one to many relation

  feedbacks Feedback[] //Feedbacks given for the learning unit, one to many relation 

  requirements  Skill[] @relation("requirements") // Skills required to understand the learning unit
  teachingGoals Skill[] @relation("teachingGoals") // Skills taught by the learning unit

  // Softconstraints (Ordering)
  orderings PreferredOrdering[]

  // Search-specific meta data
  processingTime     String   @default("")
  rating             String   @default("")
  contentCreator     String   @default("")
  contentProvider    String   @default("")
  targetAudience     String[] @default([])
  semanticDensity    String   @default("")
  semanticGravity    String   @default("")
  contentTags        String[]
  contextTags        String[]
  linkToHelpMaterial String?

  @@unique([id])
}

// Stores a concrete instance of a learning unit (including its state, points, and to which concrete path it belongs). 
model LearningUnitInstance {
  id                   String         @id @default(cuid())
  actualProcessingTime Int            @default(0) // Duration in seconds
  testPerformance      Decimal        @default(0.0) @db.Decimal(5, 2) // Percentage of points achieved (max 5 digits, max 2 decimal places)
  unit                 LearningUnit   @relation("instanciatedLU", fields: [unitId], references: [id])
  unitId               String // A LearningUnitInstance belongs to exactly one learning unit  
  status               STATUS         @default(OPEN) //Learner's view
  date                 DateTime       @default(now())
  path                 PathSequence[]

  @@unique([unitId])
  @@map("consumedUnits") //Table in the postgres database
}

// Maps the instance of a learning unit to a personalized learning path (and its position in it). 
// Required because a learningUnitInstance can be part of multiple paths (but we need a unique position in each path).
model PathSequence {
  id       String                   @id @default(cuid())
  position Int // The position of the learning unit in the path
  path     PersonalizedLearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  pathId   String // The id of the personalized learning path where the learning unit is part of
  unit     LearningUnitInstance     @relation(fields: [unitId], references: [id])
  unitId   String // The id of the concrete learning unit instance

  @@unique([pathId, position]) // Position must be unique in a path
  @@map("pathSequence")
}

// Stores an individual learning path for a user,
// this may origin by selecting (and indivdualizing) a pre-defined path (course) of a teacher
// or by creating an individual path to learn specific skills (e.g., after searching for them)
//
// Requested by MLS:
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/43
// 
// Built the following relationship:
// ┌─────────────────┐   * ┌───────────────────────────┐     *┌────────────────┐
// │ LearningHistory ├────►│ PersonalizedLearningPath  ├─────►│ PathSequence   │
// │ userId          │     │ origin*                   │      │ position: Int  │
// └─────────────────┘     └───────────────────────────┘      └────────┬───────┘  
//                            ┌─────────────────────┐ 1                │
//                            │ LearningUnitInstance│◄─────────────────┘
//                            │ unit: LearningUnit  │
//                            │ state               │
//                            └─────────────────────┘               
// LearningHistory: Stores the complete learning history of a user
// PersonalizedLearningPath: Stores one personalized learning path of a user, which may have multiple ones
// PathSequence: Stores the order of LearningUnits within a personalized learning path
// ConsumedUnitData: Stores the consumed LearningUnits of a personalized learning path (LearningUnit + State)
//                   May also stored without a personalized learning path (e.g., for search results)
model PersonalizedLearningPath {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  unitSequence PathSequence[] // The sequence of learning units in the path (including their position)

  learningHistory   LearningHistory @relation(fields: [learningHistoryId], references: [userId], onDelete: Cascade)
  learningHistoryId String // A personalized path belongs to exactly one learning history of a user

  // Origin either are path or custom goals
  learningPath   LearningPath? @relation(fields: [learningPathId], references: [id])
  learningPathId String?       @unique // Existent if the path is based on a learning path (source = path)

  pathTeachingGoals Skill[] @relation("proposedpathGoals") // Has entries if the learning path is created by a user (source = goals)

  // Status of the path          
  lifecycle LIFECYCLE @default(CREATED) //Teacher view
  status    STATUS    @default(OPEN) //Student view

  @@map("personalPaths")
}

// Stores a pre-defined learning path (course) of a teacher,
// with requirements (starting point / what needs a learner to know before starting the path)
// and teaching goals (what is the goal of the path to learn)
//
// Requested by:
// - Part of the core concept of the project proposal to provide comptency-based & individualizeable learning paths
// - Requested in class diagram (Seafile\ConceptsAndDesigns\Diagram_08_2023)
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/25
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/26
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/27
model LearningPath {
  id             String   @id @default(cuid())
  owner          String
  title          String?
  targetAudience String[]
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lifecycle      LIFECYCLE @default(DRAFT)

  // Not the same as the sum of the contained learning units
  pathTeachingGoals Skill[] @relation("pathGoals")
  requirements      Skill[] @relation("pathRequirements") //Requirements outside of the contained learning units (what do I need to know before starting the course)

  recommendedUnitSequence Json? // Order of the learning units (proposed by the teacher, required by MLS)

  assignedProposedPath   PersonalizedLearningPath[] // In which personalized paths is this path used?
  assignedProposedPathId String[]

  @@map("paths")
}

// Stores the feedback (evaluation) from a user given to a learning unit
//
// Requested by:
// - Part of AP 6.3 (user validation of the platform)
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/30
model Feedback {
  id                  String       @id @default(cuid())
  userId              String       @default("Anonymous") //A feedback should have an author, but they can be anonymous (if author is deleted or we want anonymous feedback)
  learningUnit        LearningUnit @relation(fields: [learningUnitId], references: [id], onUpdate: NoAction, onDelete: Cascade) //Delete feedback if LU is deleted
  learningUnitId      String //A feedback is always given for exactly one learing unit
  learningValue       Int          @default(1) //How much did the user learn?
  presentation        Int          @default(1) //How well was the content presented?
  comprehensiveness   Int          @default(1) //How easily understandable was the content?
  structure           Int          @default(1) //How well was the content structured (including length)?
  overallRating       Int          @default(1) //How is the overall rating for the learning unit/task?
  optionalTextComment String?      @default("") //Optional textual comment, e.g., what could be better, what was great?
  createdAt           DateTime     @default(now())
}

// Maps to users (learners) in the MLS system
// Child objects should not be sent along with it, only their ids (which is the same as the user id)
// Requested by:
// - General concept of the project proposal
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/101
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/100
model UserProfile {
  id              String           @id @default(cuid()) //This is the same as MLS id when created via event (should normally be the case)
  learningProfile LearningProfile? //Contains preferences and experiences about a user's learning behavior. One-to-one relation.
  careerProfile   CareerProfile? //Contains current and past jobs, companies, etc. Delivered by MLS. One-to-one relation.
  learningHistory LearningHistory? //Contains the learning history of the user, including the learning units they have started and the skills they have learned. One-to-one relation.
  status          USERSTATUS       @default(ACTIVE) // UserProfiles get inactive when they are deleted in MLS

  //We have no relation to feedbacks here, as users should be able to give feedback anonymously

  @@map("user") //Maps the UserProfile model to the user table in the database
}

// Preferences and experiences about a user's learning behavior
// Requested by:
// - Concept of the project proposal (to allow personalized suggestions)
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/108
model LearningProfile {
  user                    UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String      @unique // User id is LearningProfile id, one to one relation 
  semanticDensity         Float       @default(0) //From 0-1
  semanticGravity         Float       @default(0) //From 0-1
  mediaType               String[]    @default([]) //MIME types, order is priority
  language                String[]    @default([]) //Standard two character (de, en), order is priority
  processingTimePerUnit   Int         @default(0) //In minutes
  preferredDidacticMethod String[]    @default([])
}

//Stores the learning history of a user, including the learning paths they have started and the skills they have learned
// Requested by:
// - Concept of the project proposal (to allow personalized suggestions)
// - Refined in the meeting at 07.05.2024
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/110
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/109  
model LearningHistory {
  userId        String                     @unique // User id is LearningHistory id, one to one relation 
  user          UserProfile                @relation(fields: [userId], references: [id], onDelete: Cascade)
  learnedSkills LearnedSkill[] // Skills only (and their aquisition date)
  personalPaths PersonalizedLearningPath[] // All pathes in which the user is enrolled (and their state). Allows mapping to the contained learning units (and their state).
}

// Stores when a skill was learned by a user (as part of their learning history)
// Triggeredy by MLS events. A skill can be learned within a path, but also by finishing a learning unit only (therefore we have here a separate list of learning skills)
// Requested by:
// - Concept of the project proposal (as part of the learningHistory)
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/112
model LearnedSkill {
  id        String   @id @default(cuid())
  Skill     Skill    @relation("learnedBy", fields: [skillId], references: [id], onDelete: Cascade)
  skillId   String
  createdAt DateTime @default(now())

  //Learned skills are part of the learning history of a user
  LearningHistory   LearningHistory @relation(fields: [learningHistoryId], references: [userId], onDelete: Cascade)
  learningHistoryId String

  @@map("LearningProgress")
}

//A careerProfile belongs to a user and contains the job history, professional interests, qualifications and skills of the user
// Requested by:
// - Concept of the project proposal (to allow personalized suggestions)
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/103
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/102
model CareerProfile {
  userId                String          @unique /// User id is CareerProfile id, one to one relation 
  user                  UserProfile     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobHistory            Job[]
  professionalInterests String[]        @default([])
  qualifications        Qualification[]
  selfReportedSkills    String[] //Only used with text matching for the recommendation algorithms
}

// A qualification of a user, e.g., a degree or a certificate. Part of their career profile.
// Requested by:
// - Concept of the project proposal (to allow personalized suggestions)
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/107
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/106
model Qualification {
  id              String        @id @default(cuid())
  title           String
  date            DateTime
  berufenetId     String?
  careerProfile   CareerProfile @relation(fields: [careerProfileId], references: [userId], onDelete: Cascade)
  careerProfileId String
}

// A current or past job of a user. Part of their career profile.
// Requested by:
// - Concept of the project proposal (to allow personalized suggestions)
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/105
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/104
model Job {
  id              String        @id @default(cuid())
  jobTitle        String
  startTime       DateTime
  endTime         DateTime? // Year the job was ended, if the job is still on-going set this to NULL
  company         String
  careerProfile   CareerProfile @relation(fields: [careerProfileId], references: [userId], onDelete: Cascade)
  careerProfileId String
}

// BerufeNet
model Bkgr {
  id           String         @id @default(cuid())
  typ          Typ            @relation(fields: [typId], references: [id])
  typId        String
  BerufeNetJob BerufeNetJob[]
}

model Typ {
  id   String @unique
  Bkgr Bkgr[]
}

model BerufeNetJob {
  id                     String @id @default(cuid())
  kurzBezeichnungNeutral String
  bkgr                   Bkgr   @relation(fields: [bkgrId], references: [id])
  bkgrId                 String
}
