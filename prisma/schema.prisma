// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model SkillMap {
  id            String        @id @default(cuid())
  name          String
  description   String?
  taxonomy      String        @default("Bloom")
  version       String        @default("")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  skills        Skill[]
  access_rights ACCESS_RIGHTS @default(PRIVATE)
  ownerId       String

  @@unique([ownerId, name, version])
  @@map("skill-maps")
}

enum ACCESS_RIGHTS {
  PRIVATE
  PUBLIC
  COMPANY
}

enum LIFECYCLE {
  DRAFT
  POOL
  ARCHIVED
  IN_PROGRESS
  FINISHED
  DELETED
  CREATED
}

enum STATUS {
  OPEN
  STARTED
  IN_PROGRESS
  FINISHED
  DELETED
}

enum USERSTATUS {
  ACTIVE
  INACTIVE
}

model Skill {
  id          String  @id @default(cuid())
  name        String
  level       Int
  description String?

  repositoryId              String
  repository                SkillMap                   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  parentSkills              Skill[]                    @relation("parentSkills")
  nestedSkills              Skill[]                    @relation("parentSkills")
  pathTeachingGoals         LearningPath[]             @relation("pathGoals")
  requirements              LearningPath[]             @relation("pathRequirements")
  proposedpathTeachingGoals PersonalizedLearningPath[] @relation("proposedpathGoals")
  selfReported              CareerProfile[]            @relation("selfReportedSkill")
  verified                  CareerProfile[]            @relation("verifiedSkill")

  // Use in Learning Objects
  goalsOf        LearningUnit[]      @relation("teachingGoals")
  requirementsOf LearningUnit[]      @relation("requirements")
  suggestedBy    PreferredOrdering[] @relation("suggestedSkills")

  learnedBy LearningProgress[] @relation("learnedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([repositoryId, name])
  @@map("skills")
}

// Stores a pre-defined learning path (course) of a teacher,
// with requirements (starting point / what needs a learner to know before starting the path)
// and teaching goals (what is the goal of the path to learn)
//
// Requested by:
// - Part of the core concept of the project proposal to provide comptency-based & individualizeable learning paths
// - Requested in class diagram (Seafile\ConceptsAndDesigns\Diagram_08_2023)
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/25
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/26
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/27
model LearningPath {
  id                      String                     @id @default(cuid())
  owner                   String
  title                   String?
  targetAudience          String?
  description             String?
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
  pathTeachingGoals       Skill[]                    @relation("pathGoals")
  requirements            Skill[]                    @relation("pathRequirements")
  recommendedUnitSequence Json?
  lifecycle               LIFECYCLE                  @default(DRAFT)
  assignedProposedPath    PersonalizedLearningPath[]
  assignedProposedPathId  String[]

  @@map("paths")
}

enum NuggetCategory {
  ANALYZE
  INTRODUCTION
  CONTENT
  EXAMPLE
  EXERCISE
  TEST
}

model Nugget {
  id             String         @id @default(cuid())
  resource       String // Should point to the actual ressource
  language       String
  name           String?
  isTypeOf       NuggetCategory @default(CONTENT)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  processingTime String         @default("")
  presenter      String         @default("")
  mediatype      String         @default("")
  learningUnitId String?
}

model LearningUnit {
  id          String   @id @default(cuid())
  resource    String   @default("") // Should point to the actual ressource
  language    String
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requirements  Skill[]             @relation("requirements")
  teachingGoals Skill[]             @relation("teachingGoals")
  // Softconstraints (Ordering)
  orderings     PreferredOrdering[]

  // Search-specific meta data
  processingTime     String   @default("")
  rating             String   @default("")
  contentCreator     String   @default("")
  contentProvider    String   @default("")
  targetAudience     String   @default("")
  semanticDensity    String   @default("")
  semanticGravity    String   @default("")
  contentTags        String[]
  contextTags        String[]
  linkToHelpMaterial String?

  consumed ConsumedUnitData[] @relation("consumedLU")
  // LearningHistory   LearningHistory?   @relation(fields: [learningHistoryId], references: [id])
  // learningHistoryId String?
  orga_id  String             @default("")

  usedInProposed        PersonalizedLearningPath[] @relation("proposedUnitsOfLearningPath")
  lifecycle             LIFECYCLE                  @default(DRAFT)

  feedbacks Feedback[] //Feedbacks given for the learning unit, one to many relation 
  progress  LearningPathProgress[]

  @@unique([id])
}

// Softconstraints per LearningUnit & Path to support orderings defined by content creators 
model PreferredOrdering {
  id String @id @default(cuid())

  // TODO SE: Currently without weight, check if we need some (supported by algorithm)
  suggestedSkills Skill[]       @relation("suggestedSkills")
  learningUnit    LearningUnit? @relation(fields: [learningUnitId], references: [id])
  learningUnitId  String?
  orderId         String

  @@unique([learningUnitId, orderId])
  @@map("orderings")
}

model UserProfile {
  id               String                @id @default(cuid())
  // mlsUserId	   String                 // ersetzen wir hier "unsere" Id oder ergï¿½nzen um die mlsUserId ?
  name             String                @default("")
  learningProfile  LearningProfile?
  careerProfile    CareerProfile?
  company          Company?              @relation(fields: [companyId], references: [id])
  companyId        String?
  learningBehavior LearningBehaviorData?
  learningProgress LearningProgress[]
  learningHistory  LearningHistory?
  status           USERSTATUS            @default(ACTIVE) // (active, inactive)  setzen des Values bei User-Events (create / delete)
  job              Job?
  qualification    Qualification[]

  //feedbacks Feedback[] //Feedbacks given by the user, one to many relation (not implemented as onDelete relation is not working properly)

  @@unique([companyId, name]) // unique Schluessel noch bearbeiten
  @@map("user")
}

model LearningProgress {
  id                String           @id @default(cuid())
  Skill             Skill            @relation("learnedBy", fields: [skillId], references: [id])
  skillId           String
  user              UserProfile      @relation(fields: [userId], references: [id])
  userId            String
  createdAt         DateTime         @default(now())
  LearningHistory   LearningHistory? @relation(fields: [learningHistoryId], references: [id])
  learningHistoryId String?
}

model LearningProfile {
  id                      String           @id @default(cuid())
  semanticDensity         Int
  semanticGravity         Int
  mediaType               String           @default("")
  language                String           @default("")
  processingTimePerUnit   String           @default("")
  learningHistory         LearningHistory? @relation(fields: [learningHistoryId], references: [id])
  user                    UserProfile      @relation(fields: [userId], references: [id])
  userId                  String           @unique // relation scalar field 
  learningHistoryId       String?
  preferredDidacticMethod String?
}

model LearningHistory {
  id                   String                     @id @default(cuid())
  startedLearningUnits ConsumedUnitData[]         @relation("startedBy")
  learnedSkills        LearningProgress[]
  user                 UserProfile                @relation(fields: [userId], references: [id])
  userId               String                     @unique // relation scalar field 
  LearningProfile      LearningProfile[]
  personalPaths        PersonalizedLearningPath[]
}

model CareerProfile {
  id                      String          @id @default(cuid())
  jobHistory              Job[]           @relation("pastJobs")
  professionalInterests   String          @default("")
  qualifications          Qualification[]
  selfReportedSkills      Skill[]         @relation("selfReportedSkill")
  verifiedSkills          Skill[]         @relation("verifiedSkill")
  pastCompanies           Company[]       @relation("workedAt")
  currentCompany          Company?        @relation("workingNow", fields: [currentCompanyId], references: [id])
  currentCompanyId        String?
  currentJobIdAtBerufeNet String?
  user                    UserProfile     @relation(fields: [userId], references: [id])
  userId                  String          @unique // relation scalar field 
}

model ConsumedUnitData {
  id                  String               @id @default(cuid())
  actualPocessingTime String
  testPerformance     Decimal              @db.Decimal(5, 2)
  consumedLU          LearningUnit         @relation("consumedLU", fields: [consumedLUId], references: [id])
  consumedLUId        String // relation scalar field 
  lbData              LearningBehaviorData @relation(fields: [lbDataId], references: [id])
  lbDataId            String
  status              STATUS               @default(STARTED)
  date                DateTime
  startedBy           LearningHistory[]    @relation("startedBy")
}

// Stores an individual learning path for a user,
// this may origin by selecting (and indivdualizing) a pre-defined path (course) of a teacher
// or by creating an individual path to learn specific skills (e.g., after searching for them)
//
// Requested by MLS:
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/43
model PersonalizedLearningPath {
  id                String                @id @default(cuid())
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  pathTeachingGoals Skill[]               @relation("proposedpathGoals")
  unitSequence      LearningUnit[]        @relation("proposedUnitsOfLearningPath")
  userProfile       LearningHistory       @relation(fields: [userProfileId], references: [id])
  userProfileId     String
  learningPath      LearningPath?         @relation(fields: [learningPathId], references: [id])
  learningPathId    String?               @unique
  progress          LearningPathProgress?
  lifecycle         LIFECYCLE             @default(CREATED)

  @@map("personalPaths")
}

model LearningPathProgress {
  id             String                   @id @default(cuid())
  personalPath   PersonalizedLearningPath @relation(fields: [personalPathId], references: [id])
  personalPathId String                   @unique
  unit           LearningUnit             @relation(fields: [unitId], references: [id])
  unitId         String                   @unique

  @@map("pathProgress")
}

model LearningBehaviorData {
  id           String             @id @default(cuid())
  clickdata    String[]
  consumedUnit ConsumedUnitData[]
  user         UserProfile        @relation(fields: [userId], references: [id])
  userId       String             @unique
}

model Qualification {
  id   String @id @default(cuid())
  name String
  year Int
  user               UserProfile?     @relation(fields: [userId], references: [id])
  userId             String?
  // userCareerProfile   CareerProfile   @relation(fields: [userCareerProfileId], references: [id])
  // userCareerProfileId String          @unique // relation scalar field 
  careerProfile   CareerProfile? @relation(fields: [careerProfileId], references: [id])
  careerProfileId String?
}

model Job {
  id               String          @id @default(cuid())
  jobtitle         String
  starttime        DateTime
  endtime          DateTime // Year the job was ended, if the job is still on-going set this to NULL
  company          Company         @relation(fields: [companyId], references: [id]) //company at which the job was/is
  companyId        String
  userJobs         CareerProfile[] @relation("pastJobs")
  user             UserProfile     @relation(fields: [userId], references: [id])
  userId           String          @unique // relation scalar field
  jobIdAtBerufeNet String?
  // userCareerProfile   CareerProfile   @relation(fields: [userCareerProfileId], references: [id])
  // userCareerProfileId String          @unique // relation scalar field   
}

model Company {
  id         String          @id @default(cuid())
  name       String          @default("")
  workedAt   CareerProfile[] @relation("workedAt")
  workingNow CareerProfile[] @relation("workingNow")
  users      UserProfile[]
  jobs       Job[]
}

model Feedback {
  id                  String       @id @default(cuid())
  //user                UserProfile?  @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: SetDefault)  //Set author to anonymous when user is deleted (requires user with id: Anonymous)
  userId              String       @default("Anonymous") //A feedback should have an author, but they can be anonymous (if author is deleted or we want anonymous feedback)
  learningUnit        LearningUnit @relation(fields: [learningUnitId], references: [id], onUpdate: NoAction, onDelete: Cascade) //Delete feedback if LU is deleted
  learningUnitId      String //A feedback is always given for exactly one learing unit
  learningValue       Int          @default(1) //How much did the user learn?
  presentation        Int          @default(1) //How well was the content presented?
  comprehensiveness   Int          @default(1) //How easily understandable was the content?
  structure           Int          @default(1) //How well was the content structured (including length)?
  overallRating       Int          @default(1) //How is the overall rating for the learning unit/task?
  optionalTextComment String?      @default("") //Optional textual comment, e.g., what could be better, what was great?
  createdAt           DateTime     @default(now())
}

model Bkgr {
  id    String  @id @default(cuid())
  typ   Typ     @relation(fields: [typId], references: [id])
  typId String
  Beruf Beruf[]
}

model Typ {
  id   String @unique
  Bkgr Bkgr[]
}

model Beruf {
  id                     String @id @default(cuid())
  kurzBezeichnungNeutral String
  bkgr                   Bkgr   @relation(fields: [bkgrId], references: [id])
  bkgrId                 String
}
