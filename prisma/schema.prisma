// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

// Stores a set/graph of skills created by one entity (e.g., an organization).
// Allows to store more than one topic-related skill map per entity.
// Skills may be treated as some kind of structured (hiarchical) tags.
// 
// Current / planned concepts:
// - Optionally provide a taxonomy (e.g., Bloom) to support the same skill on different levels
// - Versioning of skill maps
// - Sharing of skill maps (e.g., between organizations)
// - Access rights (e.g., private, public, company)
//
// Requested by:
// - Part of the core concept of the project proposal to provide comptency-based & individualizeable learning paths
// - Requested in class diagram (Seafile\ConceptsAndDesigns\Diagram_08_2023)
model SkillMap {
  id            String        @id @default(cuid())
  name          String
  description   String?
  taxonomy      String        @default("Bloom")
  version       String        @default("")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  skills        Skill[]
  access_rights ACCESS_RIGHTS @default(PRIVATE)
  ownerId       String

  @@unique([ownerId, name, version])
  @@map("skill-maps")
}

enum ACCESS_RIGHTS {
  PRIVATE
  PUBLIC
  COMPANY
}

enum LIFECYCLE {
  DRAFT
  POOL
  ARCHIVED
  IN_PROGRESS
  FINISHED
  DELETED
  CREATED
}

enum STATUS {
  OPEN
  STARTED
  IN_PROGRESS
  FINISHED
  DELETED
}

enum USERSTATUS {
  ACTIVE
  INACTIVE
}

// Represents a skill which is taught by the learn management software (LMS).
// Skills may be treated as some kind of structured (hiarchical) tags.
// Skills model what needs to be learned to understand a learning unit (i.e. requirement)
// and what is taught by a learning unit (i.e. teaching goal).
// The planing algorithm analyzes required/taught skills and computes a learning path to learn
// the desired skills by considering the background of a learner.
//
// Requested by:
// - Part of the core concept of the project proposal to provide comptency-based & individualizeable learning paths
// - Requested in class diagram (Seafile\ConceptsAndDesigns\Diagram_08_2023)
model Skill {
  id          String  @id @default(cuid())
  name        String
  level       Int
  description String?

  repositoryId              String
  repository                SkillMap                   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  parentSkills              Skill[]                    @relation("parentSkills")
  nestedSkills              Skill[]                    @relation("parentSkills")
  pathTeachingGoals         LearningPath[]             @relation("pathGoals")
  requirements              LearningPath[]             @relation("pathRequirements")
  proposedpathTeachingGoals PersonalizedLearningPath[] @relation("proposedpathGoals")              

  // Use in Learning Objects
  goalsOf        LearningUnit[]      @relation("teachingGoals")
  requirementsOf LearningUnit[]      @relation("requirements")
  suggestedBy    PreferredOrdering[] @relation("suggestedSkills")

  learnedBy LearningProgress[] @relation("learnedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([repositoryId, name])
  @@map("skills")
}

// Stores a pre-defined learning path (course) of a teacher,
// with requirements (starting point / what needs a learner to know before starting the path)
// and teaching goals (what is the goal of the path to learn)
//
// Requested by:
// - Part of the core concept of the project proposal to provide comptency-based & individualizeable learning paths
// - Requested in class diagram (Seafile\ConceptsAndDesigns\Diagram_08_2023)
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/25
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/26
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/27
model LearningPath {
  id                      String                     @id @default(cuid())
  owner                   String
  title                   String?
  targetAudience          String[]
  description             String?
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
  pathTeachingGoals       Skill[]                    @relation("pathGoals")
  requirements            Skill[]                    @relation("pathRequirements")
  recommendedUnitSequence Json?
  lifecycle               LIFECYCLE                  @default(DRAFT)
  assignedProposedPath    PersonalizedLearningPath[]
  assignedProposedPathId  String[]

  @@map("paths")
}

// Obsolete, to be deleted in future.
// The original intention of nuggets was to store separately elements of a learning unit
// (e.g., introduction, learning content, exercise).
// As we do not have realized any use case for this, we will remove this model in future.
enum NuggetCategory {
  ANALYZE
  INTRODUCTION
  CONTENT
  EXAMPLE
  EXERCISE
  TEST
}

// Obsolete, to be deleted in future.
// The original intention of nuggets was to store separately elements of a learning unit
// (e.g., introduction, learning content, exercise).
// As we do not have realized any use case for this, we will remove this model in future.
model Nugget {
  id             String         @id @default(cuid())
  resource       String // Should point to the actual ressource
  language       String
  name           String?
  isTypeOf       NuggetCategory @default(CONTENT)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  processingTime String         @default("")
  presenter      String         @default("")
  mediatype      String         @default("")
  learningUnitId String?
}

// Stores SEARCH-specific meta data for a learning unit (i.e., a TASK in MLS).
// This data is used by the planning algorithm to find the best fitting learning units / learning path.
//
// Items to be deleted in future (as they are not used by the algorithm & already stored in MLS):
// - title
// - description
// 
// Requested by:
// - Part of the core concept of the project proposal to provide comptency-based & individualizeable learning paths
// - Requested in class diagram (Seafile\ConceptsAndDesigns\Diagram_08_2023)
model LearningUnit {
  id          String   @id @default(cuid())
  resource    String   @default("") // Should point to the actual ressource
  language    String
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requirements  Skill[]             @relation("requirements")
  teachingGoals Skill[]             @relation("teachingGoals")
  // Softconstraints (Ordering)
  orderings     PreferredOrdering[]

  // Search-specific meta data
  processingTime     String   @default("")
  rating             String   @default("")
  contentCreator     String   @default("")
  contentProvider    String   @default("")
  targetAudience     String[] @default([])
  semanticDensity    String   @default("")
  semanticGravity    String   @default("")
  contentTags        String[]
  contextTags        String[]
  linkToHelpMaterial String?

  consumed ConsumedUnitData[] @relation("consumedLU")
  orga_id  String             @default("")

  lifecycle LIFECYCLE @default(DRAFT)

  feedbacks Feedback[] //Feedbacks given for the learning unit, one to many relation 
  // progress  LearningPathProgress[]

  @@unique([id])
}

// Softconstraints per LearningUnit & Path to support orderings defined by content creators 
model PreferredOrdering {
  id String @id @default(cuid())

  // TODO SE: Currently without weight, check if we need some (supported by algorithm)
  suggestedSkills Skill[]       @relation("suggestedSkills")
  learningUnit    LearningUnit? @relation(fields: [learningUnitId], references: [id])
  learningUnitId  String?
  orderId         String

  @@unique([learningUnitId, orderId])
  @@map("orderings")
}

//Maps to users (learners) in the MLS system
model UserProfile {
  id               String                @id @default(cuid()) //This is the same as MLS id when created via event (should normally be the case)
  learningProfile  LearningProfile?     //Contains preferences and experiences about a user's learning behavior
  careerProfile    CareerProfile?         //Contains current and past jobs, companies, etc. Delivered by MLS.
  learningHistory  LearningHistory?       //Contains the learning history of the user, including the learning units they have started and the skills they have learned
  status           USERSTATUS            @default(ACTIVE) // UserProfiles get inactive when they are deleted in MLS

  //We have no relation to feedbacks here, as users should be able to give feedback anonymously

  @@map("user") //Maps the UserProfile model to the user table in the database
}

//Preferences and experiences about a user's learning behavior
model LearningProfile {
    user                    UserProfile      @relation(fields: [userId], references: [id]) 
  userId                  String           @unique // User id is LearningProfile id, one to one relation 
  semanticDensity         Float              @default(0) //From 0-1
  semanticGravity         Float              @default(0) //From 0-1
  mediaType               String[]           @default([]) //MIME types, order is priority
  language                String[]           @default([])  //Standard two character (de, en), order is priority
  processingTimePerUnit   Int           @default(0) //In minutes
  preferredDidacticMethod String[]      @default([])
}

//Stores the learning history of a user, including the learning units they have started and the skills they have learned
model LearningHistory {
  userId               String                     @unique // User id is LearningHistory id, one to one relation 
  user                 UserProfile                @relation(fields: [userId], references: [id])
  startedLearningUnits ConsumedUnitData[]         @relation("startedBy")
  learnedSkills        LearningProgress[]
  personalPaths        PersonalizedLearningPath[]
}

//Stores when a skill was learned by a user (as part of their learning history)
model LearningProgress {
  id                String           @id @default(cuid())
  Skill             Skill            @relation("learnedBy", fields: [skillId], references: [id])
  skillId           String
  createdAt         DateTime         @default(now())

  //Learned skills are part of the learning history of a user
  LearningHistory   LearningHistory @relation(fields: [learningHistoryId], references: [userId])
  learningHistoryId String
}




//A careerProfile belongs to a user and contains the job history, professional interests, qualifications and skills of the user
model CareerProfile {
  userId                String          @unique /// User id is CareerProfile id, one to one relation 
  user                  UserProfile     @relation(fields: [userId], references: [id])
  jobHistory            Job[]           
  professionalInterests String[]          @default([])
  qualifications        Qualification[]
  selfReportedSkills    String[]         //Only used with text matching for the recommendation algorithms
}

model Qualification {
  id              String         @id @default(cuid())
  title            String
  date            DateTime
  careerProfile   CareerProfile @relation(fields: [careerProfileId], references: [userId])
  careerProfileId String
}

model Job {
  id               String         @id @default(cuid())
  jobTitle         String
  startTime        DateTime
  endTime          DateTime // Year the job was ended, if the job is still on-going set this to NULL
  company       String 
  careerProfile    CareerProfile @relation(fields: [careerProfileId], references: [userId])
  careerProfileId  String
}




// Stores an individual learning path for a user,
// this may origin by selecting (and indivdualizing) a pre-defined path (course) of a teacher
// or by creating an individual path to learn specific skills (e.g., after searching for them)
//
// Requested by MLS:
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/43
// 
// Built the following relationship:
// ┌─────────────────┐   * ┌───────────────────────────┐     *┌────────────────┐
// │ LearningHistory ├────►│ PersonalizedLearningPath  ├─────►│ PathSequence   │
// │ userId          │     │ origin*                   │      │ position: Int  │
// └──────┬──────────┘     └───────────────────────────┘      └────────┬───────┘  
//        │                 * ┌─────────────────────┐ 1                │
//        └──────────────────►│ ConsumedUnitData    │◄─────────────────┘
//                            │ unit: LearningUnit  │
//                            │ state               │
//                            └─────────────────────┘               
// LearningHistory: Stores the complete learning history of a user
// PersonalizedLearningPath: Stores one personalized learning path of a user, which may have multiple ones
// PathSequence: Stores the order of LearningUnits within a personalized learning path
// ConsumedUnitData: Stores the consumed LearningUnits of a personalized learning path (LearningUnit + State)
//                   May also stored without a personalized learning path (e.g., for search results)
model PersonalizedLearningPath {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  unitSequence      PathSequence[]
  learningHistory   LearningHistory @relation(fields: [learningHistoryId], references: [userId])
  learningHistoryId String

  // Origin either are path or custom goals
  learningPath      LearningPath? @relation(fields: [learningPathId], references: [id])
  learningPathId    String?       @unique
  pathTeachingGoals Skill[]       @relation("proposedpathGoals")

  // progress          LearningPathProgress?
  lifecycle LIFECYCLE @default(CREATED)

  @@map("personalPaths")
}

model PathSequence {
  id       String                   @id @default(cuid())
  position Int
  path     PersonalizedLearningPath @relation(fields: [pathId], references: [id])
  pathId   String
  unit     ConsumedUnitData         @relation(fields: [unitId], references: [id])
  unitId   String

  @@unique([pathId, position]) // Position must be unique in a path
  @@map("pathSequence")
}

model ConsumedUnitData {
  id                   String                @id @default(cuid())
  actualProcessingTime Int                   @default(0) // Duration in seconds
  testPerformance      Decimal               @default(0.0) @db.Decimal(5, 2)
  unit                 LearningUnit          @relation("consumedLU", fields: [unitId], references: [id])
  unitId               String
  status               STATUS                @default(OPEN)
  date                 DateTime              @default(now())
  startedBy            LearningHistory       @relation("startedBy", fields: [historyId], references: [userId])
  historyId            String
  path                 PathSequence[]

  @@unique([unitId, historyId])
  @@map("consumedUnits")
}


// Stores the feedback (evaluation) from a user given to a learning unit
//
// Requested by:
// - Part of AP 6.3 (user validation of the platform)
// - https://github.com/e-Learning-by-SSE/nm-skill-service/issues/30
model Feedback {
  id                  String       @id @default(cuid())
  //user                UserProfile?  @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: SetDefault)  //Set author to anonymous when user is deleted (requires user with id: Anonymous)
  userId              String       @default("Anonymous") //A feedback should have an author, but they can be anonymous (if author is deleted or we want anonymous feedback)
  learningUnit        LearningUnit @relation(fields: [learningUnitId], references: [id], onUpdate: NoAction, onDelete: Cascade) //Delete feedback if LU is deleted
  learningUnitId      String //A feedback is always given for exactly one learing unit
  learningValue       Int          @default(1) //How much did the user learn?
  presentation        Int          @default(1) //How well was the content presented?
  comprehensiveness   Int          @default(1) //How easily understandable was the content?
  structure           Int          @default(1) //How well was the content structured (including length)?
  overallRating       Int          @default(1) //How is the overall rating for the learning unit/task?
  optionalTextComment String?      @default("") //Optional textual comment, e.g., what could be better, what was great?
  createdAt           DateTime     @default(now())
}

model Bkgr {
  id           String         @id @default(cuid())
  typ          Typ            @relation(fields: [typId], references: [id])
  typId        String
  BerufeNetJob BerufeNetJob[]
}

model Typ {
  id   String @unique
  Bkgr Bkgr[]
}

model BerufeNetJob {
  id                     String @id @default(cuid())
  kurzBezeichnungNeutral String
  bkgr                   Bkgr   @relation(fields: [bkgrId], references: [id])
  bkgrId                 String
}
