// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model SkillMap {
  id          String   @id @default(cuid())
  name        String
  description String?
  taxonomy    String   @default("Bloom")
  version     String   @default("")
  owner       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  skills      Skill[]

  @@unique([owner, name, version])
  @@map("skill-maps")
}

model Skill {
  id          String  @id @default(cuid())
  name        String
  level       Int
  description String?

  repositoryId         String
  repository           SkillMap @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  parentSkills         Skill[]         @relation("parentSkills")
  nestedSkills         Skill[]         @relation("parentSkills")
  pathTeachingGoals    PathGoal[]      @relation("pathTeachingGoal")
  requirements         PathGoal[]      @relation("requirements")

  // Use in Learning Objects
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  goalsOf              LearningUnit[]  @relation("teachingGoals")
  requirementsOf       LearningUnit[]  @relation("requirementslearningUnit")

  @@unique([repositoryId, name])
  @@map("skills")
}

model PathGoal {
  id                String         @id @default(cuid())
  title             String
  targetAudience    String?
  description       String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  pathTeachingGoals Skill[]        @relation("pathTeachingGoal")
  requirements      Skill[]        @relation("requirements")
  paths             LearningPath[] @relation("pathGoals")

  @@map("path_goals")
}

model LearningPath {
  id               String      @id @default(cuid())
  title            String
  description      String?
  version          String      @default("")
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  goals            PathGoal[]  @relation("pathGoals")

  @@unique([title, version])
  @@map("paths")
}

enum NuggetCategory {
  ANALYZE
  INTRODUCTION
  CONTENT
  EXAMPLE
  EXERCISE
  TEST
}

model Nugget {
  id             Int            @id @default(autoincrement())
  resource      String         // Should point to the actual ressource
  language       String
  name           String?
  isTypeOf       NuggetCategory @default(CONTENT)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  processingTime String         @default("")
  presenter      String         @default("")
  mediatype      String         @default("")
  LearningUnit   LearningUnit?  @relation(fields: [learningUnitId], references: [id])
  learningUnitId Int?
}

model LearningUnit {
  id                 Int      @id @default(autoincrement())
  resource          String   // Should point to the actual ressource
  language           String
  title              String
  description        String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  searchInfos        SearchLearningUnit?
  selfLearnInfos     SelfLearningUnit?

  teachingGoals      Skill[]  @relation("teachingGoals")
  requirements       Skill[]  @relation("requirementslearningUnit")
  nuggets            Nugget[]
}

model SearchLearningUnit {
  id                 Int      @id @default(autoincrement())
  processingTime     String   @default("")
  rating             String   @default("")
  contentCreator     String   @default("")
  contentProvider    String   @default("")
  targetAudience     String   @default("")
  semanticDensity    String   @default("")
  semanticGravity    String   @default("")
  contentTags        String[]
  contextTags        String[]
  linkToHelpMaterial String?
  basicUnit          LearningUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId             Int

  @@unique([unitId])
}

model SelfLearningUnit {
  id                 Int      @id @default(autoincrement())
  order              Int?
  basicUnit          LearningUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId             Int

  @@unique([unitId])
}