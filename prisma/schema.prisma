// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model SkillMap {
  id            String        @id @default(cuid())
  name          String
  description   String?
  taxonomy      String        @default("Bloom")
  version       String        @default("")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  skills        Skill[]
  access_rights ACCESS_RIGHTS @default(PRIVATE)
  ownerId       String

  @@unique([ownerId, name, version])
  @@map("skill-maps")
}

enum ACCESS_RIGHTS {
  PRIVATE
  PUBLIC
  COMPANY
}

model Skill {
  id          String  @id @default(cuid())
  name        String
  level       Int
  description String?

  repositoryId      String
  repository        SkillMap   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  parentSkills      Skill[]    @relation("parentSkills")
  nestedSkills      Skill[]    @relation("parentSkills")
  pathTeachingGoals PathGoal[] @relation("pathTeachingGoal")
  requirements      PathGoal[] @relation("requirements")

  // Use in Learning Objects
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  goalsOf             LearningUnit[]      @relation("teachingGoals")
  searchSkillInfos    SkillSearchInfo?
  selfLearnSkillInfos SkillSelfLearnInfo?

  @@unique([repositoryId, name])
  @@map("skills")
}

model SkillSelfLearnInfo {
  id             String              @id @default(cuid())
  requirementsOf RelationSelflearn[] @relation("requirementslearningUnit")
  skill          Skill               @relation(fields: [skillId], references: [id])
  skillId        String              @unique
}

model SkillSearchInfo {
  id             String               @id @default(cuid())
  requirementsOf SearchLearningUnit[] @relation("requirementslearningUnit")
  skill          Skill                @relation(fields: [skillId], references: [id])
  skillId        String               @unique
}

model RelationSelflearn {
  id                            String               @id @default(cuid())
  degreeOfImportance            DegreeOfImportance
  requiredSkillForLearningUinit SelfLearningUnit?
  requirements                  SkillSelfLearnInfo[] @relation("requirementslearningUnit")
}

enum DegreeOfImportance {
  MANDATROY
  HELPFUL
}

model PathGoal {
  id                String         @id @default(cuid())
  title             String
  targetAudience    String?
  description       String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  pathTeachingGoals Skill[]        @relation("pathTeachingGoal")
  requirements      Skill[]        @relation("requirements")
  paths             LearningPath[] @relation("pathGoals")

  @@map("path_goals")
}

model LearningPath {
  id          String     @id @default(cuid())
  title       String
  description String?
  version     String     @default("")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  goals       PathGoal[] @relation("pathGoals")

  @@unique([title, version])
  @@map("paths")
}

enum NuggetCategory {
  ANALYZE
  INTRODUCTION
  CONTENT
  EXAMPLE
  EXERCISE
  TEST
}

model Nugget {
  id             String         @id @default(cuid())
  resource       String // Should point to the actual ressource
  language       String
  name           String?
  isTypeOf       NuggetCategory @default(CONTENT)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  processingTime String         @default("")
  presenter      String         @default("")
  mediatype      String         @default("")
  LearningUnit   LearningUnit?  @relation(fields: [learningUnitId], references: [id])
  learningUnitId String?
}

model LearningUnit {
  id             String              @id @default(cuid())
  resource       String              @default("") // Should point to the actual ressource
  language       String
  title          String
  description    String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  searchInfos    SearchLearningUnit?
  selfLearnInfos SelfLearningUnit?

  teachingGoals Skill[] @relation("teachingGoals")

  nuggets Nugget[]

  consumed ConsumedUnitData[] @relation("consumedLU")
}

model SearchLearningUnit {
  id                 String            @id @default(cuid())
  processingTime     String            @default("")
  rating             String            @default("")
  contentCreator     String            @default("")
  contentProvider    String            @default("")
  targetAudience     String            @default("")
  semanticDensity    String            @default("")
  semanticGravity    String            @default("")
  contentTags        String[]
  contextTags        String[]
  linkToHelpMaterial String?
  basicUnit          LearningUnit      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId             String
  requirements       SkillSearchInfo[] @relation("requirementslearningUnit")

  @@unique([unitId])
}

model SelfLearningUnit {
  id        String       @id @default(cuid())
  order     Int?
  basicUnit LearningUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId    String

  relation   RelationSelflearn? @relation(fields: [relationId], references: [id])
  relationId String             @unique // relation scalar field (used in the `@relation` attribute above)

  @@unique([unitId])
}

model Company {
  id   String @id @default(cuid())
  name String @default("")

  User User[]
}

model User {
  id              String                @id @default(cuid())
  name            String                @default("")
  learningProfile LearningProfile?
  skillProfile    SkillProfile?
  companyId       String?
  company         Company?             @relation(fields: [companyId], references: [id])
  profile         LearningBehaviorData?

  @@unique([companyId, name])
}

model LearningProfile {
  id                    String @id @default(cuid())
  semanticDensity       Int
  semanticGravity       Int
  mediaType             String @default("")
  language              String @default("")
  processingTimePerUnit String @default("")
  user                  User   @relation(fields: [userId], references: [id])
  userId                String @unique // relation scalar field 
}

model SkillProfile {
  id                    String          @id @default(cuid())
  jobHistory            String          @default("")
  professionalInterests String          @default("")
  qualifications        Qualification[]
  user                  User            @relation(fields: [userId], references: [id])
  userId                String          @unique // relation scalar field 
}





model ConsumedUnitData {
  id                  String               @id @default(cuid())
  actualPocessingTime String
  testPerformance     Decimal              @db.Decimal(5, 2)
  consumedLUId        LearningUnit[]       @relation("consumedLU")
  lbData              LearningBehaviorData @relation(fields: [lbDataId], references: [id])
  lbDataId            String
}

model LearningBehaviorData {
  id           String             @id @default(cuid())
  clickdata    String[]
  consumedUnit ConsumedUnitData[]
  user         User               @relation(fields: [userId], references: [id])
  userId       String             @unique
}

model Qualification {
 
 // unique id of the qualification
 id        String @id @default(cuid()) 
  
 // Name of the qualification
 name      String 
  
 // Year the qualification was acquired
 year      Int      
 
 // SkillProfile id of the user
 // DB-Entry           //From DB-SkillProfile   // us the "UserDd" to link to the "id" in DB-SkillProfile
 userSkillProfileId    SkillProfile             @relation(fields: [userId], references: [id])
 userId    String @unique    // relation scalar field 


}
